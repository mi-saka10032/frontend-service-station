import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as u,d as r,w as a,a as i,r as d,b as s,e as n}from"./app.f8095bbb.js";const v={},k=i('<p>Umi 是由蚂蚁集团推出的一款主要面向 React 的底层前端框架，有很多有意思的特性：</p><ol><li>企业级，在安全性、稳定性、最佳实践、约束能力方面会考虑更多</li><li>插件化，啥都能改，Umi 本身也是由插件构成</li><li>MFSU，<strong>比 Vite 还快的 Webpack 打包方案</strong></li><li>基于 React Router 6 的完备路由</li><li>默认最快的请求</li><li>SSR &amp; SSG</li><li>稳定白盒性能好的 ESLint 和 Jest</li><li>React 18 的框架级接入</li><li>Monorepo 最佳实践</li></ol><h2 id="安装与创建" tabindex="-1"><a class="header-anchor" href="#安装与创建" aria-hidden="true">#</a> 安装与创建</h2><h3 id="安装包" tabindex="-1"><a class="header-anchor" href="#安装包" aria-hidden="true">#</a> 安装包</h3>',4),m=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"npm"),n(),s("span",{class:"token function"},"install"),n(),s("span",{class:"token parameter variable"},"-g"),n(` create-umi
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),b=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"yarn"),n(),s("span",{class:"token function"},"install"),n(),s("span",{class:"token parameter variable"},"-g"),n(` create-umi
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),g=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"pnpm"),n(),s("span",{class:"token function"},"install"),n(),s("span",{class:"token parameter variable"},"-g"),n(` create-umi
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),h=i(`<h3 id="创建新项目" tabindex="-1"><a class="header-anchor" href="#创建新项目" aria-hidden="true">#</a> 创建新项目</h3><p>::: code-tabs@shell</p><template><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx create-umi@latest umi-demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></template><template><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> create umi umi-demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></template><template><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> dlx create-umi@latest umi-demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>:::</p><p>这里我们选择<code>Ant Design pro</code>，以获得完整的项目结构</p><p>国内建议选 pnpm + taobao 源，速度提升明显。这一步会自动安装依赖，同时安装成功后会自动执行 umi setup 做一些文件预处理等工作</p><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><p>这是 Umi 官方约定（推荐）的目录结构，开发时需按约定组织代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── config
│   └── config.ts
├── dist
├── mock
│   └── app.ts｜tsx
├── src
│   ├── .umi
│   ├── .umi-production
│   ├── layouts
│   │   ├── BasicLayout.tsx
│   │   ├── index.less
│   ├── models
│   │   ├── global.ts
│   │   └── index.ts
│   ├── pages
│   │   ├── index.less
│   │   └── index.tsx
│   ├── utils // 推荐目录
│   │   └── index.ts
│   ├── services // 推荐目录
│   │   └── api.ts
│   ├── app.<span class="token punctuation">(</span>ts<span class="token operator">|</span>tsx<span class="token punctuation">)</span>
│   ├── global.ts
│   ├── global.<span class="token punctuation">(</span>css<span class="token operator">|</span><span class="token function">less</span><span class="token operator">|</span>sass<span class="token operator">|</span>scss<span class="token punctuation">)</span>
│   ├── overrides.<span class="token punctuation">(</span>css<span class="token operator">|</span><span class="token function">less</span><span class="token operator">|</span>sass<span class="token operator">|</span>scss<span class="token punctuation">)</span>
│   ├── favicon.<span class="token punctuation">(</span>ico<span class="token operator">|</span>gif<span class="token operator">|</span>png<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>svg<span class="token operator">|</span>avif<span class="token operator">|</span>webp<span class="token punctuation">)</span>
│   └── loading.<span class="token punctuation">(</span>tsx<span class="token operator">|</span>jsx<span class="token punctuation">)</span>
├── node_modules
│   └── .cache
│       ├── bundler-webpack
│       ├── mfsu
│       └── mfsu-deps
├── .env
├── plugin.ts
├── .umirc.ts // 与 config/config 文件 <span class="token number">2</span> 选一
├── package.json
├── tsconfig.json
└── typings.d.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍一些重要目录与文件</p><h3 id="umirc-ts" tabindex="-1"><a class="header-anchor" href="#umirc-ts" aria-hidden="true">#</a> .umirc.ts</h3><p>与 <code>config/config.ts</code> 文件功能相同，2 选 1 。<code>.umirc.ts</code> 文件优先级较高</p><p>配置文件，包含 Umi 所有非运行时配置（运行时配置一般定义于 app.ts）。</p><p>若你需要在不同环境中加载不同配置，这在 Umi 中是根据 UMI_ENV 来实现的，一个不同环境启动的例子</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;umi dev&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dev:pre&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env UMI_ENV=pre umi dev&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mock" tabindex="-1"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> mock</h3><p>存放 mock 文件，此目录下所有 <code>.ts / .js</code> 文件会被 mock 服务加载，从而提供模拟数据</p><h3 id="public" tabindex="-1"><a class="header-anchor" href="#public" aria-hidden="true">#</a> public</h3><p>存放固定的静态资源，如存放 public/image.png ，则开发时可以通过 <strong>/image.png</strong> 访问到，构建后会被拷贝到输出文件夹</p><p>注意：<code>/</code>开头表示 public 的绝对路径；<code>.</code>开头表示当前文件的相对路径</p><p>对于 svg 资源，Umi 支持 svgr ，可以直接导入作为组件使用：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> SmileUrl<span class="token punctuation">,</span> <span class="token punctuation">{</span> ReactComponent <span class="token keyword">as</span> SvgSmile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./smile.svg&quot;</span><span class="token punctuation">;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SvgSmile</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> imgUrl <span class="token keyword">from</span> <span class="token string">&quot;./image.png&quot;</span><span class="token punctuation">;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>imgUrl<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="src" tabindex="-1"><a class="header-anchor" href="#src" aria-hidden="true">#</a> src</h3><h4 id="umi" tabindex="-1"><a class="header-anchor" href="#umi" aria-hidden="true">#</a> .umi</h4><p>不要提交 .umi 临时文件到 git 仓库，默认已在 .gitignore 被忽略</p><p>dev 时的临时文件目录，比如入口文件、路由等，都会被临时生成到这里</p><h4 id="umi-production" tabindex="-1"><a class="header-anchor" href="#umi-production" aria-hidden="true">#</a> .umi-production</h4><p>不要提交 .umi-production 临时文件到 git 仓库，默认已在 .gitignore 被忽略</p><p>build 时的临时文件目录，比如入口文件、路由等，都会被临时生成到这里</p><h4 id="app-ts" tabindex="-1"><a class="header-anchor" href="#app-ts" aria-hidden="true">#</a> app.ts</h4><p>运行时配置 文件，可以在这里扩展运行时的能力，比如修改路由、修改 render 方法等</p><p>运行时配置带来的逻辑会在浏览器中运行，因此当有远程配置、动态内容时，这些我们在本地开发时还不确定，不能写死，所以需要在浏览器实际运行项目时动态获取他们</p><p>适合场景：角色鉴权、动态添加路由等</p><h4 id="layouts-index-tsx" tabindex="-1"><a class="header-anchor" href="#layouts-index-tsx" aria-hidden="true">#</a> layouts/index.tsx</h4><p>公共组件布局，新建组件后，会默认渗透到每一级 pages 组件作为它们的公共组件。注意需要添加<code>&lt;Outlet&gt;</code>渲染嵌套路由</p><p>当你需要关闭 layout 时可以使用 layout: false ，当你需要更多层 layout 时，可以考虑使用 wrappers ，仅在配置式路由可用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;./index&quot;</span><span class="token punctuation">,</span> layout<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> <span class="token string">&quot;./users&quot;</span><span class="token punctuation">,</span>
    wrappers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@/wrappers/auth&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pages" tabindex="-1"><a class="header-anchor" href="#pages" aria-hidden="true">#</a> pages</h4><p>约定式路由默认以 pages/* 文件夹的文件层级结构来生成路由表。</p><p>在配置式路由中，component 若写为相对路径，将从该文件夹为起点开始寻找文件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token comment">// \`./index\` === \`@/pages/index\`</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;./index&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>基础路由</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+ pages/
  + users/
    - index.tsx
  - index.tsx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的自动生成路由：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/index.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/users/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/users/index.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>动态路由</li></ol><p>这里的动态路由指的是 url 中携带 params 参数的路由</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+ pages/
  + foo/
    - <span class="token variable">$slug</span>.tsx
  + <span class="token variable">$bar</span>/
    - $.tsx
  - index.tsx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会生成路由配置如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/index.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo/:slug&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/foo/$slug.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/:bar/*&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/$bar/$.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>404</li></ol><p>编写路径须是<code>pages/404.tsx</code></p><p>结构约定式路由自动注册 404 兜底。配置式路由需要手动配置兜底</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token comment">// other routes ...</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/*&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/404.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="global-ts" tabindex="-1"><a class="header-anchor" href="#global-ts" aria-hidden="true">#</a> global.ts</h4><p>全局前置脚本文件。与 App.ts 的区别在于：</p><p>global.ts 为应用前置、全局运行；App.ts 是对全局 Context、应用运行时做修改</p><h4 id="global-less" tabindex="-1"><a class="header-anchor" href="#global-less" aria-hidden="true">#</a> global.less</h4><p>全局样式文件</p><h4 id="overrides-less" tabindex="-1"><a class="header-anchor" href="#overrides-less" aria-hidden="true">#</a> overrides.less</h4><p>高优先级的全局样式文件，用于覆盖第三方库样式</p><h4 id="loading-tsx" tabindex="-1"><a class="header-anchor" href="#loading-tsx" aria-hidden="true">#</a> loading.tsx</h4><p>全局加载组件</p><h3 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h3><p>Umi 默认按页拆包，注意编写<code>src/loading.tsx</code></p><p>path 只支持两种占位符配置，第一种是动态参数 :id 的形式，第二种是 * 通配符，通配符只能出现路由字符串的最后</p><p>可配置的基础属性有：path、component、routes、redirect、wrappers、title</p><p><a href="#pages">配置方法</a></p><p>wrappers：</p><p>配置路由组件的包装组件，通过包装组件可以为当前的路由组件组合进更多的功能。 比如，可以用于路由级别的权限校验：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> wrappers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@/wrappers/auth&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;login&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Navigate<span class="token punctuation">,</span> Outlet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Outlet</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navigate</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，访问 /user，就通过 auth 组件做权限校验，如果通过，渲染 src/pages/user，否则跳转到 /login。</p></template>`,5);function x(q,f){const o=d("CodeTabs");return c(),u("div",null,[k,r(o,{id:"56",data:[{title:"npm"},{title:"yarn"},{title:"pnpm"}],"tab-id":"shell"},{tab0:a(({title:e,value:t,isActive:p})=>[m]),tab1:a(({title:e,value:t,isActive:p})=>[b]),tab2:a(({title:e,value:t,isActive:p})=>[g]),_:1}),h])}const w=l(v,[["render",x],["__file","8-umi.html.vue"]]);export{w as default};
