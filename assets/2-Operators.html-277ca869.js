import{_ as n,Y as s,Z as a,a1 as t}from"./framework-bb209140.js";const e={},o=t(`<h2 id="提前声明" tabindex="-1"><a class="header-anchor" href="#提前声明" aria-hidden="true">#</a> 提前声明</h2><p>Dart 的操作运算符与 Java、JavaScript 非常接近，个人理解有两点需注意：</p><ol><li>Dart 和 JavaScript 的相等运算不同，只有<code>==</code>判断，因为 Dart 中万物皆对象，这一点与 Java 相同。</li><li>Dart 的可选链操作符与 JavaScript 的 ES6+语法类似，一定程度上增加了语法灵活度。</li></ol><p>主要记录类型操作符和级联操作符。</p><h2 id="类型操作符" tabindex="-1"><a class="header-anchor" href="#类型操作符" aria-hidden="true">#</a> 类型操作符</h2><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>as</code></td><td style="text-align:left;">类型转换</td></tr><tr><td style="text-align:left;"><code>is</code></td><td style="text-align:left;">如果对象具有指定类型，则为 True</td></tr><tr><td style="text-align:left;"><code>is!</code></td><td style="text-align:left;">如果对象没有指定的类型，则为 True</td></tr></tbody></table><p><code>as</code>近似于 TypeScript 的类型判断操作符。</p><p><code>is</code>近似于<code>instanceof</code>。</p><h2 id="级联操作符" tabindex="-1"><a class="header-anchor" href="#级联操作符" aria-hidden="true">#</a> 级联操作符</h2><p>级联操作符允许对同一对象进行一系列链式操作。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black
  <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round
  <span class="token punctuation">.</span><span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等同于</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> paint <span class="token operator">=</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">;</span>
paint<span class="token punctuation">.</span>strokeCap <span class="token operator">=</span> <span class="token class-name">StrokeCap</span><span class="token punctuation">.</span>round<span class="token punctuation">;</span>
paint<span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#confirm&#39;</span></span><span class="token punctuation">)</span> <span class="token comment">// Get an object.</span>
  <span class="token operator">?</span><span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Confirm&#39;</span></span> <span class="token comment">// Use its members.</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;important&#39;</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Confirmed!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等同于</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#confirm&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Confirm&#39;</span></span><span class="token punctuation">;</span>
button<span class="token operator">?</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;important&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token operator">?</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Confirmed!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在级联操作时需要注意返回实际对象的操作方法，可能导致链式操作失败。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;foo&#39;</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;bar&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: method &#39;write&#39; isn&#39;t defined for &#39;void&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他操作符" tabindex="-1"><a class="header-anchor" href="#其他操作符" aria-hidden="true">#</a> 其他操作符</h2><p>其他操作符统计：</p><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">名称</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>()</code></td><td style="text-align:left;">函数应用</td><td style="text-align:left;">代表一个函数调用</td></tr><tr><td style="text-align:left;"><code>[]</code></td><td style="text-align:left;">下标访问</td><td style="text-align:left;">表示对可重写运算符的调用<code>[]</code>；示例：<code>fooList[1]</code>传递 int1 来 fooList 访问索引处的元素 1</td></tr><tr><td style="text-align:left;"><code>?[]</code></td><td style="text-align:left;">条件下表访问</td><td style="text-align:left;">与 类似<code>[]</code>，但最左边的操作数可以为 null；示例：<code>fooList?[1]</code>传递 int1 来 fooList 访问索引处的元素 1，除非 fooList 为 null（在这种情况下表达式的计算结果为 null）</td></tr><tr><td style="text-align:left;"><code>.</code></td><td style="text-align:left;">成员访问</td><td style="text-align:left;">指的是表达式的属性；示例： <code>foo.bar</code> 从表达式 foo 中选择属性 bar</td></tr><tr><td style="text-align:left;"><code>?.</code></td><td style="text-align:left;">条件成员访问</td><td style="text-align:left;">与<code>.</code>类似，但最左边的操作数可以为空；示例： <code>foo?.bar</code> 从表达式 foo 中选择属性 bar，除非 foo 为 null（在这种情况下，<code>foo?.bar</code> 的值为 null）</td></tr><tr><td style="text-align:left;"><code>!</code></td><td style="text-align:left;">空断言运算符</td><td style="text-align:left;">将表达式转换为其基础的不可空类型，如果转换失败，则抛出运行时异常；示例： <code>foo!.bar</code> 断言 foo 为非 null 并选择属性 bar，除非 foo 为 null，在这种情况下会引发运行时异常</td></tr></tbody></table>`,22),p=[o];function l(c,i){return s(),a("div",null,p)}const d=n(e,[["render",l],["__file","2-Operators.html.vue"]]);export{d as default};
