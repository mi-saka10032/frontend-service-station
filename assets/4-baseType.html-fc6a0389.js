import{_ as n,Y as s,Z as a,a1 as t}from"./framework-bb209140.js";const e={},p=t(`<p>Dart 支持以下数据类型：</p><ul><li>数字（int double）</li><li>字符串 String</li><li>布尔值 bool</li><li>记录 Records</li><li>列表 Lists</li><li>集合 Sets</li><li>映射表 Maps</li><li>特殊符号 Runes</li><li>象征 Symbol</li><li>空值 null</li></ul><p>这一章只记录基本类型</p><h2 id="num" tabindex="-1"><a class="header-anchor" href="#num" aria-hidden="true">#</a> num</h2><p>Dart 的数字类型有两种：int 和 double</p><p>int 的整数值不大于 64 位，值的范围可以是 -2^63 到 2^63 - 1。在 Web 上，整数值表示为 JavaScript 数字（没有小数部分的 64 位浮点值），并且可以是从 -2^53 到 2^53 - 1。</p><p>double 是 64 位的双精度浮点数。</p><p>int 和 double 都是 num 的子类型。</p><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// String -&gt; int</span>
<span class="token keyword">var</span> one <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>one <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// String -&gt; double</span>
<span class="token keyword">var</span> onePointOne <span class="token operator">=</span> double<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;1.1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>onePointOne <span class="token operator">==</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// int -&gt; String</span>
<span class="token class-name">String</span> oneAsString <span class="token operator">=</span> <span class="token number">1.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>oneAsString <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;1&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// double -&gt; String</span>
<span class="token class-name">String</span> piAsString <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">.</span><span class="token function">toStringAsFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>piAsString <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;3.14&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011 &lt;&lt; 1 == 0110</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011 | 0100 == 0111</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0011 &amp; 0100 == 0000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><p>字符串使用单引号和双引号均可</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Single quotes work well for string literals.&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Double quotes work just as well.&quot;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;It\\&#39;s easy to escape the string delimiter.&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s4 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;It&#39;s even easier to use the other delimiter.&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串支持<code>\${}</code>插值语法</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;string interpolation&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Dart has </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">s</span></span><span class="token string">, which is very handy.&#39;</span></span> <span class="token operator">==</span>
    <span class="token string-literal"><span class="token string">&#39;Dart has string interpolation, &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;which is very handy.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;That deserves all caps. &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> is very handy!&#39;</span></span> <span class="token operator">==</span>
    <span class="token string-literal"><span class="token string">&#39;That deserves all caps. &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;STRING INTERPOLATION is very handy!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以直接操作相邻字符串拼接或使用&quot;+&quot;连接</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;String &#39;</span></span>
    <span class="token string-literal"><span class="token string">&#39;concatenation&#39;</span></span>
    <span class="token string-literal"><span class="token string">&quot; works even over line breaks.&quot;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span>
    <span class="token string-literal"><span class="token string">&#39;String concatenation works even over &#39;</span></span>
        <span class="token string-literal"><span class="token string">&#39;line breaks.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;The + operator &#39;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&#39;works, as well.&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;The + operator works, as well.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建可换行字符串，使用三引号</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;&#39;
You can create
multi-line strings like this one.
&#39;&#39;&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;This is also a
multi-line string.&quot;&quot;&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意组合的字符串常量必须全部由常量组成</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// These work in a const string.</span>
  <span class="token keyword">const</span> aConstNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> aConstBool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> aConstString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;a constant string&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// These do NOT work in a const string.</span>
  int aNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  bool aBool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> aString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;a string&#39;</span></span><span class="token punctuation">;</span>
  <span class="token class-name">List</span> aConstList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> validConstString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">aConstNum</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">aConstBool</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">aConstString</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
  <span class="token comment">// const invalidConstString = &#39;$aNum $aBool $aString $aConstList&#39;; ×</span>
  <span class="token comment">// String validConstString2 = &#39;$aNum $aBool $aString $aConstList&#39;; √</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bool" tabindex="-1"><a class="header-anchor" href="#bool" aria-hidden="true">#</a> bool</h2><p>Dart 的布尔值判断不存在 JS 的隐式转换</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Check for an empty string.</span>
<span class="token keyword">var</span> fullName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>fullName<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Check for zero.</span>
<span class="token keyword">var</span> hitPoints <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>hitPoints <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Check for null.</span>
<span class="token keyword">var</span> unicorn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>unicorn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Check for NaN.</span>
<span class="token keyword">var</span> iMeantToDoThis <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>iMeantToDoThis<span class="token punctuation">.</span>isNaN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="runes" tabindex="-1"><a class="header-anchor" href="#runes" aria-hidden="true">#</a> Runes</h2><p>要使用特殊的如 emoji 等 Unicode 字符，需导入 dart 的 character 库</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:characters/characters.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hi <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Hi 🇩🇰&#39;</span></span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The end of the string: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">hi<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>hi<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;The last character: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">hi<span class="token punctuation">.</span>characters<span class="token punctuation">.</span>last</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出参考</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ dart run bin/main.dart
Hi 🇩🇰
The end of the string: ???
The last character: 🇩🇰
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h2><p>Symbol 含义及用法与 JS 相同。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> sym <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;tom&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(&#39;tom&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),o=[p];function l(i,c){return s(),a("div",null,o)}const u=n(e,[["render",l],["__file","4-baseType.html.vue"]]);export{u as default};
