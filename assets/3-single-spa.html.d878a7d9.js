import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as u,c as r,a as n,b as s,e as a,w as e,d as p,r as o}from"./app.72a63fa9.js";const k={},d={href:"https://juejin.cn/post/6844904162509979662",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/weixin_43522687/article/details/106750074",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/wanghe1111_/article/details/123816165",target:"_blank",rel:"noopener noreferrer"},b=p('<h2 id="模块组成" tabindex="-1"><a class="header-anchor" href="#模块组成" aria-hidden="true">#</a> 模块组成</h2><p>微前端的核心是“主从思想”，即一个基座（MaiApp）和若干个微应用（MicroApp）</p><p>基座应用大多数是一个前端 SPA 项目，主要负责应用注册、路由映射、消息下发等</p><p>微应用是独立前端项目，这些项目不限于采用 React、Vue、Angular 甚至 JQuery 开发。每个微应用注册到基座应用中，由基座进行管理，但是如果脱离基座也可以单独访问</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/microapp-module.png" alt="微前端模块图" loading="lazy"></p><p>当整个微前端框架运行之后，给用户的体验就是类似下图所示：</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/microapp-runtime.png" alt="微前端运行效果" loading="lazy"></p><p>简而言之，就是基座应用中有一些菜单项，每个菜单项可以展示对应的微应用，这些应用的切换对用户而言是无感知的，就用户体验来说是很好的。而为了实现多应用正常运行，基座应用有以下问题亟待解决：</p><ol><li>路由切换如何准确分发</li><li>主微应用的全局环境如何隔离</li><li>通信问题</li></ol><h2 id="路由分发" tabindex="-1"><a class="header-anchor" href="#路由分发" aria-hidden="true">#</a> 路由分发</h2><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/microapp-route.png" alt="微前端运行效果" loading="lazy"></p><p>从上图可知，子应用在加载前会创建基于自身的生命周期实例和路由，然后注册到主工程中，当页面 URL 跳转时，通过路由管理器和应用管理器匹配子应用，在加载子应用的过程中，有三个生命周期，bootstrap 是初始化，这个时候页面显示 loading，也就是正在加载中，然后走到 mount，开始加载页面，不需要显示当前子应用时，通过 unmount 卸载子应用</p><p>实现基座应用<strong>路由分发</strong>子应用的核心是 systemJS 和 Single-SPA</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/microapp-remoteTool.png" alt="微前端远程技术" loading="lazy"></p><ul><li>systemJS：提供通用的模块导入途经，支持传统模块、ES6、CJS、UMD 等模块，相当于加载器，主要用于调度子应用，决定何时展示哪个子应用</li><li>Single-SPA：把现有的应用进行包装，使加载器可以使用它们</li></ul><h3 id="远程拉取-加载器" tabindex="-1"><a class="header-anchor" href="#远程拉取-加载器" aria-hidden="true">#</a> 远程拉取（加载器）</h3>',16),g={href:"https://www.npmjs.com/package/import-html-entry",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.npmjs.com/package/systemjs",target:"_blank",rel:"noopener noreferrer"},y=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用于解析出html代码中的script脚本的方法</span>
<span class="token comment">// 其实qiankun框架里面有用一个库即import-html-entry，其封装了一些从html文件中提取script标签，并动态执行script脚本的方法，而且这个库中也封装了沙箱机制</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchResource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./fetch-resource&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 这里我们仿造import-html-entry库，然后自己手写几个类似的方法</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">importHTML</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 加载子应用就是请求获取app的entry资源，资源有很多种，有HTML、css、js，所以我们要一个个来处理</span>
  <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 先来请求html资源,可以使用很多异步请求方式：ajax、aiox、fetch</span>
  <span class="token keyword">const</span> template <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  template<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>
  <span class="token comment">// 获取template的dom下的所有script脚本</span>
  <span class="token keyword">const</span> scripts <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取所有script标签脚本代码，最后返回一个数组的形式</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getExternalScripts</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scripts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// promise.all的返回值是一个promise数组</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
      Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>scripts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">script</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> src <span class="token operator">=</span> script<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//如果script脚本没有src，那么就是普通的script标签里面的script代码</span>
          <span class="token comment">// 那么就只返回script里面的代码，并封装成promise对象</span>
          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>script<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">//表示此script脚本是外链的资源，资源在src中</span>
          <span class="token keyword">return</span> <span class="token function">fetchResource</span><span class="token punctuation">(</span>
            <span class="token comment">//需要判断src是以http开头比如http://www.nativejs.com，则资源是http外网资源;</span>
            <span class="token comment">// 如果是一种相对路径资源比如：/src/res则需要手动加上子应用的域名</span>
            src<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> src <span class="token operator">:</span> url <span class="token operator">+</span> src
          <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接发送异步请求</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取并执行所有的script脚本代码</span>
  <span class="token keyword">const</span> <span class="token function-variable function">execScripts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拿到html中的scripts脚，它是一个script代码字符串构成的数组</span>
    <span class="token keyword">const</span> scripts <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getExternalScripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 手动的构造一个commonJs环境，commonJs规则，里面有一个module对象，还有一个exports对象并且指向module.exports对象</span>
    <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>scripts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行scripts数组中的script字符串代码，这里依然是使用eval函数来执行字符串代码</span>
    scripts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">script</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// eval执行的代码可以访问外部代码</span>
      <span class="token function">eval</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 由于子模块到出的库格式为umd库，并且将返回的数据挂载到了window对象上，</span>
    <span class="token comment">// 所以我们可以在window对象上拿到子应用的生命周期钩子函数，需要注意的是生命周期钩子必须写在子应用的入口文件main.js，然后webpack打包的时候首先进入入口文件，然后再递归查找依赖的文件进行打包</span>
    <span class="token comment">// 因为我们自己构造了commonJs环境，那么我就能够通过module.exports拿到回调函数factory()返回的结果</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    template<span class="token punctuation">,</span> <span class="token comment">//teplate为处理之后的html模板字符串</span>
    getExternalScripts<span class="token punctuation">,</span> <span class="token comment">//调用它会得到所有的script脚本</span>
    execScripts<span class="token punctuation">,</span> <span class="token comment">//用来执行文档中所有的script脚本</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由注册-包装器" tabindex="-1"><a class="header-anchor" href="#路由注册-包装器" aria-hidden="true">#</a> 路由注册（包装器）</h3><p>Single-SPA 主要做的是：</p><ol><li>注册路由以及应用</li><li>注册的应用按照 ES Module 模块载入规范导出</li><li>根据路由匹配情况，发起一个路由匹配应用事件（single-spa:routing-event），在结合 SystemJS.import 方法去加载文件</li></ol>`,4),w={href:"https://zhuanlan.zhihu.com/p/378346507",target:"_blank",rel:"noopener noreferrer"},f=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 注册路由</span>
<span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> loadPromises <span class="token operator">=</span> <span class="token function">getAppsToLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toLoadPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>loadPromises<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    wasNoOp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>loadPromises<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>finishUpAndReturn<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">callAllEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分发步骤" tabindex="-1"><a class="header-anchor" href="#分发步骤" aria-hidden="true">#</a> 分发步骤</h3><p>所以路由分发指的其实是在主应用项目中，url 变化激活路由分发，路由管理器（SPA）找到 app1 对应的子应用名称，再去应用管理器里找到这个子应用，加载（SystemJS）到主应用，具体步骤是：</p><ol><li>子应用使用 single-SPA 创建实例，将加载前、加载后、卸载时的钩子函数、全局唯一的路由地址暴露到全局，以便主应用获取子应用的配置</li><li>主应用通过 SystemJS 加载子应用的入口 JS 文件，通过 singleSpa.registerApplication 注册路由和应用</li><li>当 url 变化时，触发 hashchange 或者 popstate 事件监听，获取到路由切换的时机</li><li>接收到路由变化的主应用 router，通过查询注册信息以获取匹配的子应用，最后加载子应用，并且子应用也同步开启路由监听</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>systemjs-importmap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;navbar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8080/app.js&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;app1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8081/app.js&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;single-spa&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://cdnjs.cloudflare.com/ajax/libs/single-spa/4.3.7/system/single-spa.min.js&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://cdn.jsdeliver.net/npm/vue@2.6.10/dist/vue.js&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;vue-router&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://cdn.jsdeliver.net/npm/vue-router@3.0.7/dist/vue-router.min.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 注册应用</span>
singleSPA<span class="token punctuation">.</span><span class="token function">registerApplication</span><span class="token punctuation">(</span>
  <span class="token string">&quot;app1&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> System<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token string">&quot;app1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 当url前缀为 /app1 的时候，返回true（底层路由）</span>
  <span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string">&quot;/app1&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

singleSPA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="公共依赖加载" tabindex="-1"><a class="header-anchor" href="#公共依赖加载" aria-hidden="true">#</a> 公共依赖加载</h3><p>再来说说公共依赖加载的问题</p><p>公共依赖是指子应用和主框架可以共用的依赖，像 vue、vue-router、webpack 等</p><p>这些公共依赖放在主框架中，子应用在 vue.config.js 文件通过 config.externals 配置共用依赖，这样需要时，就从主框架加载</p><p>主框架通过 systemjs-importmap 把需要的公用依赖文件导入进来，通过 System.import 使用依赖</p><h2 id="应用隔离" tabindex="-1"><a class="header-anchor" href="#应用隔离" aria-hidden="true">#</a> 应用隔离</h2><p>应用隔离问题主要分为主应用和微应用，微应用和微应用之间的 JavaScript 执行环境隔离，CSS 样式隔离，我们先来说下 CSS 的隔离</p><h3 id="css-隔离" tabindex="-1"><a class="header-anchor" href="#css-隔离" aria-hidden="true">#</a> CSS 隔离</h3><p>主应用和微应用同屏渲染时，就可能会有一些样式会相互污染，如果要彻底隔离 CSS 污染</p><p><strong>第一种</strong>方法是 BEM（Block Element Modifier）：约定项目前缀</p><p><strong>第二种</strong>方法是设置<code>selector module</code>，即采用 CSS Module 或者命名空间的方式，给每个微应用模块以特定前缀，即可保证不会互相干扰，可以采用 webpack 的 postcss 插件，在打包时添加特定的前缀</p><p>前两种方法大同小异</p><p><strong>第三种</strong>方法是 css-in-js，让 js 去手动添加 css（不推荐）</p><p><strong>第四种</strong>方法是使用<code>shadow DOM</code>，是 DOM 的 API，会把子应用所有内容放到 shadowDOM 里面，内部样式不会影响外部样式。html 中的 audio、video 标签都是 shadowDOM 的实际应用（强烈推荐）</p><p>shadow 使用 <code>HTMLElement.attachShadow({ mode: “open” })</code> 创建。之后再在里面添加子元素或者 innerHTML。</p>`,21),q=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token doctype"},[n("span",{class:"token punctuation"},"<!"),n("span",{class:"token doctype-tag"},"DOCTYPE"),s(),n("span",{class:"token name"},"html"),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("html")]),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("en"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("head")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"charset"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("UTF-8"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"http-equiv"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("X-UA-Compatible"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("IE=edge"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("viewport"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("width=device-width, initial-scale=1.0"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("title")]),n("span",{class:"token punctuation"},">")]),s("Document"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("title")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("head")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("style")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token style"},[n("span",{class:"token language-css"},[s(`
    `),n("span",{class:"token selector"},"p"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},"color"),n("span",{class:"token punctuation"},":"),s(" red"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("style")]),n("span",{class:"token punctuation"},">")]),s(`

  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("body")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token comment"},"<!-- 现在我将使用shadow dom来使得子应用和主应用之间的样式不会发生冲突 -->"),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("p")]),n("span",{class:"token punctuation"},">")]),s("wh"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("p")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token comment"},"<!-- 子应用内容 -->"),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("subApp"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
      `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("p")]),n("span",{class:"token punctuation"},">")]),s("子应用wh"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("p")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("body")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("html")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" subApp "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"#subApp"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// shadow dom就相当于一个普通的dom，你可以拿到并操作它，并且不会有样式冲突"),s(`
`),n("span",{class:"token keyword"},"const"),s(" shadow "),n("span",{class:"token operator"},"="),s(" subApp"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"attachShadow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"mode"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"open"'),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"//创建shadow dom，mode指是否可以通过js拿到子应用的dom"),s(`
shadow`),n("span",{class:"token punctuation"},"."),s("innerHTML "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},`
  <p>这是通过shadow dom添加的内容</p>
  <style>
    p {
      color: green;
    }
  </style>
`),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=p(`<h3 id="js-隔离" tabindex="-1"><a class="header-anchor" href="#js-隔离" aria-hidden="true">#</a> JS 隔离</h3><p>每当微应用的 JavaScript 被加载并运行时，它的核心实际上是对全局对象 Window 的修改以及一些全局事件的改变，例如 jQuery 这个 js 运行后，会在 Window 上挂载一个 window.$对象，对于其他库 React，Vue 也不例外。为此，需要在加载和卸载每个微应用的同时，尽可能消除这种冲突和影响，最普遍的做法是采用<strong>沙箱机制（SandBox）</strong></p><p>js 沙箱隔离主要分为三种，snapshot sandbox（快照沙箱）、Proxy sandbox(代理沙箱)、legacy sandBox(遗留沙箱)</p><h4 id="snapshot-沙箱" tabindex="-1"><a class="header-anchor" href="#snapshot-沙箱" aria-hidden="true">#</a> snapshot 沙箱</h4><p>快照沙箱的核心思想：即在子应用挂载前对当前主应用的全局变量保存，然后恢复之前的子应用环境，在子应用运行期间正常 get 和 set，在子应用卸载时保存当前变量恢复主应用变量，整个过程类似于中断和中断恢复。</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/snapshot-sandbox.png" alt="快照沙箱" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">iter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">SnapshotSandbox</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> window<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 激活沙箱</span>
  <span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 缓存active状态的window</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">iter</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 退出沙箱</span>
  <span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">iter</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">!==</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 记录变更</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>modifyPropsMap<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 还原window</span>
        window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>windowSnapshot<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理就是在子应用激活 / 卸载时分别去经过快照的形式记录/还原状态来实现沙箱，总结起来，对当前的 window 和记录的快照作 diff 来实现沙箱。</p><p>优点：兼容性好</p><p>缺点：</p><ol><li>每次切换时需要遍历 window，时间消耗大</li><li>多个子应用同时存在时仍然存在变量交叉污染的风险</li></ol><h4 id="legacy-沙箱" tabindex="-1"><a class="header-anchor" href="#legacy-沙箱" aria-hidden="true">#</a> legacy 沙箱</h4><p>legacySandbox 利用 Proxy 的响应式原理，设置了三个参数来记录全局变量,分别是记录沙箱新增的全局变量 addedPropsMapInSandbox、记录沙箱更新的全局变量 modifiedPropsOriginalValueMapInSandbox、持续记录更新的(新增和修改的)全局变量，用于在任意时刻做 snapshot 的 currentUpdatedPropsValueMap</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">LegacySandbox</span> <span class="token punctuation">{</span>
    <span class="token comment">// 持续记录新增和修改的全局变量</span>
    currentUpdatePropsValueMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 沙箱期间更新的全局变量</span>
    modifiedPropsOriginalValueMapInSandbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 沙箱期间新增的全局变量</span>
    addedPropsMapInSandbox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    propsWindow <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
​
    <span class="token comment">// 核心逻辑</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> fakeWindow <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token comment">// 设置值或者获取值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>propsWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>fakeWindow<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> originValue <span class="token operator">=</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>addedPropsMapInSandbox<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> originValue<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>currentUpdatePropsValueMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span>value<span class="token punctuation">)</span>
                window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token operator">=</span> value
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
​
    <span class="token punctuation">}</span>
    <span class="token function">setWindowProp</span><span class="token punctuation">(</span><span class="token parameter">prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> isToDelete</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> isToDelete<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">delete</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
​
    <span class="token punctuation">}</span>
​
    <span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 恢复上一次该微应用处于运行状态时，对window 上做的所有应用的修改</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentUpdatePropsValueMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setWindowProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 失活</span>
    <span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 还原window上的属性</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>modifiedPropsOriginalValueMapInSandbox<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setWindowProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">// 删除在微应用运行期间 window 新增的属性</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>addedPropsMapInSandbox<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setWindowProp</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span>city<span class="token operator">=</span><span class="token string">&quot;beijing&quot;</span>
<span class="token keyword">let</span> LegacySandbox01  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LegacySandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;11111&#39;</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
LegacySandbox01<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
LegacySandbox01<span class="token punctuation">.</span>propsWindow<span class="token punctuation">.</span>city <span class="token operator">=</span><span class="token string">&quot;shanghai&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2222&#39;</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
LegacySandbox01<span class="token punctuation">.</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3333&#39;</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="proxy-沙箱" tabindex="-1"><a class="header-anchor" href="#proxy-沙箱" aria-hidden="true">#</a> proxy 沙箱</h4><p>激活沙箱后，每次对 window 取值的时候，先从自己沙箱环境的 fakeWindow 里面找，如果不存在，就从 rawWindow(主 window)里去找；当对沙箱内部 window 对象赋值的时候，会直接操作 fakeWindow，而不会影响到 rawWindow（主 window）</p><p>这里还用到了一个关键字：with，使用这个关键字可以阻断沙箱内对 window 全局变量的访问和修改，使子应用优先执行代理沙箱的 window 对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ProxySandbox</span> <span class="token punctuation">{</span>
    proxyWindow
    isRunning <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isRunning <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isRunning <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> fakeWindow <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>proxyWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>fakeWindow<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isRunning<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> prop <span class="token keyword">in</span> target <span class="token operator">?</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">:</span> window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
​
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span>city<span class="token operator">=</span><span class="token string">&quot;beijing&quot;</span>
<span class="token keyword">let</span> proxySandbox01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxySandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> proxySandbox02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxySandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
proxySandbox01<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
proxySandbox02<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
proxySandbox01<span class="token punctuation">.</span>proxyWindow<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">&#39;shanghai&#39;</span>
proxySandbox02<span class="token punctuation">.</span>proxyWindow<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">&#39;chengdu&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;111111&quot;</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;222222&quot;</span><span class="token punctuation">,</span>proxySandbox01<span class="token punctuation">.</span>proxyWindow<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;333333&quot;</span><span class="token punctuation">,</span>proxySandbox01<span class="token punctuation">.</span>proxyWindow<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
proxySandbox01<span class="token punctuation">.</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
proxySandbox02<span class="token punctuation">.</span><span class="token function">inactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
​
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;111111&quot;</span><span class="token punctuation">,</span>window<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;222222&quot;</span><span class="token punctuation">,</span>proxySandbox01<span class="token punctuation">.</span>proxyWindow<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;333333&quot;</span><span class="token punctuation">,</span>proxySandbox01<span class="token punctuation">.</span>proxyWindow<span class="token punctuation">.</span>city<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用通信" tabindex="-1"><a class="header-anchor" href="#应用通信" aria-hidden="true">#</a> 应用通信</h2><p>最适用的还是消息订阅（pub/sub）模式的通信机制，基座应用定义事件中心 Event，每个微应用注册事件，当被触发事件时由事件中心统一分发，由此构成基本的通信机制</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/microapp-contact.awebp" alt="微前端应用通信" loading="lazy"></p><p>以 qiankun 为例，qiankun 官方提供了 actions 通信，内部使用 initGlobalState(state)定义全局状态，该方法执行后返回一个 MicroAppStateActions 实例，实例中包含三个方法，分别是 onGlobalStateChange、setGlobalState、offGlobalStateChange。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>MicroAppStateActions
<span class="token function-variable function">onGlobalStateChange</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">callback</span><span class="token operator">:</span> OnGlobalStateChangeCallback<span class="token punctuation">,</span> fireImmediately<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token comment">//在当前应用监听全局状态，有变更触发 callback，fireImmediately = true 立即触发 callback</span>
<span class="token function-variable function">setGlobalState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">state</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> boolean， <span class="token comment">//按一级属性设置全局状态，微应用中只能修改已存在的一级属性（就是用来修改全局状态的</span>
<span class="token function-variable function">offGlobalStateChange</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> boolean  <span class="token comment">//移除当前应用的状态监听，微应用 umount 时会默认调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-初始化全局状态" tabindex="-1"><a class="header-anchor" href="#_1-初始化全局状态" aria-hidden="true">#</a> 1.初始化全局状态</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/action.js</span>
<span class="token comment">// 此action文件为定义微应用之间全局状态</span>
<span class="token comment">// 引入qiankun的应用间通信方法initGlobalState</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> initGlobalState<span class="token punctuation">,</span> MicroAppStateActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;qiankun&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里可以写初始化数据</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token function">initGlobalState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化state</span>

<span class="token comment">// 监听actions全局公共状态数据的变化</span>
actions<span class="token punctuation">.</span><span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;主应用变更前：&quot;</span><span class="token punctuation">,</span> prevState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;主应用变更后：&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setProject&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将获取的最新的公共状态保存到vuex中，对于React等框架也一样，交给全局状态管理库执行</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> actions<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-状态透传" tabindex="-1"><a class="header-anchor" href="#_2-状态透传" aria-hidden="true">#</a> 2.状态透传</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token comment">// 注册的应用列表</span>
<span class="token keyword">const</span> apps <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// 子应用vue应用</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;vueApp&quot;</span><span class="token punctuation">,</span> <span class="token comment">//应用名字</span>
    <span class="token comment">// 默认请求的url，并解析里面的js，因为此时父应用请求了子应用里面的资源，所以子应用必须支持跨域</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8001&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//容器名，子应用挂载到哪个元素</span>
    <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">&quot;#container&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//路由匹配激活规则，当路由匹配到activeRule时，就会请求获取entry资源，然后渲染到container容器中</span>
    <span class="token literal-property property">activeRule</span><span class="token operator">:</span> <span class="token string">&quot;/vue&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 通过props实现通信传递值</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> actions<span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;w&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//向子应用传递创建的全局状态</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-主应用状态修改" tabindex="-1"><a class="header-anchor" href="#_3-主应用状态修改" aria-hidden="true">#</a> 3.主应用状态修改</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handle1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击向子应用发送消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handle2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击向子应用发送消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>当前显示的项目：{{ project }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&quot;@/components/HelloWorld.vue&quot;</span><span class="token punctuation">;</span> <span class="token comment">//引入的HelloWorld组件</span>
<span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">&quot;../action&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Home&quot;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">mes1</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">project_id</span><span class="token operator">:</span> <span class="token string">&quot;项目1&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">mes2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">project_id</span><span class="token operator">:</span> <span class="token string">&quot;项目2&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">project</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>project_id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 需要在mounted钩子函数中注册qiankun的观察者函数</span>
    <span class="token comment">// 注册一个观察者函数</span>
    <span class="token comment">// 一旦修改actions的内容就会触发这个onGlobalStateChange监听函数</span>
    actions<span class="token punctuation">.</span><span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// state为变更后的状态，prevState为变更前的状态</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;主应用观察者，改变前的state为：&quot;</span><span class="token punctuation">,</span> prevState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;主应用观察者，改变后的state为：&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">handle1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      actions<span class="token punctuation">.</span><span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mes1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//修改全局的actions</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;/vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//跳转到vue子应用中</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">handle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      actions<span class="token punctuation">.</span><span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mes2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//修改全局的actions</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;/vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//跳转到vue子应用中</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    HelloWorld<span class="token punctuation">,</span> <span class="token comment">//注册组件</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-子应用状态修改" tabindex="-1"><a class="header-anchor" href="#_4-子应用状态修改" aria-hidden="true">#</a> 4.子应用状态修改</h3><p>先在子应用中配置一个空的 actions 实例为以后重新赋值从主应用中传递过来的 actions</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// action.js</span>
<span class="token keyword">function</span> <span class="token function">emptyAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 警告：提示当前使用的是空 Action</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Current execute action is empty!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 我们首先设置一个用于通信的Actions类</span>

<span class="token keyword">class</span> <span class="token class-name">Actions</span> <span class="token punctuation">{</span>
  actions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">onGlobalStateChange</span><span class="token operator">:</span> emptyAction<span class="token punctuation">,</span>
    <span class="token literal-property property">setGlobalState</span><span class="token operator">:</span> emptyAction<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 默认值为空Action</span>

  <span class="token comment">// 设置actions</span>
  <span class="token function">setActions</span><span class="token punctuation">(</span><span class="token parameter">actions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>actions <span class="token operator">=</span> actions<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 映射</span>
  <span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">.</span><span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 映射</span>
  <span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actions<span class="token punctuation">.</span><span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Actions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> actions<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 mounted 的生命周期里注入 actions 实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    actions<span class="token punctuation">.</span><span class="token function">setActions</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> container <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token comment">// 渲染的时候赋值</span>
  instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    router<span class="token punctuation">,</span>
    store<span class="token punctuation">,</span>
    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>container <span class="token operator">?</span> container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里是挂载到自己的html中，基座会拿到这个挂载后的html，将其插入进去</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是子应用修改数据状态，主应用可以监听</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>home<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>快点我向父应用发送数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Vue logo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../assets/logo.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Welcome to Your Vue.js App<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// @ is an alias to /src</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&quot;@/components/HelloWorld.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">&quot;../actions&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Home&quot;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(&quot;cccc&quot;);</span>
    <span class="token comment">// console.log(actions);</span>
    actions<span class="token punctuation">.</span><span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是子应用，我检测到数据了：&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//onGlobalStateChange的第二个参数设置为true，则会立即触发一次观察者函数</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      actions<span class="token punctuation">.</span><span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">project_id</span><span class="token operator">:</span> <span class="token string">&quot;项目520&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    HelloWorld<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们以 qiankun 为例，分析了 single-SPA 作为微前端方案时的所需要解决的三大问题：路由切换分发与加载问题；主微应用环境隔离问题；主微应用通信问题</p><p>最后，再次结合一个微前端应用的生命周期，总结一次微前端项目的实现原理：</p><ol><li>基座应用启动 <ol><li>启动子应用管理器</li><li>提供全局的公共依赖</li><li>开启全局的 actions 事件模型，全局挂载 state</li></ol></li><li>子应用使用包装器后包装后启动，子应用向外暴露钩子函数与远程地址</li><li>主页面路由跳转，监听匹配到对应子应用地址，启动模块加载器，分 HTML、CSS、JS 加载子应用模块资源 <ol><li>加载 CSS，对子应用的 CSS 启用 CSS Module 或者使用 shadowDOM</li><li>加载 JS，使用 Proxy Sandbox 开启多实例沙箱</li><li>子应用隔离出来的公共依赖，在沙箱中寻找外部 window 作用域获取来自基座应用的公共依赖</li></ol></li><li>模块资源加载完成后，子应用挂载，接收基座应用的 actions，在自己内部实现全局事件模型的派发和监听</li></ol>`,40);function j(A,_){const c=o("RouterLink"),t=o("ExternalLinkIcon"),l=o("CodeDemo");return u(),r("div",null,[n("p",null,[s("在"),a(c,{to:"/micro/2-plan.html"},{default:e(()=>[s("微前端方案")]),_:1}),s("中，我们讨论了多种微前端方案，这里主要围绕 single-SPA 协议的微前端（qiankun）实现，分析一下底层原理")]),n("p",null,[s("参考链接 1："),n("a",d,[s("https://juejin.cn/post/6844904162509979662"),a(t)])]),n("p",null,[s("参考链接 2："),n("a",v,[s("https://blog.csdn.net/weixin_43522687/article/details/106750074"),a(t)])]),n("p",null,[s("参考链接 3："),n("a",m,[s("https://blog.csdn.net/wanghe1111_/article/details/123816165"),a(t)])]),b,n("p",null,[s("远程拉取可以参考两套 npm 库："),n("a",g,[s("import-html-entry"),a(t)]),s("和"),n("a",h,[s("SystemJS"),a(t)]),s("，它们底层是通过 fetch API 获取目标 url 的 HTML 内容，然后通过解析将微应用的 JavaScript 和 CSS 进行抽离，采用 eval 方法来运行 JavaScript，并将 CSS 和 HTML 内容 append 到基座应用中留给微应用的展示区域，当微应用切换走时，同步卸载这些内容，这就构成的当前应用的展示流程")]),y,n("p",null,[s("更具体的分析链接："),n("a",w,[s("https://zhuanlan.zhihu.com/p/378346507"),a(t)])]),f,a(l,{id:"code-demo-189",type:"normal",title:"shadowDOM%20%E6%BC%94%E7%A4%BA",code:"eJyFUt1KG0EUfpVxe6PgZtu7oklA1NJCSwsqtLAXbnaH7Mr+uTtJCCFgaRvTGo3WgDWmNDcWERrTUmp+m5fZ2ehVX6EnmY1JoNCrOb/f+c43J8OpxNC5BS48s/J8ef3Vi1U0CERFMzx4kS6Z8YjIYVPkIIZQWMWSMrTANjCRkKxKjosJFG2sP+IfihwSpvIqITaPtxNaEkpe8htL/LJl2BLRYjqGYtkyCTYH7U9WI1iJD2LTAKZkYEgnNZyyLYdM9aQ0hagRBSc1GfNDZx5ppkY0SeddWdJx5EHo/iQi0YiOoyuWnDAAISwwf7iZcLda2CXpIIqQjTLMQDBXt5wF5GBlkYWyrHFUPvRilpIeTZvhedQ/qNPKhZ8/ovWc1+31SxeuKilWCimW4X8+hxD9fUK/HdJWCXL0Y8FrtJntNfduT372y2/96jXtFL3Gvtcp0+JRv/SF5n70L18jnh9NsqMpNSzYk4PHmLl3tNacKFa0JNIUkM9NxJZsO/jaAOeubQpQgJ5ApmBB0IsdCjfPbblwQTomiAGiCCzHFA5tJ7CTXsM6lonlzIrcvdHMOdBQENBYDFr/3j9r0O6x1zrwGjte49I/rd3ulEEAyP7pFLxulRavvPa5v9ej+Tpt/vKP971uhdbeQBZcr1FiIvmV90wzppNowsW4wI7NigQ0QxIhkqyuDaOzGWRYCl5AImfZg3NH2blFJAg0f0bbrTFLmDSo8wu7/qcreviVMQKaN73dLTdgNpKQURdN1h7STBM7j9efPQUKm0Mx7ehN7xSAWP/EYVy36YcqtLO/G33Efw4z7mBs/vs0NyHMZf8CNq6rjQ=="},{default:e(()=>[q,S]),_:1}),x])}const W=i(k,[["render",j],["__file","3-single-spa.html.vue"]]);export{W as default};
