import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as e}from"./app.dae73d7e.js";const t={},p=e(`<h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># npm 6.x</span>
<span class="token function">npm</span> create vite@latest my-vue-app <span class="token parameter variable">--template</span> vue

<span class="token comment"># npm 7+, extra double-dash is needed:</span>
<span class="token function">npm</span> create vite@latest my-vue-app -- <span class="token parameter variable">--template</span> vue

<span class="token builtin class-name">cd</span> my-vue-app

<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vite-配置" tabindex="-1"><a class="header-anchor" href="#vite-配置" aria-hidden="true">#</a> vite 配置</h3><p>功能一致的配置大多跟 vue-cli 配置大同小异，不过多赘述</p><h4 id="resolve" tabindex="-1"><a class="header-anchor" href="#resolve" aria-hidden="true">#</a> resolve</h4><p>resolve.alias：当使用文件系统路径的别名时，请始终使用绝对路径。相对路径的别名值会原封不动地被使用，因此无法被正常解析。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* vite.config.ts */</span>
resolve<span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token comment">//文件系统路径的别名, 绝对路径</span>
   alias<span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sass-配置" tabindex="-1"><a class="header-anchor" href="#sass-配置" aria-hidden="true">#</a> sass 配置</h4><p>安装 sass 依赖和配置 vite.config.ts 预定义全局变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i sass <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* vite.config.ts */</span>
css<span class="token operator">:</span> <span class="token punctuation">{</span>
  preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
    scss<span class="token operator">:</span> <span class="token punctuation">{</span>
      additionalData<span class="token operator">:</span> <span class="token string">&#39;@import &quot;./src/assets/scss/var.scss&quot;;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="开启服务" tabindex="-1"><a class="header-anchor" href="#开启服务" aria-hidden="true">#</a> 开启服务</h4><p>开启 http 服务</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* vite.config.ts */</span>
server<span class="token operator">:</span><span class="token punctuation">{</span>
    host<span class="token operator">:</span> <span class="token string">&#39;dev.front.cn&#39;</span><span class="token punctuation">,</span>
    port<span class="token operator">:</span> <span class="token number">3000</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启 https 服务</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* vite.config.ts */</span>
<span class="token keyword">let</span> httpsConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  key<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;C:/Users/ca/wps.cn/_wildcard.wps.cn+3-key.pem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  cert<span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;C:/Users/ca/wps.cn/_wildcard.wps.cn+3.pem&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

server<span class="token operator">:</span><span class="token punctuation">{</span>
    https<span class="token operator">:</span> httpsConfig<span class="token punctuation">,</span>
    host<span class="token operator">:</span> <span class="token string">&#39;dev.front.cn&#39;</span><span class="token punctuation">,</span>
    port<span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>
    open<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预构建依赖优化" tabindex="-1"><a class="header-anchor" href="#预构建依赖优化" aria-hidden="true">#</a> 预构建依赖优化</h3><p>默认情况下，Vite 会抓取你的 index.html 来检测需要预构建的依赖项。如果指定了 build.rollupOptions.input，Vite 将转而去抓取这些入口点。</p><h4 id="optimizedeps-include" tabindex="-1"><a class="header-anchor" href="#optimizedeps-include" aria-hidden="true">#</a> optimizeDeps.include</h4><p>默认情况下，不在 node_modules 中的，链接的包不会被预构建。使用此选项可强制预构建链接的包。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* vite.config.ts */</span>
optimizeDeps<span class="token operator">:</span> <span class="token punctuation">{</span>
  include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;axios&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="optimizedeps-exclude" tabindex="-1"><a class="header-anchor" href="#optimizedeps-exclude" aria-hidden="true">#</a> optimizeDeps.exclude</h4><p>在预构建中强制排除的依赖项。</p><h3 id="eslint-配置" tabindex="-1"><a class="header-anchor" href="#eslint-配置" aria-hidden="true">#</a> eslint 配置</h3><ul><li>plugin:vue/vue3-recommended，plugin:vue/vue3-essential：识别 vue 的变量 如&#39;Page&#39;，选其一即可</li><li>@vue/typescript/recommended：识别 ts 关键字，如 interface 等，该模块在 @vue/eslint-config-typescript 中</li><li>prettier, @vue/prettier：格式化代码</li><li>eslint-plugin-vue：允许 eslint 对 vue 文件进行校验</li></ul><p>安装开发依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> eslint prettier @vue/eslint-config-typescript @vue/eslint-config-prettier eslint-plugin-vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>.eslintrc.cjs 如下</p><ul><li>文件格式要改为 cjs，因为里面使用了 module.exports 的 CJS 语法，否则 eslint 无法识别项目中的 rc 文件</li><li>若要文件格式保留 js，则需要将 package.json 中的<code>&quot;type&quot;: &quot;module&quot;</code>删除</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;plugin:vue/vue3-essential&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@vue/typescript/recommended&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;@vue/prettier&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@typescript-eslint&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">2017</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;prettier/prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;@typescript-eslint/no-unused-vars&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">globals</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">defineProps</span><span class="token operator">:</span> <span class="token string">&quot;readonly&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><ul><li>eslint:recommended 会误判一些 vue 的 ts 全局变量，如 withDefaults，defineEmits</li><li>eslint 的 rules 配置 no-unused-vars 会误判一些变量，如 e，visible，所以需要 ts 变量配置 @typescript-eslint/no-unused-vars</li></ul><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2><h3 id="类型-接口-泛型" tabindex="-1"><a class="header-anchor" href="#类型-接口-泛型" aria-hidden="true">#</a> 类型/接口/泛型</h3><ul><li>类型：类型（type）不是定义一个新类型，而是一个类型别名，使类型更具体化</li><li>接口：接口（interface）则是描述一个对象的形状，对值所具有的结构进行类型检查。接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</li><li>泛型：支持多种数据结构，有函数泛型，类泛型，接口泛型等。</li><li><strong>可以使用接口就尽量使用接口，因为接口更灵活，更容易处理</strong></li></ul><p>很多时候 interface 和 type 是相同的，但有一个明显区别在于 interface 可以重复定义，类型注解会累加，而 type 重复定义会报错</p><h3 id="类型声明" tabindex="-1"><a class="header-anchor" href="#类型声明" aria-hidden="true">#</a> 类型声明</h3><p>类型声明（Type Declaration） 或者类型定义（Type Definition） 文件是一个以.d.ts 作为文件后缀名的 TypeScript 文件。文件中只包含与类型相关的代码，不包含逻辑代码，它们的作用旨在为开发者提供类型信息，所以它们只在开发阶段起作用。</p><ul><li>typescript 编译后会将类型信息移除，类型信息仅在开发阶段起作用。</li></ul><p>此处以全局类型/变量声明为例创建示例文件</p><p>先在项目 src 目录中新建 global.d.ts 文件</p><h4 id="全局类型声明" tabindex="-1"><a class="header-anchor" href="#全局类型声明" aria-hidden="true">#</a> 全局类型声明</h4><p>项目的根目录有 tsconfig.json 可以配置 TypeScript，include 属性包含了需要校验 ts 的文件。ts 默认会将 xx.d.ts 类型文件中的类型注册成全局的，下面举个栗子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// global.d.ts</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// 组件内
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">let</span> <span class="token literal-property property">num1</span><span class="token operator">:</span> <span class="token constant">T1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局变量声明" tabindex="-1"><a class="header-anchor" href="#全局变量声明" aria-hidden="true">#</a> 全局变量声明</h4><ul><li>使用 window</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// global.d.ts</span>
<span class="token comment">// 若想不带window使用userId，但需重复声明</span>
<span class="token keyword">declare</span> <span class="token keyword">let</span> userId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>
  userId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：不声明且不带 window 使用开发模式不会报错，但打包时会报错</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 组件内</span>
window<span class="token punctuation">.</span>userId <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 global 配合 window 或 var，需加 export，否则会打包报错</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// global.d.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> global <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用foo全局变量时得带window，否则打包会报错</span>
    foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 组件内</span>
globalThis<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> window<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：加上 export 后其他声明会失效，其他声明可另起 *.d.ts 文件定义</p><ul><li>使用 var</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// global.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 组件内</span>
globalThis<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>每种方式各有利弊，自行选择</strong></p><h2 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖" aria-hidden="true">#</a> 语法糖</h2><p>一个组件选项，在组件被创建之前，props  被解析之后执行。它是组合式 API 的入口。 <code>&lt;script setup&gt;</code>  是在单文件组件 (SFC) 中使用组合式 API  的编译时语法糖。相比于普通的  <code>&lt;script&gt;</code>  语法，它具有更多优势：</p><ul><li>更少的样板内容，更简洁的代码。</li><li>能够使用纯 Typescript 声明 props 和抛出事件。</li><li>更好的运行时性能 (其模板会被编译成与其同一作用域的渲染函数，没有任何的中间代理)。</li><li>更好的 IDE 类型推断性能 (减少语言服务器从代码中抽离类型的工作)。</li></ul><p>使用这个语法，需要将  setup attribute 添加到  <code>&lt;script&gt;</code>  代码块上：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>里面的代码会被编译成组件 setup()  函数的内容，声明的变量、函数可以被 <code>&lt;template&gt;</code> 模板直接插值使用，无需 export 抛出。这意味着与普通的 <code>&lt;script&gt;</code>  只在组件被首次引入的时候执行一次不同，<code>&lt;script setup&gt;</code>  中的代码会在每次组件实例被创建的时候执行。</p><p>setup  函数在生命周期方面，它是在 beforeCreate  钩子之前调用的。</p><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><p>选项式 API 的生命周期选项和组合式 API 之间的映射</p><ul><li><del>beforeCreate</del> -&gt; 使用  setup()</li><li><del>created</del> -&gt; 使用  setup()</li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onUpdated</li><li>beforeUnmount -&gt; onBeforeUnmount</li><li>unmounted -&gt; onUnmounted</li><li>errorCaptured -&gt; onErrorCaptured</li><li>renderTracked -&gt; onRenderTracked</li><li>renderTriggered -&gt; onRenderTriggered</li><li>activated -&gt; onActivated</li><li>deactivated -&gt; onDeactivated</li></ul><p>因为 setup 是围绕 beforeCreate 和 created 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 setup 函数中编写。</p><h3 id="响应式-ref" tabindex="-1"><a class="header-anchor" href="#响应式-ref" aria-hidden="true">#</a> 响应式 ref</h3><p>接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象仅有一个  .value property，指向该内部值。和从  setup()  函数中返回值一样，ref 值在模板中使用的时候会自动解包。</p><p>可以在调用  ref  时传递一个泛型参数以覆盖默认推断</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定复杂类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo 的类型：Ref&lt;string | number&gt;</span>

foo<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// ok!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="props-emit" tabindex="-1"><a class="header-anchor" href="#props-emit" aria-hidden="true">#</a> props/emit</h3><ul><li>仅限类型的 props/emit 声明</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineEmits</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span>
  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">&quot;update&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>props 有两种方式设置默认值：</p><ul><li>使用运行时声明</li></ul><p>运行时声明 的方式只能设置参数类型、默认值、是否必传、自定义验证。报错为控制台 warn 警告。 若想设置 <code>[ 编辑器报错、编辑器语法提示 ]</code>则需要使用类型声明的方式。</p><ul><li>使用类型声明时的默认 props 值</li></ul><p>仅限类型的 defineProps 声明的不足之处在于，它不能给 props 定义默认值。需配合 withDefaults 编译器宏解决：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  msg<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&quot;提示&quot;</span><span class="token punctuation">,</span>
  msg<span class="token operator">:</span> <span class="token string">&quot;是否跳转到app?&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>defineProps、withDefaults 是只在 <code>&lt;script setup&gt;</code> 语法糖中才能使用的编译器宏。他不需要导入且会随着 <code>&lt;script setup&gt;</code> 处理过程一同被编译掉。</p><h3 id="v-model-双向绑定" tabindex="-1"><a class="header-anchor" href="#v-model-双向绑定" aria-hidden="true">#</a> v-model 双向绑定</h3><p>vue2 中的 v-model 的使用是通过传递 value 属性和接收 input 事件实现，vue3 则换成了 modelValue 属性，接收的方法是 update:modelValue。</p><p>以下弹窗例子以 Page.vue 为父组件，Dialog.vue 为子组件，关键代码如下：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>/* Page.vue */
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Dialog</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialogVisible<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Dialog</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bottom-btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onTap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
import { ref } from &quot;vue&quot;;
import Dialog from &quot;./Dialog.vue&quot;;

let dialogVisible = ref<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>boolean</span><span class="token punctuation">&gt;</span></span>(false);
function onTap() {
  dialogVisible.value = true;
}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>/* Dialog.vue */
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modelValue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog-content-btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onConfirm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
import { ref } from &quot;vue&quot;;

interface Props {
  modelValue?: boolean;
}
let props = withDefaults(defineProps<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">&gt;</span></span>(), {
  modelValue: false // v-model绑定的属性值
});

// 传递的方法
const emit = defineEmits<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>{</span>
  <span class="token attr-name"><span class="token namespace">(e:</span></span> <span class="token attr-name"><span class="token namespace">&quot;update:</span>modelValue&quot;,</span> <span class="token attr-name"><span class="token namespace">visible:</span></span> <span class="token attr-name"><span class="token namespace">boolean):</span></span> <span class="token attr-name">boolean;</span>
<span class="token attr-name">}</span><span class="token punctuation">&gt;</span></span>();

function onConfirm() {
    emit(&quot;update:modelValue&quot;, false);
}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可能遇到的报错-警告" tabindex="-1"><a class="header-anchor" href="#可能遇到的报错-警告" aria-hidden="true">#</a> 可能遇到的报错/警告</h2><h3 id="vite-打包-charset-警告" tabindex="-1"><a class="header-anchor" href="#vite-打包-charset-警告" aria-hidden="true">#</a> vite 打包 charset 警告</h3><p><code>&quot;@charset&quot; must be the first rule in the file }@charset &quot;UTF-8&quot;;</code></p><p>原因：使用了 scss 类库 sass，scss 编译的时候，因为被编译的文件里可能有中文导致</p><p>解决：在 vite.config.js 里面，加一个 sass 的配置，把 charset 关掉就行了</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  css<span class="token operator">:</span> <span class="token punctuation">{</span>
    preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
      scss<span class="token operator">:</span> <span class="token punctuation">{</span>
        charset<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="去除-typescript-全局变量的-eslint-报错" tabindex="-1"><a class="header-anchor" href="#去除-typescript-全局变量的-eslint-报错" aria-hidden="true">#</a> 去除 Typescript 全局变量的 eslint 报错</h3><ol><li>使用 var 定义全局变量</li></ol><p>var 相关声明下会带下划线，并报错</p><p><code>Unexpected var, use let or const instead.</code></p><p>解决：在 .eslintrc 配置文件中增加规则</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rules: {
    // 全局变量允许使用 var
    &#39;no-var&#39;: &#39;off&#39;,
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用 global 定义全局变量</li></ol><p>global 相关声明下会带下划线，并报错</p><p><code>Augmentations for the global scope can only be directly nested in external modules or ambient module declarations.</code></p><p>解决：在 global.d.ts 声明文件中添加一行代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// global.d.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注：新增后会导致该文件中的其他变量/类型等声明失效，其他声明可另起 *.d.ts 文件定义</p>`,104),i=[p];function l(o,c){return s(),a("div",null,i)}const d=n(t,[["render",l],["__file","6-vue3+ts+vite.html.vue"]]);export{d as default};
