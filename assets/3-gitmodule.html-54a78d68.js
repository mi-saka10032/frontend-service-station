import{_ as n,C as d,Y as t,Z as l,$ as e,a0 as i,a2 as a,a1 as c}from"./framework-bb209140.js";const o={},u=e("h2",{id:"介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),i(" 介绍")],-1),m=e("p",null,"关联的前后端链接：",-1),r={href:"https://github.com/mi-saka10032/music-system-admin",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/mi-saka10032/jay-music-manage-system",target:"_blank",rel:"noopener noreferrer"},b=c(`<p>共有的 Git Submodule 仓库链接（ssh）：<code>git@github.com:mi-saka10032/music-api.git</code></p><p>Git Submodule 是 Git 版本控制系统中的一个功能，它允许您将一个 Git 仓库作为另一个 Git 仓库的子模块进行管理。子模块是一个独立的 Git 仓库，可以被包含在其他 Git 仓库中，并且可以独立地进行版本控制和更新。</p><p><strong>为什么我使用 Git Submodule？</strong></p><p>根本原因：</p><ol><li>前后端的开发依赖差别巨大，两个仓库并不适合放在一起统一管理；</li><li>前后端开发语言都是 ts，又需要相同的变量类型声明；</li><li>两个仓库仅需要同步定义接口的入参出参类型即可。</li></ol><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>Git Submodule 的原理是通过在父仓库中添加一个指向子模块仓库的引用来实现的。父仓库中的引用指向子模块仓库的特定提交（commit），而不是直接包含子模块的文件内容。这样，父仓库只记录子模块的引用和路径信息，而不会将子模块的实际内容包含在其中。</p><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><p>Git Submodule 提供了一组命令行 API 来管理子模块。以下是一些常用的 Git Submodule 命令：</p><ul><li><code>git submodule add &lt;repository&gt; &lt;path&gt;</code>：将一个 Git 仓库添加为子模块，并指定子模块在父仓库中的路径。</li><li><code>git submodule init</code>：初始化父仓库中的子模块，将子模块的引用和路径信息记录在父仓库中。</li><li><code>git submodule update</code>：更新父仓库中的子模块，将子模块的内容拉取到指定的提交。</li><li><code>git submodule sync</code>：同步父仓库中的子模块的 URL 配置。</li><li><code>git submodule foreach &lt;command&gt;</code>：在每个子模块中执行指定的命令。</li></ul><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h2><p>下面的用法会结合之前提到的<a href="#%E4%BB%8B%E7%BB%8D">仓库链接</a>来说明</p><p>两个仓库的子仓库都位于<code>src/music-api</code>目录，以这个实际路径为例：</p><p>1.初始化子模块</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 位于项目根目录下</span>
<span class="token builtin class-name">cd</span> src

<span class="token function">git</span> submodule <span class="token function">add</span> git@github.com:mi-saka10032/music-api.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.提交子仓库的变更</p><p>子仓库的变更提交和普通仓库一样，<code>add -&gt; commit -&gt; push</code></p><p>3.父仓库的变更</p><p>需要注意，如果子仓库存在变更，那么需要子仓库先提交变更并 push，父仓库再执行子仓库的变更（记录子仓库的分支修改记录）</p><p>4.克隆仓库</p><p>克隆包含子仓库的父仓库时，除了<code>git clone</code>之外，还需要执行子模块的初始化与更新，才能正确拉取最新的子仓库内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/mi-saka10032/jay-music-manage-system

<span class="token comment"># 初始化父仓库中的子模块。</span>
<span class="token function">git</span> submodule init

<span class="token comment"># 更新父仓库中的子模块，将子模块的内容拉取到指定的提交</span>
<span class="token function">git</span> submodule update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变更或移除" tabindex="-1"><a class="header-anchor" href="#变更或移除" aria-hidden="true">#</a> 变更或移除</h2><p>如果并不需要上面的这个 submodule，或者希望将这个子仓库变更为自己的 submodule，可以按照以下步骤进行操作：</p><p>移除 Submodule：</p><ul><li>进入包含 Submodule 的仓库目录。</li><li>使用<code>git submodule deinit &lt;submodule-path&gt;</code>命令将 Submodule 标记为删除。</li><li>使用<code>git rm &lt;submodule-path&gt;</code>命令从父仓库中移除 Submodule。</li><li>提交并推送这些变更到您的 GitHub 仓库。</li></ul><p>还是以上面的实际路径为例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> src

<span class="token function">git</span> submodule deinit music-api

<span class="token function">git</span> <span class="token function">rm</span> music-api

<span class="token comment"># 提交变更</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更换和更新 Submodule 的步骤见<a href="#%E7%94%A8%E6%B3%95">用法</a>。</p>`,29);function h(g,v){const s=d("ExternalLinkIcon");return t(),l("div",null,[u,m,e("p",null,[e("a",r,[i("https://github.com/mi-saka10032/music-system-admin"),a(s)])]),e("p",null,[e("a",p,[i("https://github.com/mi-saka10032/jay-music-manage-system"),a(s)])]),b])}const k=n(o,[["render",h],["__file","3-gitmodule.html.vue"]]);export{k as default};
