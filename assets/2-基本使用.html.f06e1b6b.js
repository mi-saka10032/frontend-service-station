import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as n,d as a,a as t}from"./app.acfbf946.js";const l={},i=a(`<h2 id="基础-js-库" tabindex="-1"><a class="header-anchor" href="#基础-js-库" aria-hidden="true">#</a> 基础 js 库</h2><p>react.js：React 核心库</p><p>react-dom.js：提供操作 DOM 的 react 扩展库</p><p>babel.js：提供 JSX 语法代码转化 JS 代码的库</p><h2 id="虚拟-dom-和真实-dom" tabindex="-1"><a class="header-anchor" href="#虚拟-dom-和真实-dom" aria-hidden="true">#</a> 虚拟 DOM 和真实 DOM</h2><p>React 提供了一些 API 来创建一种特别的一般 js 对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;xx&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;xx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;文本text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>虚拟 DOM 对象最终都会被 React 转换为真实 DOM</li><li>我们只需要操作 React 的虚拟 DOM 相关数据，React 会转换为真实 DOM 变化更新界面</li></ul><h2 id="react-jsx" tabindex="-1"><a class="header-anchor" href="#react-jsx" aria-hidden="true">#</a> React JSX</h2><ul><li>全称：JavaScript XML</li></ul><p>React 定义的一种类似于 XML 的 JS 扩展语法：JS + XML 本质是<code>React.createElement(component, props, ..., children)</code>方法的语法糖</p><ul><li>作用：用来简化创建虚拟 DOM</li></ul><h3 id="写法" tabindex="-1"><a class="header-anchor" href="#写法" aria-hidden="true">#</a> 写法</h3><p><code>var ele = &lt;h1&gt;Hello JSX!&lt;/h1&gt;</code></p><p>注意：</p><ol><li><p>它不是字符串，也不是 HTML/XML 标签，它最终产生的就是一个 JS 对象</p></li><li><p>标签名任意：HTML 标签或其它标签</p></li><li><p>标签属性任意：HTML 标签属性或其它</p></li></ol><h3 id="语法规则" tabindex="-1"><a class="header-anchor" href="#语法规则" aria-hidden="true">#</a> 语法规则</h3><ol><li>遇到<code>&lt;</code>开头的代码，以标签的语法解析：HTML 同名标签转换为 HTML 同名元素，其它标签需要特别解析</li><li>遇到以 <code>{</code> 开头的代码，以 JS 语法解析，标签中的 JS 表达式必须用<code>{ }</code>括起来</li><li>定义虚拟 DOM 时，不要写引号</li><li>标签中混入 JS 表达式时要用<code>{ }</code></li><li>样式的类名指定不要用 class，要用 className</li><li>内联样式，要用<code>style={ { key: value } }</code>的形式去写</li><li>只有一个根标签</li><li>标签必须闭合</li><li>标签首字母 <ol><li>若小写字母开头，则将标签转为 html 同名元素，若 html 中无该标签对应的同名元素，则报错</li><li>若大写字母开头，React 就去渲染对应的组件，若组件没有定义，则报错</li></ol></li></ol><h3 id="区分代码与表达式" tabindex="-1"><a class="header-anchor" href="#区分代码与表达式" aria-hidden="true">#</a> 区分代码与表达式</h3><ol><li>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方</li></ol><p>下面这些都是表达式：</p><p>(1) a; (2) a+b; (3) demo(1); (4) arr.map(); (5) function test() {}</p><ol start="2"><li>语句(代码)：</li></ol><p>下面这些都是语句(代码)：</p>`,24),c=t("p",{"case:":"",xxx:""},"(1) if() {}; (2) for() {}; (3) switch()",-1),o=a(`<h3 id="babel-的作用" tabindex="-1"><a class="header-anchor" href="#babel-的作用" aria-hidden="true">#</a> babel 的作用</h3><p>React 的基础库中包含 babel.js，其作用是：</p><ol><li>浏览器不能直接解析 JSX 代码，需要 babel 转译为纯 JS 的代码才能运行</li><li>只要用了 JSX，<code>&lt;script&gt;&lt;/script&gt;</code>标签内都要加上<code>type=&quot;text/babel&quot;</code>，声明需要 babel 来处理</li></ol><h2 id="渲染函数" tabindex="-1"><a class="header-anchor" href="#渲染函数" aria-hidden="true">#</a> 渲染函数</h2><ul><li>语法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>virtualDOM<span class="token punctuation">,</span> containerDOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>作用：将虚拟 DOM 元素渲染到页面中的真实容器 DOM 中显示</li><li>参数说明： <ol><li>参数一：纯 JS 或 JSX 创建的虚拟 DOM 对象</li><li>参数二：用来包含虚拟 DOM 元素的真实 DOM 元素对象（一般是一个 div）</li></ol></li></ul>`,7),p=[i,c,o];function r(d,u){return s(),n("div",null,p)}const m=e(l,[["render",r],["__file","2-基本使用.html.vue"]]);export{m as default};
