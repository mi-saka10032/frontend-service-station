import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,b as n,e as s,d as t,a as c,r as i}from"./app.30876910.js";const l={},u={href:"https://juejin.cn/post/6844904162509979662",target:"_blank",rel:"noopener noreferrer"},r={href:"https://blog.csdn.net/weixin_43522687/article/details/106750074",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="实现方案" tabindex="-1"><a class="header-anchor" href="#实现方案" aria-hidden="true">#</a> 实现方案</h2><p>单纯根据对概念的理解，很容易想到实现微前端的重要思想就是将应用进行拆解和整合，通常是一个父应用加上一些子应用，那么使用类似 Nginx 配置不同应用的转发，或是采用 iframe 来将多个应用整合到一起等等这些其实都属于微前端的实现方案，也是微前端概念出现前 web 应用之间的整合方案。除此之外，也有真正全新的实现方案：</p><p><strong>Nginx 路由转发</strong>：通过 Nginx 配置反向代理来实现不同路径映射到不同应用，例如：<code>www.xxx.com/app1</code>映射 app1，<code>www.xxx.com/app2</code>映射到 app2，这种<strong>整合方案</strong>并不属于前端层面的改造，更多的是运维的配置</p><p><strong>iframe 嵌套</strong>：父应用单独是一个页面，每个子应用嵌套一个 iframe，父子通信可采用 postMessage 或者 contentWindow 等方式</p><p><strong>Web Components</strong>：全新的开发模式，每个子应用需要采用纯 Web Components 技术编写组件。每个子应用都拥有单独的 js 和 css，支持单独部署</p><p><strong>组合式应用路由分发</strong>：每个子应用独立构建和部署，运行时由父应用来进行路由管理，应用加载、启动、卸载以及通信等</p><table><thead><tr><th style="text-align:left;">方案</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th></tr></thead><tbody><tr><td style="text-align:left;">Nginx 转发</td><td style="text-align:left;">简单，快速，易配置</td><td style="text-align:left;">在切换应用时会触发浏览器刷新，影响体验</td></tr><tr><td style="text-align:left;">iframe 嵌套</td><td style="text-align:left;">实现简单，子应用之间自带沙箱，天然隔离，互不影响</td><td style="text-align:left;">iframe 的样式显示、兼容性都很局限；太过简单而显得 low</td></tr><tr><td style="text-align:left;">Web Components</td><td style="text-align:left;">每个子应用拥有独立的 script 和 css，也可单独部署</td><td style="text-align:left;">对于历史系统，改造成本高，子应用通信较为复杂，易踩坑</td></tr><tr><td style="text-align:left;">组合式应用路由分发</td><td style="text-align:left;">纯前端改造，体验良好，可无感知切换，子应用相互隔离</td><td style="text-align:left;">需要设计和开发，由于父子应用处于同一页面运行，需要解决子应用的样式冲突、变量污染、通信机制等技术点</td></tr></tbody></table><p>上述方案中，每种都有自己的优劣，最原始的 Nginx 配置反向代理是从接入层的角度来将系统进行分离，但是需要运维配置，而 iframe 嵌套是最简单和最快速的方案，但是 iframe 的弊端也是无法避免的，而 Web Components 的方案则需要大量的改造成本，最后的组合式应用路由分发方案改造成本中等并且能满足大部分需求，也不影响各前端应用的体验，<strong>是当下各个业务普遍采用的一种方案</strong></p><p>下面，围绕组合式应用路由分发方案，分析一下这个方案的五脏六腑</p><h2 id="模块组成" tabindex="-1"><a class="header-anchor" href="#模块组成" aria-hidden="true">#</a> 模块组成</h2><p>组合式应用路由分发方案的核心是“主从思想”，即一个基座（MaiApp）和若干个微应用（MicroApp）</p><p>基座应用大多数是一个前端 SPA 项目，主要负责应用注册、路由映射、消息下发等</p><p>微应用是独立前端项目，这些项目不限于采用 React、Vue、Angular 甚至 JQuery 开发。每个微应用注册到基座应用中，由基座进行管理，但是如果脱离基座也可以单独访问</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/microapp-module.png" alt="微前端模块图" loading="lazy"></p><p>当整个微前端框架运行之后，给用户的体验就是类似下图所示：</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/microapp-runtime.png" alt="微前端运行效果" loading="lazy"></p><p>简而言之，就是基座应用中有一些菜单项，每个菜单项可以展示对应的微应用，这些应用的切换对用户而言是无感知的，就用户体验来说是很好的。而为了实现多应用正常运行，基座应用有以下问题亟待解决：</p><ol><li>路由切换如何准确分发</li><li>主微应用的全局环境如何隔离</li><li>通信问题</li></ol><h2 id="路由分发" tabindex="-1"><a class="header-anchor" href="#路由分发" aria-hidden="true">#</a> 路由分发</h2><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/microapp-route.png" alt="微前端运行效果" loading="lazy"></p><p>从上图可知，子应用在加载前会创建基于自身的生命周期实例和路由，然后注册到主工程中，当页面 URL 跳转时，通过路由管理器和应用管理器匹配子应用，在加载子应用的过程中，有三个生命周期，bootstrap 是初始化，这个时候页面显示 loading，也就是正在加载中，然后走到 mount，开始加载页面，不需要显示当前子应用时，通过 unmount 卸载子应用</p><p>实现基座应用获取子应用的核心是 systemJS 和 Single-SPA</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/MicroApp/microapp-remoteTool.png" alt="微前端远程技术" loading="lazy"></p><ul><li>systemJS：提供通用的模块导入途经，支持传统模块和 ES6 的模块，相当于加载器，主要用于调度子应用，决定何时展示哪个子应用</li><li>Single-SPA：把现有的应用进行包装，使加载器可以使用它们</li></ul><h3 id="远程拉取" tabindex="-1"><a class="header-anchor" href="#远程拉取" aria-hidden="true">#</a> 远程拉取</h3><p>SystemJS 的本质就是 jsonp 跨域脚本获取资源</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 外层包裹promise</span>
<span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>charset <span class="token operator">=</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>crossorigin <span class="token operator">=</span> <span class="token string">&quot;anonymous&quot;</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> windowErrorListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">reject</span><span class="token punctuation">(</span>
    <span class="token function">Error</span><span class="token punctuation">(</span>
      <span class="token string">&quot;Error loading&quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token punctuation">(</span>firstParentUrl <span class="token operator">?</span> <span class="token string">&quot;from &quot;</span> <span class="token operator">+</span> firstParentUrl <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> windowErrorListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>loader<span class="token punctuation">.</span><span class="token function">getRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 挂载script加载远程资源</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由注册" tabindex="-1"><a class="header-anchor" href="#路由注册" aria-hidden="true">#</a> 路由注册</h3><p>Single-SPA 主要做两件事：注册路由以及应用；注册的应用按照 ES Module 模块载入规范导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> loadPromises <span class="token operator">=</span> <span class="token function">getAppsToLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toLoadPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>loadPromises<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    wasNoOp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>loadPromises<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>finishUpAndReturn<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">callAllEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function k(m,v){const a=i("ExternalLinkIcon");return e(),o("div",null,[n("p",null,[s("参考链接 1："),n("a",u,[s("https://juejin.cn/post/6844904162509979662"),t(a)])]),n("p",null,[s("参考链接 2："),n("a",r,[s("https://blog.csdn.net/weixin_43522687/article/details/106750074"),t(a)])]),d])}const f=p(l,[["render",k],["__file","2-plan.html.vue"]]);export{f as default};
