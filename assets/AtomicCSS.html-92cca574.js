import{_ as e,C as l,Y as c,Z as o,$ as n,a0 as s,a2 as t,a1 as p}from"./framework-bb209140.js";const i={},u=n("p",null,"本篇文稿主要节选自：",-1),r={href:"https://antfu.me/posts/reimagine-atomic-css-zh",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/6917073600474415117",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zhuanlan.zhihu.com/p/628433321",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/6951300894684577823",target:"_blank",rel:"noopener noreferrer"},m=p(`<p><strong>注意：原子化 CSS 方案是面向项目开发的架构方案，非 CSS 基础知识</strong></p><h2 id="什么是原子化-css" tabindex="-1"><a class="header-anchor" href="#什么是原子化-css" aria-hidden="true">#</a> 什么是原子化 CSS</h2><p>原子化 CSS（Atomic CSS）是一种 CSS 架构方式，它倾向于小巧且用途单一的 class，并且会以视觉效果进行命名。</p><p>有些人可能会称其为函数式 CSS，或者 CSS 实用工具。本质上，你可以将原子化的 CSS 框架理解为这类 CSS 的统称：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.m-0</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.text-red</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* ... */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发展历程" tabindex="-1"><a class="header-anchor" href="#发展历程" aria-hidden="true">#</a> 发展历程</h2><p>纵观 CSS 方案发展，大致分为三个阶段：</p><ol><li>原始方案</li><li>传统预编译方案</li><li>原子化方案</li></ol><h3 id="原始方案" tabindex="-1"><a class="header-anchor" href="#原始方案" aria-hidden="true">#</a> 原始方案</h3><p>原始阶段也就是 web 最早期的模样，HTML、CSS、JS 一把梭的刀耕火种阶段。现代项目开发已不再使用这种方案</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">.d1</span> <span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>d1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传统方案" tabindex="-1"><a class="header-anchor" href="#传统方案" aria-hidden="true">#</a> 传统方案</h3><p>传统的预编译方案，也就是使用预处理器来生成开发所需代码，这种方案至今在大多数项目中仍广泛使用</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>

  <span class="token selector">.child</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是一个典型的 「Semantic CSS」 命名方式：为不同的 html 标签定义语义化的 class 名字，然后每个 class 中包含应用到对应 html 标签上的所有 css 样式。</p><p>但是，随着项目的开发过程， 这种 css 规范会让 css 的维护成本越来越高：</p><ol><li>命名困难。越来越多的相似语义化场景，会导致越来越多类似 aa-title、bb-title、bb-b1-title、aa-content、bb-content 这样的 class 命名。开发人员一边需要保证 aa、bb、bb-b1 这样的名称能准确表达语义，一边需要小心翼翼地避免 css 全局作用域带来的冲突问题（例如，不同的 UI 区域都定义了 aa-title 导致的样式冲突；aa-content、 bb-content 无意识地嵌套使用，导致内层 class 继承了外层 class 预期之外的样式）。这给开发人员带来了很大的心智负担。</li><li>难以复用。css 样式很难通过语义化命名的 class 进行复用，因为一个 class 中包含了多条 css 样式，而多条 css 样式即使在同一语义环境下，也会因受到更大的上下文的影响，导致部分样式的差异化而无法直接复用 class。例如，企图通过 title、header-title 这类 class 命名来实现 「标题」语义下的 css 复用肯定是行不通的。继续沿着这条路走下去，势必又会导致更多的类似名称的 class 的出现：nav-title、nav-min-title、sider-title ... 而这些 class 很可能只是其中一条 css 规则不同，例如 font-size。</li><li>重构成本高。不一定是整体样式的大重构，即使是将所有字号增加 2px 这类需求，在「Semantic CSS」规范下，都需要修改大量文件才能实现。</li><li>css 文件大小膨胀。每个 class 都包含大量重复的 css 样式，无法解决复用性，这些问题都会导致随着项目需求的增加， css 文件变得越来越大，而且很可能 css 文件膨胀的速度是大于代码仓库整体体积的增长速度的。</li></ol><h3 id="原子化方案" tabindex="-1"><a class="header-anchor" href="#原子化方案" aria-hidden="true">#</a> 原子化方案</h3><p>使用实用工具/原子 CSS，我们可以把结构层和表示层结合起来:当我们需要改变按钮颜色时，我们直接修改 HTML，而不是 CSS。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-shrink-0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>h-12 w-12<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/logo.svg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ChitChat Logo<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-xl font-medium text-black<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>ChitChat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-gray-500<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>You have a new message!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个实现版本，对比上面的方案，有以下区别：</p><ol><li>我们没有自定义任何的 css class，使用的所有的 css class 都直接来源于 Tailwind CSS，这样就没有了命名的困扰问题，同时也解决了 css 膨胀的问题。当然 html 体积也变大了，但是因为 class 中使用的是有限集合内的、高度重复的 class 名称，在 Gzip、Brotli 这些压缩算法的作用下，是可以基本忽略的。</li><li>每一个 class 一般只对应一条 css 规则，如 p-6 对应 padding: 1.5rem，h-12 对应 height: 3rem，原子性的 class 颗粒度自然更容易在其他地方复用，而且原子化的 css 规范/思想，强制开发人员在为 html 标签定义样式时，写全所有需要的 class ，大大减少了不同 html 标签的 class 之间的相互影响。</li><li>Atomic CSS 的使用，让样式重构/整体修改变得更加容易。我们可以通过覆盖原子颗粒度的 class ，变更应用的整体样式，例如，覆盖 text-xl 为 2rem，这样所以使用到 text-xl class 的字体大小都会变成 2rem。</li></ol><p>此外，我们现在通过 html 标签来添加样式，发现了一些有趣的事儿：</p><ul><li>我们增加新功能的时候，样式表的增长减缓了。</li><li>我们可以到处移动 html 标签，并且能确保样式也同样生效。</li><li>我们可以删除新特性，并且确保样式也同时被删掉了。</li></ul><p>可以肯定的缺点是，html 有点臃肿。对于服务器渲染的 web 应用程序来说可能是个缺点，但是类名中的高冗余使得 css 得以集成，碎片化文件数量有效减少， gzip 可以压缩得很好。同时它可以很好地处理之前重复的 css 规则。</p><p>一旦你的实用工具/原子 CSS 准备好了，它将不会有太大的变化或增长。可以更有效地缓存它(你可以将它附加到 vendor.css 中，重新部署的时候它也不会失效)。它还具有相当好的可移植性，可以在任意其他应用程序中使用。</p><h2 id="方案实现" tabindex="-1"><a class="header-anchor" href="#方案实现" aria-hidden="true">#</a> 方案实现</h2><p>TailwindCSS 堪称目前以 Atomic CSS 为基础的相对最完整的设计系统方案。</p><h3 id="安装与配置" tabindex="-1"><a class="header-anchor" href="#安装与配置" aria-hidden="true">#</a> 安装与配置</h3><p>注意，tailwind 属于 postcss 插件，postcss 也是必要依赖项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">install</span> postcss <span class="token parameter variable">-D</span>
<span class="token function">pnpm</span> <span class="token function">install</span> tailwindcss <span class="token parameter variable">-D</span>
// 压缩css代码用插件
<span class="token function">pnpm</span> <span class="token function">install</span> cssnano <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 postcss 配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// postcss.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;postcss-import&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;tailwindcss/nesting&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token literal-property property">cssnano</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 tailwind 配置文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tailwind.config.js</span>
<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;tailwindcss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">darkMode</span><span class="token operator">:</span> <span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">corePlugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">preflight</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./index.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./src/**/*.{vue,js,ts,jsx,tsx}&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 用于定制化主题与扩展class</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入入口样式</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// main.ts</span>
<span class="token comment">// 一定要在main.ts中导入tailwind.css，防止vite每次hmr都会请求src/style/index.scss整体css文件导致热更新慢的问题</span>
<span class="token keyword">import</span> <span class="token string">&quot;./style/tailwind.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要在入口样式文件加上这三行代码：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>// src/style/tailwind.css
<span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，你就可以使用 tailwind 来开发项目了</p><h3 id="反对的声音" tabindex="-1"><a class="header-anchor" href="#反对的声音" aria-hidden="true">#</a> 反对的声音</h3><p>社区的反对声音也不少，这里节选两个比较有代表性的：</p><p><strong>一堆 class，可读性、可维护性差</strong></p><p>个人认为，这种把 css 放在 html 里的方式应该更高效才对，这种方式不仅能提高可读性，而且节省了发明自定义类名的时间。</p>`,44),g={href:"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss",target:"_blank",rel:"noopener noreferrer"},b=p(`<p><strong>类型太长了而且重复多次</strong></p><p>tailwind 现在的版本 v3 早已提供了对自定义类名规则的预设，使用<code>@layer components</code>配合<code>@apply</code>实现，以我自己一个项目的 tailwind.css 文件为例</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>// src/style/tailwind.css
<span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>

<span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>
  <span class="token selector">.flex-c</span> <span class="token punctuation">{</span>
    <span class="token atrule"><span class="token rule">@apply</span> flex justify-center items-center<span class="token punctuation">;</span></span>
  <span class="token punctuation">}</span>

  <span class="token selector">.flex-ac</span> <span class="token punctuation">{</span>
    <span class="token atrule"><span class="token rule">@apply</span> flex justify-around items-center<span class="token punctuation">;</span></span>
  <span class="token punctuation">}</span>

  <span class="token selector">.flex-bc</span> <span class="token punctuation">{</span>
    <span class="token atrule"><span class="token rule">@apply</span> flex justify-between items-center<span class="token punctuation">;</span></span>
  <span class="token punctuation">}</span>

  <span class="token selector">.navbar-bg-hover</span> <span class="token punctuation">{</span>
    <span class="token atrule"><span class="token rule">@apply</span> <span class="token property">dark</span><span class="token punctuation">:</span>text-white <span class="token property">dark</span><span class="token punctuation">:</span><span class="token property">hover</span><span class="token punctuation">:</span>!bg-[#242424]<span class="token punctuation">;</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-c<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>navbar-bg-hover<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上的自定义规则，可以轻松复用复数量级的样式属性</p><h3 id="本质" tabindex="-1"><a class="header-anchor" href="#本质" aria-hidden="true">#</a> 本质</h3><p>tailwind 本质上就是个 postcss 插件。</p><p>postcss 是一个 css 编译器，它是 parse、transform、generate 的流程。</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/CSS/css-ast.png" alt="CSS-AST" tabindex="0" loading="lazy"><figcaption>CSS-AST</figcaption></figure><p>而 postcss 就是通过 AST 来拿到 @tailwind、@layer、@apply 这些它扩展的指令，分别作相应的处理，也就是对 AST 的增删改查。</p><p>所以说，tailwind 就是基于 postcss 的 AST 实现的 css 代码生成工具，并且做了通过 extractor 正则匹配 提取 js、html 中 class 的功能。</p><h2 id="jit" tabindex="-1"><a class="header-anchor" href="#jit" aria-hidden="true">#</a> JIT</h2><p>在 tailwindCSS 的早期版本，tailwind 提供的 CSS 文件是包含所有完整预设命名规则的，没有做任何切割，因此早期的 tailwind 打包产物基本都是几 M 起步，对于中小型项目而言，反而增加了打包成本。</p><p>tailwind 在 v2.1 版本中引入了 Just-In-Time Mode，支持在构建过程中按需生成样式，而不是预先生成整个样式库。该模式在 v3.0 中成为默认模式。JIT 模式的引入极大地改善了开发体验和构建性能。</p><p>JIT 工作原理大致如下：</p><ol><li>按需生成：JIT 模式会监视你的项目文件（HTML、JSX、模板等），并且只为你实际使用的类生成对应的样式。这意味着最终的 CSS 文件只包含必要的样式，从而大幅减小了文件大小。</li><li>快速构建：由于只生成必要的样式，构建过程变得更快。这对于开发过程中的热重载（hot-reloading）特别有益，因为它可以实现几乎实时的样式更新。</li><li>动态样式：JIT 模式支持动态样式的生成，例如根据变量或状态生成的类名。这使得开发者可以在类名中使用任意值，例如 bg-[#1a1a1a] 或 text-[var(--main-color)]，而不需要在配置文件中预先定义。</li><li>扩展性：JIT 模式使得扩展 Tailwind CSS 变得更加灵活，因为它可以在运行时生成新的实用工具类，而不需要重新编译整个样式库。</li><li>更好的错误反馈：在 JIT 模式下，如果你使用了不存在的 Tailwind 类，你会在构建时得到更直接的反馈，而不是在浏览器中查看没有效果的样式。</li></ol><p>因此，在 tailwindCSS v3 版本之后，我们无需再担忧最终打包 CSS 文件过大的问题了</p><h2 id="后起之秀" tabindex="-1"><a class="header-anchor" href="#后起之秀" aria-hidden="true">#</a> 后起之秀</h2><h3 id="windicss" tabindex="-1"><a class="header-anchor" href="#windicss" aria-hidden="true">#</a> WindiCSS</h3><p>WindiCSS 是另一款 tailwindCSS 的替代方案，它的零依赖，也不要求用户安装 PostCSS 和 Autoprefixer。更为重要的是，它同样支持 JIT 按需生成，并且算法更加高效，生成速度更快。</p><p>相对的，更快速度的代价则是 WindiCSS 的默认预设更加精简，也就是说我们或许需要针对自定义规则做出更多配置。</p><p>遗憾的是，截至 2023 年，WindiCSS 已经不再更新迭代，取而代之的替代方案则是 UnoCSS</p><h3 id="unocss" tabindex="-1"><a class="header-anchor" href="#unocss" aria-hidden="true">#</a> UnoCSS</h3><p>在 WindiCSS 的基础上，他们的团队开发尝试了 UnoCSS，一款完全 AtomicCSS 的 CSS 引擎</p><p>简单来说，UnoCSS 是一个引擎，而非一款框架，因为它并未提供核心工具类，所有功能可以通过预设和内联配置提供，除了 plugin 插件能提供的默认配置以外，其他的无论是静态规则还是动态规则均可自行实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> UnocssPlugin <span class="token keyword">from</span> <span class="token string">&quot;@unocss/vite&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 以下预设目前还不存在，</span>
<span class="token comment">// 欢迎大家踊跃贡献！</span>
<span class="token keyword">import</span> PresetTachyons <span class="token keyword">from</span> <span class="token string">&quot;@unocss/preset-tachyons&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PresetBootstrap <span class="token keyword">from</span> <span class="token string">&quot;@unocss/preset-bootstrap&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PresetTailwind <span class="token keyword">from</span> <span class="token string">&quot;@unocss/preset-tailwind&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PresetWindi <span class="token keyword">from</span> <span class="token string">&quot;@unocss/preset-windi&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PresetAntfu <span class="token keyword">from</span> <span class="token string">&quot;@antfu/oh-my-cool-unocss-preset&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">UnocssPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// PresetTachyons,</span>
        PresetBootstrap<span class="token punctuation">,</span>
        <span class="token comment">// PresetTailwind,</span>
        <span class="token comment">// PresetWindi,</span>
        <span class="token comment">// PresetAntfu</span>
        <span class="token comment">// 选择其中一个...或多个！</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;m-1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">&quot;0.25rem&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检测结果：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.m-1</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0.25rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^m-(\\d+)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span><span class="token punctuation">,</span> d<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>d <span class="token operator">/</span> <span class="token number">4</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">rem</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^p-(\\d+)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">rem</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检测结果：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>m-100<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>m-3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>icon</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p-5<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    My Button
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.m-100</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 25rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.m-3</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0.75rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.p-5</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得益于零框架和高度灵活性的优势，UnoCSS 的 HMR 速度和打包体积优势会更大，并且从内部实现上来看，Tailwind 依赖于 PostCSS 的 AST 进行修改，而 Windi 则是编写了一个自定义解析器和 AST。考虑到在开发过程中，这些工具 CSS 的并不经常变化，UnoCSS 通过非常高效的字符串拼接来直接生成对应的 CSS 而非引入整个编译过程。同时，UnoCSS 对类名和生成的 CSS 字符串进行了缓存，当再次遇到相同的实用工具类时，它可以绕过整个匹配和生成的过程。</p><h3 id="简单总结" tabindex="-1"><a class="header-anchor" href="#简单总结" aria-hidden="true">#</a> 简单总结</h3><p>就个人使用体验而言：</p><ul><li>如果你的项目是公司或部门研发的多人协作项目，要求遵守统一的 CSS 规则，并且需要一定的定制化自由度，那么我非常推荐使用 TailwindCSS，因为它提供了一整套完整的 CSS 设计系统，预设规则也非常完整，遵循开箱即用原则，仅需一定的文档阅读成本即可投入使用。</li><li>如果你正在开发属于个人的项目、项目体量并不大，同时追求极致的速度与高自由度，那么 UnoCSS 是不错的选择，你可以任意配置预设规则，同时享受更快的开发体验。相对的，因为它基本与Vite高度绑定，并且出现时间较晚，在投入中大型项目使用时需要慎重考虑。</li></ul>`,37);function h(S,y){const a=l("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[n("a",r,[s("重新构想原子化 CSS"),t(a)])]),n("p",null,[n("a",d,[s("Facebook 重构：抛弃 Sass / Less ，迎接原子化 CSS 时代"),t(a)])]),n("p",null,[n("a",k,[s("快速掌握 Tailwind"),t(a)])]),n("p",null,[n("a",v,[s("使用 Tailwind CSS 一年后，我的一些感受"),t(a)])]),m,n("p",null,[s("这里顺便推荐下 VsCode 支持的插件 "),n("a",g,[s("Tailwind CSS IntelliSense"),t(a)]),s("，支持智能提示 tailwind 的样式命名，节省了翻阅文档的时间")]),b])}const q=e(i,[["render",h],["__file","AtomicCSS.html.vue"]]);export{q as default};
