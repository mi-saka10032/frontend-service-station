import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as o,a,d as n,b as i,e as s,r as c}from"./app.e882843a.js";const l={},r=s(`<h2 id="js-历史介绍" tabindex="-1"><a class="header-anchor" href="#js-历史介绍" aria-hidden="true">#</a> JS 历史介绍</h2><p>JS 诞生于 1995 年，出现主要是用于处理网页中的前端验证（检查用户输入内容是否符合一定规则）。</p><p>市面上存在两个版本的 JS，分别是 JavaScript 和 JScript，为了确保标准一致，制定了共同的标准名为 ECMAScript。</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Javascript/time时间表" alt="历史时间表" loading="lazy"></p><p>不同浏览器的不同实现方式</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Javascript/time时间表" alt="不同浏览器实现" loading="lazy"></p><p>ECMAScript 是 JavaScript 标准，所以一般情况下这两个词认为是一个意思，但实际上 JavaScript 的含义要更大一些。</p><p>一个完整的 JavaScript 实现应该由以下三个部分构成：</p><ul><li><p>ECMAScript：JavaScript 标准</p></li><li><p>BOM：Browser Object Model 浏览器对象模型</p></li><li><p>DOM：Document Object Model 文档对象模型</p></li></ul><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><h3 id="写入方式" tabindex="-1"><a class="header-anchor" href="#写入方式" aria-hidden="true">#</a> 写入方式</h3><p>行内、内联、外联</p><p>同样的，JS 虽然可以写在标签属性中，但是结构与行为耦合，不方便维护，不推荐使用。</p><p>推荐方式：将 JS 代码编写到外部 JS 文件中，然后通过 script 标签引入。写到外部文件中可以在不同的页面中同时使用，也可以利用浏览器缓存机制。</p><p><strong>script 标签一旦用于引入外部文件，就不能在该标签内编写代码了，即使编写了浏览器也会忽略。</strong></p><h3 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序" aria-hidden="true">#</a> 执行顺序</h3><p>从上到下逐行执行</p><h3 id="基础输出语句" tabindex="-1"><a class="header-anchor" href="#基础输出语句" aria-hidden="true">#</a> 基础输出语句</h3><p>alert(); 控制浏览器弹出一个警示框</p><p>document.write(); 让计算机在页面 body 中输出一个内容</p><p>console.log(); 向控制台输出一个内容</p><h2 id="书写规范" tabindex="-1"><a class="header-anchor" href="#书写规范" aria-hidden="true">#</a> 书写规范</h2><ul><li><p>严格区分大小写</p></li><li><p>每一条语句以 ; 结尾（非强制）</p></li><li><p>忽略多个空格和换行</p></li></ul><h3 id="字面量与变量" tabindex="-1"><a class="header-anchor" href="#字面量与变量" aria-hidden="true">#</a> 字面量与变量</h3><p>字面量：就是数据，是源程序的组成部分之一。</p><p>变量：本质上是内存中的一块空间，这块空间有数据类型、名字、字面值。变量是内存中存储数据的最基本单元。</p><p>变量声明关键字：<code>var</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明一个字面为数字1的变量，变量名为a</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h3><p>js 语法中的标识符包括变量名、函数名、属性名。</p><ul><li><p>由字母、数字、_、$组成</p></li><li><p>不能以数字开头</p></li><li><p>不能是 ES 中的关键字或保留字</p></li></ul><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Javascript/关键字和保留字" alt="关键字和保留字" loading="lazy"></p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Javascript/其他不建议字符" alt="其他不建议字符" loading="lazy"></p><ul><li>驼峰命名法</li></ul><p>骆驼式命名法（Camel-Case）又称驼峰命名法，是电脑程式编写时的一套命名规则（惯例）。正如它的名称 CamelCase 所表示的那样，是指混合使用大小写字母来构成变量和函数的名字。程序员们为了自己的代码能更容易的在同行之间交流，所以多采取统一的可读性比较好的命名方式。</p><p>骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。</p><p><code>小驼峰命名法：camelCase</code></p><p><code>下划线命名法：snake_case</code></p><p>js 底层保存标识符实际采用 Unicode 编码，所以所有 UTF-8 内容理论上均可作为标识符。</p><h2 id="数据类型-重要" tabindex="-1"><a class="header-anchor" href="#数据类型-重要" aria-hidden="true">#</a> 数据类型（重要）</h2><p>js 现阶段的数据类型有六种</p><ul><li><p>Number 数值型</p></li><li><p>Boolean 布尔型</p></li><li><p>String 字符串，注意在书写时需要用引号括起来，字符串内部的引号注意加转移字符 \\</p></li><li><p>Null 空类型</p></li><li><p>Undefined 未定义类型</p></li><li><p>Object 对象</p></li></ul><p>除了 Object 是引用数据类型，其他都是基本数据类型。</p><h3 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h3><ul><li><p><code>\\&quot;</code> 表示 <code>&quot;</code></p></li><li><p><code>\\&#39;</code> 表示 <code>&#39;</code></p></li><li><p><code>\\n</code> 表示换行</p></li><li><p><code>\\t</code> 表示制表符</p></li></ul><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h3><p>js 中所有的数值都是 Number 类型，包括整数、浮点。</p><p>注意：</p><ol><li><p>当变量超过了 Number.MAX_VALUE 时，返回 Infinity</p></li><li><p>Number 变量被赋予了非数字值，返回 NaN(Not A Number)。使用 type of 检查 NaN，返回 Number</p></li></ol><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> Null</h3><p>Null 类型只有一个值，就是 Null，专门用来表示一个空对象。typeof 检查返回 Object</p><h3 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> Undefined</h3><p>声明变量不赋值，就为 undefined</p><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p>这是 String</p><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><p>这是 Object</p><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h3><h4 id="_1-转换-string" tabindex="-1"><a class="header-anchor" href="#_1-转换-string" aria-hidden="true">#</a> 1. 转换 String</h4><p>方法一：.toString() 不会影响原变量 null 和 undefined 没有 toString 方法，空指针异常</p><p>方法二：String()函数，跟方法一不同之处在于，null 和 undefined 会直接转换为 null 和 undefined</p><h4 id="_2-转换-number" tabindex="-1"><a class="header-anchor" href="#_2-转换-number" aria-hidden="true">#</a> 2.转换 Number</h4><p>方法一：Number()函数</p><ul><li><p>纯数字字符串，转换为数字。</p></li><li><p>字符串有非数字内容，转换 NaN。</p></li><li><p>空串或者是一个全空格的字符串，转换为 0。</p></li><li><p>布尔值转换为 0 和 1。</p></li><li><p>null 转为 0。</p></li><li><p>undefined 转换为 NaN。</p></li></ul><p>方法二：</p><p>parseInt() 字符串转为整数</p><p>parseFloat() 字符串转为浮点数</p><p>转换有效位置从字符串首字符为数字开始，非数字字符结束。如果首字符不是数字，返回 NaN</p><h4 id="_3-转换-boolean" tabindex="-1"><a class="header-anchor" href="#_3-转换-boolean" aria-hidden="true">#</a> 3.转换 Boolean</h4><p>方法一：Boolean 函数</p><p>数字 → 布尔，除了 0 和 NaN，其他都是 true</p><p>字符串 → 布尔，除了空串，其他都是 true</p><p>null 和 undefined 都是 false</p><p>方法二：任意数据类型两次取反，转换布尔值。</p><h3 id="其他进制数字" tabindex="-1"><a class="header-anchor" href="#其他进制数字" aria-hidden="true">#</a> 其他进制数字</h3><p>十六进制 0x 开头</p><p>八进制 0 开头</p><p>二进制 0b 开头</p><p><strong>注意</strong>：parseInt()里面可以传递第二个参数，指定数字进制</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>运算符也叫操作符，计算一个或多个值，返回运算结果</p><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h3><h4 id="_1-加号" tabindex="-1"><a class="header-anchor" href="#_1-加号" aria-hidden="true">#</a> 1.加号 +</h4><p>字符串两两相加，效果为字符串拼接</p><p>任何值与字符串相加，均转换为字符串再拼接</p><p><strong>转换字符串快捷方法：任意类型+ &quot;&quot;</strong></p><h4 id="_2-减乘除模" tabindex="-1"><a class="header-anchor" href="#_2-减乘除模" aria-hidden="true">#</a> 2.减乘除模 - * / %</h4><p>任何值做减乘除模运算时都会转为 Number。</p><p><strong>转换 Number 快捷方法：任意类型 -0 *1 /1 &quot;&quot;</strong></p><h3 id="一元运算符" tabindex="-1"><a class="header-anchor" href="#一元运算符" aria-hidden="true">#</a> 一元运算符</h3><p>正号 + 负号 -</p><p>转换方法与 Number 函数一致。</p><h3 id="自增和自减" tabindex="-1"><a class="header-anchor" href="#自增和自减" aria-hidden="true">#</a> 自增和自减</h3><p>++i 先自增，后赋值参与运算</p><p>i++先赋值参与运算，后自增</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// a的值是6</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//7 b的值是7</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">++</span>j <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p>&amp;&amp; 短路与 || 短路或 ! 非</p><p>非布尔值两次取反，返回 true</p><p>短路与：1.第一个值为 true，返回第二个值；2.第一个值为 false，返回第一个值。（注意返回原值）</p><p>短路或：1.第一个值为 true，返回第一个值；2.第一个值为 false，返回第二个值。（注意返回原值）</p><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><p>+= -= *= /=</p><p>变量对等号右边的字面量做相应的四则运算，得到的结果重新赋值给当前变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
b <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
c <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
d <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h3><p>大于 &gt;</p><p>小于 &lt;</p><p>等于 ==（仅为值比较）</p><p>不等于 !=（仅为值比较）</p><p>全等 ===（全等，包含类型比较）</p><p>不全等 !==（不全等，包含类型比较）</p><p>1.比较字符串时，比较的是字符串的字符编码，且一位一位进行比较。</p><p>因此比较两个字符串型数字一定要转型，否则可能得到不可预期结果。</p><p>2.其他类型跟 Number 比较，转换为数字后再比较。</p><p>3.Null、Undefined 跟数字比较均为 false，没有可比性。</p><p>4.NaN 不等于任何值</p><h3 id="unicode-编码" tabindex="-1"><a class="header-anchor" href="#unicode-编码" aria-hidden="true">#</a> Unicode 编码</h3><p>\\u + 4 位 Unicode 编码</p><p>网页 html 中的 Unicode 编码使用： &amp;# + 编码。注意此处编码为十进制</p><h3 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a> 三元运算符</h3><p>条件表达式 ? 语句 1 : 语句 2;</p><p>判断表达式的值，如果是 true 则取值 1，如果是 false 则取值第二个 0；</p><h3 id="空值合并操作符" tabindex="-1"><a class="header-anchor" href="#空值合并操作符" aria-hidden="true">#</a> 空值合并操作符</h3><p>比较 ?? 左右两侧的值，如果左侧为 null 或 undefined，返回右侧值，否则返回左侧值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;hi&#39;</span>
<span class="token keyword">undefined</span> <span class="token operator">??</span> <span class="token string">&quot;hey&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;hey&#39;</span>
<span class="token boolean">false</span> <span class="token operator">??</span> <span class="token string">&quot;hola&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token number">0</span> <span class="token operator">??</span> <span class="token string">&quot;bonjour&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token string">&quot;first&quot;</span> <span class="token operator">??</span> <span class="token string">&quot;second&quot;</span><span class="token punctuation">;</span> <span class="token comment">// first</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逗号操作符" tabindex="-1"><a class="header-anchor" href="#逗号操作符" aria-hidden="true">#</a> 逗号操作符</h3><p>( _ , _ , _ , _)对每个操作数求值（从左到右），并返回最后一个操作数的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span>

相当于：
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">2</span>
<span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//连续执行和赋值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换" aria-hidden="true">#</a> 隐式类型转换</h3>`,131),d={href:"https://www.cnblogs.com/WayToGo-hwd/p/13994961.html",target:"_blank",rel:"noopener noreferrer"},u=s(`<h2 id="流程控制语句" tabindex="-1"><a class="header-anchor" href="#流程控制语句" aria-hidden="true">#</a> 流程控制语句</h2><h3 id="条件判断语句-if" tabindex="-1"><a class="header-anchor" href="#条件判断语句-if" aria-hidden="true">#</a> 条件判断语句 if</h3><p>单 if：满 30 减 20 用程序表示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果语句块之间只有一行代码，大括号可以省略</p><p>if-else：满 100 减 20 否则打九折</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件分支语句-switch" tabindex="-1"><a class="header-anchor" href="#条件分支语句-switch" aria-hidden="true">#</a> 条件分支语句 switch</h3>`,8);function h(k,m){const e=c("ExternalLinkIcon");return t(),o("div",null,[r,a("p",null,[n("上述运算在两变量类型不相同时均遵循"),a("a",d,[n("隐式类型转换"),i(e)])]),u])}const f=p(l,[["render",h],["__file","Javascript基础.html.vue"]]);export{f as default};
