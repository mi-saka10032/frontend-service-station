import{_ as p,C as e,Y as o,Z as c,$ as n,a0 as s,a2 as l,a1 as a}from"./framework-bb209140.js";const i={},u=a(`<h2 id="typeorm-简介" tabindex="-1"><a class="header-anchor" href="#typeorm-简介" aria-hidden="true">#</a> TypeORM 简介</h2><p>TypeORM 是一个开源的 ORM（Object-Relational Mapping）框架，它是用 TypeScript 编写的，支持多种数据库（如 MySQL，PostgreSQL，SQLite，Microsoft SQL Server 等），并且可以在 Node.js，浏览器和 React Native 中使用。</p><p>TypeORM 提供了一种将关系型数据库中的数据映射到对象（类）中的方式，从而让开发人员能够以面向对象的方式进行数据库操作。它支持实体（Entity），关联关系（Relationship），查询构建器（Query Builder）和迁移（Migration）等功能。</p><p>实体（Entity）是 TypeORM 中的核心概念，它是一个 JavaScript 类，表示数据库中的表。实体类中的属性对应表中的列，而实体类的实例对应表中的行。TypeORM 提供了一些装饰器（Decorator）来标记实体类的属性，例如@Column，@PrimaryColumn，@ManyToOne 等。</p><p>关联关系（Relationship）是实体之间的关系，例如一对多，多对多等。TypeORM 支持多种关联关系，并提供了一些装饰器来标记关联关系，例如@OneToMany，@ManyToMany 等。</p><p>查询构建器（Query Builder）是 TypeORM 提供的一种查询数据库的方式，它以面向对象的方式构建查询语句，使得查询语句更加清晰易懂。Query Builder 支持链式调用，可以在查询中使用各种条件，例如 where，orderBy，groupBy 等。</p><p>迁移（Migration）是 TypeORM 提供的一种数据库迁移工具，它可以帮助开发人员在不影响数据的情况下修改数据库结构。迁移可以创建，修改和删除表，列和索引等。TypeORM 会自动跟踪数据库结构的变化，并生成相应的 SQL 语句。</p><p>总之，TypeORM 是一个功能强大，易于使用的 ORM 框架，它可以帮助开发人员更快地开发应用程序，并提高代码的可维护性。</p><p>注意：<strong>下面的 TypeORM 使用模板与解析均基于 mysql 和 MidwayJS 进行。</strong></p><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><p>以 MidwayJS 的项目目录为例（项目模板创建步骤：<a href="../midway/2-midway-init#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%9B%E5%BB%BA">初始化 Midway</a>），构成 typeORM 文件目录结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MyProject
├── src                                             // TS 根目录
│   ├── config
│   │   └── config.default.ts           // 应用配置文件
│   ├── entity                                      // 实体（数据库 Model) 目录
│   │   ├── album.ts                       // 实体文件
│   │   ├── singer.ts                      // 实体文件
│   │   └── song.ts                        // 实体文件
│   ├── configuration.ts                    // Midway 配置文件
│   └── service                                     // 其他的服务目录
├── .gitignore
├── package.json
├── README.md
└── tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库配置步骤：<a href="../midway/2-midway-init#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5">mysql 和 typeORM 配置</a>。</p><h2 id="实体" tabindex="-1"><a class="header-anchor" href="#实体" aria-hidden="true">#</a> 实体</h2><p>我们通过模型和数据库关联，在应用中的模型就是数据库表，在 TypeORM 中，模型是和实体绑定的，每一个实体文件，既是 Model，也是实体(Entity)。</p><p>以一个专辑 Album 实体举例。新建 entity 目录，在其中添加实体文件 album.ts。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// entity/album.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> Column <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseEntity <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../common/BaseEntity&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiProperty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/swagger&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 专辑表实体类</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token string">&quot;album&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Album</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;专辑名称&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> unique<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  albumName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;发行日期&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> nullable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  publishTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;封面图片链接&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> nullable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  coverUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑到有很多实体列是可复用属性，创建 BaseEntity 向 entity 目录下的各个 entity 提供可继承父类</p><p><strong>注意</strong></p><ol><li>TypeORM 为了兼容多个数据库系统，对主键的处理为：按照主键指定格式向数据库填充格式化数据，对外查询结果转化为字符串类型；</li><li>在 node 环境下，为了确保 response 能返回期望类型格式的主键数据，需要使用 transformer 来实现 to（insert）和 from（select）方法；</li><li>如果对主键类型限制不严，可以不执行 transformer；</li><li>这里的主键是外部提供的算法生成，如果需要自增主键列，可以将 <code>@PrimaryColumn</code> 装饰器更改为 <code>@PrimaryGeneratedColumn</code> 装饰器。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// common/BaseEntity.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  Column<span class="token punctuation">,</span>
  CreateDateColumn<span class="token punctuation">,</span>
  PrimaryColumn<span class="token punctuation">,</span>
  UpdateDateColumn<span class="token punctuation">,</span>
  ValueTransformer<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiProperty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/swagger&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 用于处理和转换typeORM在返回主键数据时自动将bigint类型转换为string类型，导致前端总是获取string类型而非number类型数据的问题</span>
<span class="token keyword">class</span> <span class="token class-name">BigIntTransformer</span> <span class="token keyword">implements</span> <span class="token class-name">ValueTransformer</span> <span class="token punctuation">{</span>
  <span class="token function">to</span><span class="token punctuation">(</span>value<span class="token operator">:</span> bigint <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">from</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 所有使用Base封装MVC的Entity实体类都需要继承BaseEntity</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;bigint&quot;</span><span class="token punctuation">,</span> transformer<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">BigIntTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;更新人ID&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;bigint&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  updaterId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;创建人ID&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;bigint&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  createrId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;创建时间&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">CreateDateColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  createTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;更新时间&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">UpdateDateColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  updateTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="新增数据" tabindex="-1"><a class="header-anchor" href="#新增数据" aria-hidden="true">#</a> 新增数据</h2><ol><li>创建 Entity 对象</li><li>执行<code>save()</code></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Repository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectEntityModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../entity/album&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SnowflakeIdGenerate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils/Snowflake&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumService</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  idGenerate<span class="token operator">:</span> SnowflakeIdGenerate<span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectEntityModel</span></span><span class="token punctuation">(</span>Album<span class="token punctuation">)</span>
  albumModel<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>Album<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token comment">// save</span>
  <span class="token keyword">async</span> <span class="token function">createAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// create a entity object</span>
    <span class="token keyword">let</span> album <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Album</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 雪花算法生成id 这里假定为id = 1</span>
    album<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idGenerate<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从已登录的context上下文中获取userId</span>
    album<span class="token punctuation">.</span>createrId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>userContext<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>
    album<span class="token punctuation">.</span>updaterId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>userContext<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>
    album<span class="token punctuation">.</span>albumName <span class="token operator">=</span> <span class="token string">&quot;qi li xiang&quot;</span><span class="token punctuation">;</span>
    album<span class="token punctuation">.</span>publishTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    album<span class="token punctuation">.</span>coverUrl <span class="token operator">=</span> <span class="token string">&quot;https://www.misaka10032.com/coverUrl&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// save entity</span>
    <span class="token keyword">const</span> albumResult<span class="token operator">:</span> Album <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// save success</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;album id = &quot;</span><span class="token punctuation">,</span> albumResult<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询数据" tabindex="-1"><a class="header-anchor" href="#查询数据" aria-hidden="true">#</a> 查询数据</h2>`,25),r={href:"https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/find-options.md",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectEntityModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../entity/album&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Repository<span class="token punctuation">,</span> MoreThanOrEqual<span class="token punctuation">,</span> ILike <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumService</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectEntityModel</span></span><span class="token punctuation">(</span>Album<span class="token punctuation">)</span>
  albumModel<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>Album<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token comment">// find</span>
  <span class="token keyword">async</span> <span class="token function">findAlbums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// find All</span>
    <span class="token keyword">let</span> allAlbums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;All albums from the db: &quot;</span><span class="token punctuation">,</span> allAlbums<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// find first</span>
    <span class="token keyword">let</span> firstAlbum <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;First album from the db: &quot;</span><span class="token punctuation">,</span> firstAlbum<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// find one by name</span>
    <span class="token keyword">let</span> albumByName <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span> albumName<span class="token operator">:</span> <span class="token string">&quot;qi li xiang&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;qi li xiang album from the db: &quot;</span><span class="token punctuation">,</span> albumByName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// find by publishTime</span>
    <span class="token keyword">let</span> publishAlbums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 查询发布时间大于2023-1-1的专辑</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span> publishTime<span class="token operator">:</span> <span class="token function">MoreThanOrEqual</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>&#39;<span class="token number">2023</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;MoreThan 2023-1-1 Albums: &quot;</span><span class="token punctuation">,</span> publishAlbums<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// find by coverUrl</span>
    <span class="token keyword">let</span> coverUrlAlbums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 左右全模糊查询封面链接包含&#39;misaka10032&#39;的专辑</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span> coverUrl<span class="token operator">:</span> <span class="token function">ILike</span><span class="token punctuation">(</span><span class="token string">&#39;%misaka10032%&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;fuzzyUrl albums: &quot;</span><span class="token punctuation">,</span> coverUrlAlbums<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// find all and get count</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>allAlbums<span class="token punctuation">,</span> albumsCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">findAndCount</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;All albums: &quot;</span><span class="token punctuation">,</span> allAlbums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Albums count: &quot;</span><span class="token punctuation">,</span> albumsCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于 where 实例对象，这里封装了两个用于修饰 where 内部字符串模糊查询和日期范围条件查询的方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ILike<span class="token punctuation">,</span> Between<span class="token punctuation">,</span> MoreThanOrEqual<span class="token punctuation">,</span> LessThanOrEqual <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FindOptionsWhere <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm/find-options/FindOptionsWhere&quot;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @description 字符串全模糊匹配查询 为typeORM的快捷API(find系列)补全where对象
 * @param where typeORM的条件对象
 */</span>
<span class="token keyword">function</span> <span class="token function">fuzzyWhere</span><span class="token punctuation">(</span>where<span class="token operator">:</span> FindOptionsWhere<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> whereKey <span class="token keyword">in</span> where<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> option <span class="token operator">=</span> where<span class="token punctuation">[</span>whereKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> option <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      where<span class="token punctuation">[</span><span class="token function">String</span><span class="token punctuation">(</span>whereKey<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ILike</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>option<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * @description 日期范围条件匹配查询 为typeORM的快捷API(find系列)补全where对象
 * @param where
 * @param whereKey Entity E的键值名
 * @param startDate 起始日期
 * @param endDate 结束日期
 */</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">dateRangeWhere</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  where<span class="token operator">:</span> FindOptionsWhere<span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  whereKey<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">E</span><span class="token punctuation">,</span>
  startDate<span class="token operator">:</span> Date <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  endDate<span class="token operator">:</span> Date <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> left<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> startDate <span class="token operator">?</span> <span class="token number">0b0010</span> <span class="token operator">:</span> <span class="token number">0b0000</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> right<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> endDate <span class="token operator">?</span> <span class="token number">0b0001</span> <span class="token operator">:</span> <span class="token number">0b0000</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> range<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> left <span class="token operator">|</span> right<span class="token punctuation">;</span>
  <span class="token comment">// range的结果有4种(3|2|1|0)，分别代表不同的SQL语句</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>range<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      where<span class="token punctuation">[</span><span class="token function">String</span><span class="token punctuation">(</span>whereKey<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Between</span><span class="token punctuation">(</span>startDate<span class="token punctuation">,</span> endDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      where<span class="token punctuation">[</span><span class="token function">String</span><span class="token punctuation">(</span>whereKey<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">MoreThanOrEqual</span><span class="token punctuation">(</span>startDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      where<span class="token punctuation">[</span><span class="token function">String</span><span class="token punctuation">(</span>whereKey<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">LessThanOrEqual</span><span class="token punctuation">(</span>endDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      where<span class="token punctuation">[</span><span class="token function">String</span><span class="token punctuation">(</span>whereKey<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更新数据" tabindex="-1"><a class="header-anchor" href="#更新数据" aria-hidden="true">#</a> 更新数据</h2><p>更新数据与新增数据共用同一个<code>save()</code>方法，TypeORM 会在执行时自动判断该 id 是否存在于表中，如果不存在则新增，如果存在则更新。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectEntityModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../entity/album&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Repository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumService</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectEntityModel</span></span><span class="token punctuation">(</span>Album<span class="token punctuation">)</span>
  albumModel<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>Album<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token keyword">async</span> <span class="token function">updateAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> albumToUpdate <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    albumToUpdate<span class="token punctuation">.</span>albumName <span class="token operator">=</span> <span class="token string">&quot;new qi li xiang&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>albumToUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h2><p>remove 用于删除给定的实体或实体数组。delete 用于按给定的 ID 或者条件删除。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectEntityModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../entity/album&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Repository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumService</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectEntityModel</span></span><span class="token punctuation">(</span>Album<span class="token punctuation">)</span>
  albumModel<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>Album<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token keyword">async</span> <span class="token function">deleteAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
    <span class="token keyword">const</span> album <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 删除单个</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 删除多个</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">[</span>album1<span class="token punctuation">,</span> album2<span class="token punctuation">,</span> album3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 按 id 删除</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> albumName<span class="token operator">:</span> <span class="token string">&quot;qi li xiang&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>软删除手段需要在 Entity 中使用<code>@DeleteDateColumn</code>修饰列，会在调用 soft-delete（软删除）时自动设置实体的删除时间。</p><p>Entity 声明软删除列之后，可以使用软删除专属方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">softDelete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 restore 方法恢复;</span>
<span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一对一关联" tabindex="-1"><a class="header-anchor" href="#一对一关联" aria-hidden="true">#</a> 一对一关联</h2><p>在 entity/albumMetadata.ts 中创建一个新类。这个类包含 album 的其他元信息。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  Entity<span class="token punctuation">,</span>
  Column<span class="token punctuation">,</span>
  PrimaryGeneratedColumn<span class="token punctuation">,</span>
  OneToOne<span class="token punctuation">,</span>
  JoinColumn<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Album&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumMetadata</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryGeneratedColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  orientation<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  compressed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  comment<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">OneToOne</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Album<span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JoinColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  album<span class="token operator">:</span> Album<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用一个名为 <code>@OneToOne</code> 的新装饰器。它允许我们在两个实体之间创建一对一的关系。<code>type =&gt; Album</code>是一个函数，它返回我们要与其建立关系的实体的类。</p><p>由于语言的特殊性，我们被迫使用一个返回类的函数，而不是直接使用该类。我们也可以将其写为 <code>() =&gt; Album</code> ，但是我们使用 <code>type =&gt; Album</code> 作为惯例来提高代码的可读性。类型变量本身不包含任何内容。</p><p>我们还添加了一个 <code>@JoinColumn</code> 装饰器，它指示关系的这一侧将拥有该关系。关系可以是单向或双向的。关系只有一方可以拥有。关系的所有者端需要使用 <code>@JoinColumn</code> 装饰器。 如果您运行该应用程序，则会看到一个新生成的表，该表将包含一列，其中包含用于 Album 关系的外键。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide<span class="token punctuation">,</span> Inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectEntityModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./entity/album.entity&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AlbumMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./entity/albumMetadata&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Repository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SnowflakeIdGenerate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../utils/Snowflake&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumService</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Inject</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  idGenerate<span class="token operator">:</span> SnowflakeIdGenerate<span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectEntityModel</span></span><span class="token punctuation">(</span>Album<span class="token punctuation">)</span>
  albumModel<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>Album<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectEntityModel</span></span><span class="token punctuation">(</span>AlbumMetadata<span class="token punctuation">)</span>
  albumMetadataModel<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>AlbumMetadata<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token keyword">async</span> <span class="token function">updateAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// create a album</span>
    <span class="token keyword">let</span> album <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Album</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 雪花算法生成id 这里假定为id = 1</span>
    album<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idGenerate<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从已登录的context上下文中获取userId</span>
    album<span class="token punctuation">.</span>createrId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>userContext<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>
    album<span class="token punctuation">.</span>updaterId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>userContext<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>
    album<span class="token punctuation">.</span>albumName <span class="token operator">=</span> <span class="token string">&quot;qi li xiang&quot;</span><span class="token punctuation">;</span>
    album<span class="token punctuation">.</span>publishTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    album<span class="token punctuation">.</span>coverUrl <span class="token operator">=</span> <span class="token string">&quot;https://www.misaka10032.com/coverUrl&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// create a album metadata</span>
    <span class="token keyword">let</span> metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlbumMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    metadata<span class="token punctuation">.</span>compressed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    metadata<span class="token punctuation">.</span>comment <span class="token operator">=</span> <span class="token string">&quot;cybershoot&quot;</span><span class="token punctuation">;</span>
    metadata<span class="token punctuation">.</span>orientation <span class="token operator">=</span> <span class="token string">&quot;portrait&quot;</span><span class="token punctuation">;</span>
    metadata<span class="token punctuation">.</span>album <span class="token operator">=</span> album<span class="token punctuation">;</span> <span class="token comment">// this way we connect them</span>

    <span class="token comment">// first we should save a album</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>album<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// album is saved. Now we need to save a album metadata</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumMetadataModel<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// done</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="双向关系映射" tabindex="-1"><a class="header-anchor" href="#双向关系映射" aria-hidden="true">#</a> 双向关系映射</h3><p>对于两表间的关系，建议应该总是将它们设置为双向映射关系。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Column<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> OneToOne<span class="token punctuation">,</span> JoinColumn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./album&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumMetadata</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... other columns */</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">OneToOne</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Album<span class="token punctuation">,</span> <span class="token punctuation">(</span>album<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> album<span class="token punctuation">.</span>metadata<span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JoinColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 声明Album作为一对一关系的主表</span>
  album<span class="token operator">:</span> Album<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> OneToOne <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AlbumMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./albumMetadata&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Album</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... other columns */</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">OneToOne</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AlbumMetadata<span class="token punctuation">,</span> <span class="token punctuation">(</span>albumMetadata<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> albumMetadata<span class="token punctuation">.</span>album<span class="token punctuation">)</span>
  metadata<span class="token operator">:</span> AlbumMetadata<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，只会在关系映射的一侧使用 <code>@JoinColumn</code> 装饰器。无论您放置此装饰器的哪一侧，都是关系的所有者。关系的拥有方在数据库中包含带有外键的列。</p><h3 id="加载对象及依赖关系" tabindex="-1"><a class="header-anchor" href="#加载对象及依赖关系" aria-hidden="true">#</a> 加载对象及依赖关系</h3><p>使用关键字 <code>relations</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provide<span class="token punctuation">,</span> Inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectEntityModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./entity/album&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Repository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Provide</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumService</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectEntityModel</span></span><span class="token punctuation">(</span>Album<span class="token punctuation">)</span>
  albumModel<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>Album<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token comment">// find</span>
  <span class="token keyword">async</span> <span class="token function">findAlbum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*...*/</span>
    <span class="token keyword">let</span> albums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> relations<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;metadata&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// typeorm@0.2.x</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>albums.metdata</code> 如果一对一关系存在，则会表现为一个包含完整 albumMetadata 属性的对象。</p><h3 id="其他关联属性" tabindex="-1"><a class="header-anchor" href="#其他关联属性" aria-hidden="true">#</a> 其他关联属性</h3><p>关联关系还有其他可配置属性，比如删除 albumMetadata 并不希望对应的 album 实体一并被删除，则需要在 <code>@OneToOne</code>的第二个参数位设置关联属性<code>onDelete: &#39;SET NULL&#39;</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Column<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> OneToOne<span class="token punctuation">,</span> JoinColumn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./album&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumMetadata</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... other columns */</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">OneToOne</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Album<span class="token punctuation">,</span> <span class="token punctuation">(</span>album<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> album<span class="token punctuation">.</span>metadata<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    onDelete<span class="token operator">:</span> <span class="token string">&quot;SET NULL&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JoinColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  album<span class="token operator">:</span> Album<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一对多-多对多关联" tabindex="-1"><a class="header-anchor" href="#一对多-多对多关联" aria-hidden="true">#</a> 一对多/多对多关联</h2><p>创建 Song 类，Album 与 Song 为一对多关系。同时创建 Singer 类，Singer 与 Song 为多对多关系。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> ManyToMany<span class="token punctuation">,</span> JoinTable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseEntity <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../common/BaseEntity&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiProperty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/swagger&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Song <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./song&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 歌手表实体类</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token string">&quot;singer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Singer</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;歌手名&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> unique<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  singerName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;封面图片链接&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> nullable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  coverUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token comment">// 歌手与歌曲多对多关系，且歌手为关系拥有者</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ManyToMany</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Song<span class="token punctuation">,</span> <span class="token punctuation">(</span>song<span class="token operator">:</span> Song<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> song<span class="token punctuation">.</span>singers<span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">JoinTable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  songs<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Song<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> ManyToOne<span class="token punctuation">,</span> ManyToMany <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;typeorm&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseEntity <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../common/BaseEntity&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ApiProperty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@midwayjs/swagger&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Album <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./album&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Singer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./singer&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 歌曲表实体类</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token string">&quot;song&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Song</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;歌曲名称&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  songName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;歌曲时长&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;int&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  duration<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;歌词&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> nullable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  lyric<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;播放/下载链接&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  musicUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ApiProperty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> <span class="token string">&quot;发行日期&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> nullable<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  publishTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>

  <span class="token comment">// 多首歌曲可收录于一张专辑内，歌曲与专辑为多对一关系 SET NULL 表示Album删除不会影响关联Song的删除</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ManyToOne</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Album<span class="token punctuation">,</span> <span class="token punctuation">(</span>album<span class="token operator">:</span> Album<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> album<span class="token punctuation">.</span>songs<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    onDelete<span class="token operator">:</span> <span class="token string">&quot;SET NULL&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  album<span class="token operator">:</span> Album<span class="token punctuation">;</span>

  <span class="token comment">// 歌曲与歌手多对多关系</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ManyToMany</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Singer<span class="token punctuation">,</span> <span class="token punctuation">(</span>singer<span class="token operator">:</span> Singer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> singer<span class="token punctuation">.</span>songs<span class="token punctuation">)</span>
  singers<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Singer<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在多对一/一对多关系中，所有者方始终是多对一。这意味着使用 <code>@ManyToOne</code> 的类将存储相关对象的 ID。</p><p>多对多关系将会创建新的关系表 <code>singer_songs_song</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>+----------+--------+------+-----+---------+-------+
| Field    | Type   | Null | Key | Default | Extra |
+----------+--------+------+-----+---------+-------+
| singerId | bigint | NO   | PRI | NULL    |       |
| songId   | bigint | NO   | PRI | NULL    |       |
+----------+--------+------+-----+---------+-------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一对多/多对一关系的新增查询同样可使用<code>relations</code>关键字来实现联合查询。</p><h2 id="关联属性配置" tabindex="-1"><a class="header-anchor" href="#关联属性配置" aria-hidden="true">#</a> 关联属性配置</h2><p>其他 RelationOptions 配置如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RelationOptions</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * Sets cascades options for the given relation.
   * If set to true then it means that related object can be allowed to be inserted or updated in the database.
   * You can separately restrict cascades to insertion or updation using following syntax:
   *
   * cascade: [&quot;insert&quot;, &quot;update&quot;, &quot;remove&quot;, &quot;soft-remove&quot;, &quot;recover&quot;] // include or exclude one of them
   */</span>
  cascade<span class="token operator">?</span><span class="token operator">:</span>
    <span class="token operator">|</span> <span class="token builtin">boolean</span>
    <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token string">&quot;insert&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;update&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;remove&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;soft-remove&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;recover&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * Indicates if relation column value can be nullable or not.
   */</span>
  nullable<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * Database cascade action on delete.
   */</span>
  onDelete<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;RESTRICT&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;CASCADE&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;SET NULL&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;DEFAULT&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;NO ACTION&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * Database cascade action on update.
   */</span>
  onUpdate<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;RESTRICT&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;CASCADE&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;SET NULL&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;DEFAULT&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;NO ACTION&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * Indicate if foreign key constraints can be deferred.
   */</span>
  deferrable<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;INITIALLY IMMEDIATE&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;INITIALLY DEFERRED&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * Indicates whether foreign key constraints will be created for join columns.
   * Can be used only for many-to-one and owner one-to-one relations.
   * Defaults to true.
   */</span>
  createForeignKeyConstraints<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * Set this relation to be lazy. Note: lazy relations are promises. When you call them they return promise
   * which resolve relation result then. If your property&#39;s type is Promise then this relation is set to lazy automatically.
   */</span>
  lazy<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * Set this relation to be eager.
   * Eager relations are always loaded automatically when relation&#39;s owner entity is loaded using find* methods.
   * Only using QueryBuilder prevents loading eager relations.
   * Eager flag cannot be set from both sides of relation - you can eager load only one side of the relationship.
   */</span>
  eager<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * Indicates if persistence is enabled for the relation.
   * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.
   * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.
   * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.
   */</span>
  persistence<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * When a parent is saved (with cascading but) without a child row that still exists in database, this will control what shall happen to them.
   * delete will remove these rows from database.
   * nullify will remove the relation key.
   * disable will keep the relation intact. Removal of related item is only possible through its own repo.
   */</span>
  orphanedRowAction<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;nullify&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;delete&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;soft-delete&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;disable&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>cascade：用于定义级联操作。当执行主实体的相应操作时，TypeORM 会自动执行相应的级联操作，从而简化了代码编写和维护。cascade 属性可以包含&quot;insert&quot;，&quot;update&quot;，&quot;remove&quot;，&quot;soft-remove&quot;和&quot;recover&quot;中的任意一个或多个。cascade 属性可以在 <code>@OneToMany</code> 和 <code>@ManyToOne</code> 装饰器中使用。 <ul><li>insert: 在插入主实体时，自动插入关联实体。例如，如果一个用户（User）有多个订单（Order），那么在插入用户时，可以自动插入订单。</li><li>update: 在更新主实体时，自动更新关联实体。例如，如果一个用户（User）有多个地址（Address），那么在更新用户时，可以自动更新地址。</li><li>remove: 在删除主实体时，自动删除关联实体。例如，如果一个用户（User）有多个订单（Order），那么在删除用户时，可以自动删除订单。</li><li>soft-remove: 在软删除主实体时，自动软删除关联实体。例如，如果一个用户（User）有多个订单（Order），那么在软删除用户时，可以自动软删除订单。</li><li>recover: 在恢复软删除的主实体时，自动恢复软删除的关联实体。例如，如果一个用户（User）有多个订单（Order），那么在恢复软删除的用户时，可以自动恢复软删除的订单。</li></ul></li><li>nullable：用于定义关联实体是否可以为空。nullable 属性可以在 <code>@ManyToOne</code> 和 <code>@OneToOne</code> 装饰器中使用。 <ul><li>如果设置为 true，那么关联实体可以为空。</li><li>如果设置为 false，那么关联实体不能为空。</li></ul></li><li>onDelete：用于定义在删除关联实体时的行为。onDelete 属性可以在 <code>@ManyToOne</code> 和 <code>@OneToOne</code> 装饰器中使用。 <ul><li>&quot;CASCADE&quot;：当删除关联实体时，自动删除主实体。例如，在一个订单（Order）中，如果定义了一个必选的用户（User），那么可以将 onDelete 属性设置为&quot;CASCADE&quot;，表示当删除用户时，自动删除用户的所有订单。</li><li>&quot;SET NULL&quot;：当删除关联实体时，将主实体的关联属性设置为 NULL。例如，在一个订单（Order）中，如果定义了一个可选的用户（User），那么可以将 onDelete 属性设置为&quot;SET NULL&quot;，表示当删除用户时，将订单的用户属性设置为 NULL。</li><li>&quot;RESTRICT&quot;：如果存在关联实体，那么不允许删除主实体。例如，在一个订单（Order）中，如果定义了一个必选的用户（User），那么可以将 onDelete 属性设置为&quot;RESTRICT&quot;，表示当存在订单关联的用户时，不允许删除用户。</li><li>&quot;NO ACTION&quot;：不执行任何操作。例如，在一个订单（Order）中，如果定义了一个可选的用户（User），那么可以将 onDelete 属性设置为&quot;NO ACTION&quot;，表示不执行任何操作。</li><li>&quot;SET DEFAULT&quot;：当删除关联实体时，将主实体的关联属性设置为默认值。例如，在一个订单（Order）中，如果定义了一个可选的用户（User），那么可以将 onDelete 属性设置为&quot;SET DEFAULT&quot;，表示当删除用户时，将订单的用户属性设置为默认值。</li></ul></li><li>onUpdate：用于定义在更新关联实体时的行为。onUpdate 属性可以在<code>@ManyToOne</code>和<code>@OneToOne</code>装饰器中使用。可选值的用法与 onDelete 相同。</li><li>deferrable：用于定义约束的延迟检查方式。deferrable 属性可以在<code>@ManyToOne</code>、<code>@OneToOne</code>、<code>@OneToMany</code>和 <code>@ManyToMany</code>装饰器中使用。 <ul><li>&quot;INITIALLY IMMEDIATE&quot;：表示立即检查约束。这是默认值。</li><li>&quot;INITIALLY DEFERRED&quot;：表示延迟检查约束。在事务提交之前，不会检查约束。这样可以在事务中先插入数据，再插入关联数据，避免因为约束检查失败而导致事务回滚。</li></ul></li><li>createForeignKeyConstraints：用于定义是否创建外键约束。createForeignKeyConstraints 属性可以在 <code>@Entity</code> 装饰器中使用。 <ul><li>如果设置为 true，那么在创建表时，TypeORM 会自动创建外键约束。</li><li>如果设置为 false，那么在创建表时，TypeORM 不会创建外键约束，而是使用普通的索引（Index）查询。</li></ul></li><li>lazy：用于定义关联实体的加载方式。lazy 属性可以在<code>@ManyToOne</code>、<code>@OneToOne</code>、<code>@OneToMany</code>和<code>@ManyToMany</code>装饰器中使用。 <ul><li>如果设置为 true，那么在查询主实体时，不会立即加载关联实体，而是在第一次访问关联实体时才会加载。这种方式称为&quot;延迟加载&quot;（Lazy Load）。</li><li>如果设置为 false，那么在查询主实体时，会立即加载关联实体。这种方式称为&quot;立即加载&quot;（Eager Load）。</li></ul></li><li>eager：用于定义关联实体的加载方式。eager 属性可以在<code>@ManyToOne</code>、<code>@OneToOne</code>、<code>@OneToMany</code>和<code>@ManyToMany</code>装饰器中使用。 <ul><li>如果设置为 true，那么在查询主实体时，会立即加载关联实体。这种方式称为&quot;立即加载&quot;（Eager Load）。</li><li>如果设置为 false，那么在查询主实体时，不会立即加载关联实体，而是在第一次访问关联实体时才会加载。这种方式称为&quot;延迟加载&quot;（Lazy Load）。</li><li>注意<strong>eager 和 lazy 属性互斥，只需要声明其中一个即可。如果同时声明了 eager 和 lazy 属性，那么会抛出一个错误。</strong></li></ul></li><li>persistence：用于定义关联实体的持久化方式。persistence 属性可以在<code>@ManyToOne</code>、<code>@OneToOne</code>、<code>@OneToMany</code>和<code>@ManyToMany</code>装饰器中使用。 <ul><li>如果设置为 true，那么在保存主实体时，TypeORM 会自动保存关联实体。这种方式称为&quot;级联保存&quot;（Cascade Persist）。</li><li>如果设置为 false，那么在保存主实体时，TypeORM 不会保存关联实体。</li></ul></li><li>orphanedRowAction：用于定义当关联实体被删除时，对于孤立的行（Orphaned Row）的处理方式。orphanedRowAction 属性可以在<code>@OneToMany</code>和<code>@ManyToMany</code>装饰器中使用。 <ul><li>&quot;nullify&quot;：表示将孤立的行的外键设置为 null。</li><li>&quot;delete&quot;：表示将孤立的行删除。</li><li>&quot;soft-delete&quot;：表示将孤立的行执行软删除。</li><li>&quot;disable&quot;：表示孤立的行保持不变。</li></ul></li></ul><h2 id="高级查询-重要" tabindex="-1"><a class="header-anchor" href="#高级查询-重要" aria-hidden="true">#</a> 高级查询(重要)</h2><p>QueryBuilder 是 TypeORM 最强大的功能之一 ，它允许你使用优雅便捷的语法构建 SQL 查询，执行并获得自动转换的实体。QueryBuilder 可以用来构建几乎任何复杂的 SQL 查询。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> photos <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumModel
  <span class="token punctuation">.</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;album&quot;</span><span class="token punctuation">)</span> <span class="token comment">// first argument is an alias. Alias is what you are selecting - albums. You must specify it.</span>
  <span class="token punctuation">.</span><span class="token function">innerJoinAndSelect</span><span class="token punctuation">(</span><span class="token string">&quot;album.metadata&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;metadata&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">leftJoinAndSelect</span><span class="token punctuation">(</span><span class="token string">&quot;album.songs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;song&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token string">&quot;album.albumName LIKE :name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;%qi li xiang%&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&quot;song.id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DESC&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">getMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里封装了一个用于批量执行 Where 查询的方法，满足常用条件查询语句</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">BatchWhereOption</span> <span class="token punctuation">{</span>
  table<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  column<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  value<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  condition<span class="token operator">:</span>
    <span class="token operator">|</span> <span class="token string">&quot;equal&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;like&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;moreThan&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;lessThan&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;moreThanOrEqual&quot;</span>
    <span class="token operator">|</span> <span class="token string">&quot;lessThanOrEqual&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * @description createQueryBuilder模式下批量where条件的插值方法 typeORM的createQueryBuilder模式专用
 * @param builder createQueryBuilder返回值
 * @param whereOptions Array&lt;{ table:表名, column:列名, value:列值(可能为空), condition:多条件判断 }&gt;
 */</span>
<span class="token keyword">function</span> <span class="token function">builderBatchWhere</span><span class="token punctuation">(</span>
  builder<span class="token operator">:</span> SelectQueryBuilder<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  whereOptions<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>BatchWhereOption<span class="token operator">&gt;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> option <span class="token keyword">of</span> whereOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> table<span class="token punctuation">,</span> column<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> condition <span class="token punctuation">}</span> <span class="token operator">=</span> option<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;equal&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          builder<span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>column<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&quot;like&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          builder<span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>column<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> LIKE :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&quot;lessThan&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          builder<span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>column<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt; :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&quot;lessThanOrEqual&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          builder<span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>column<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &lt;= :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&quot;moreThan&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          builder<span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>column<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &gt; :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&quot;moreThanOrEqual&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          builder<span class="token punctuation">.</span><span class="token function">andWhere</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>table<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>column<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &gt;= :</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是 SongService 的一个高级分页查询的示例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SongService</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * @description 建立查询连接池，指定查询列字段，注入查询条件
   * @param whereOptions BatchWhereOption格式的查询条件，依赖父类的builderBatchWhere方法遍历注入
   */</span>
  <span class="token keyword">private</span> <span class="token function">createBuilderWithWhereOptions</span><span class="token punctuation">(</span>
    whereOptions<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>BatchWhereOption<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> SelectQueryBuilder<span class="token operator">&lt;</span>Song<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 建立查询池</span>
    <span class="token keyword">const</span> builder<span class="token operator">:</span> SelectQueryBuilder<span class="token operator">&lt;</span>Song<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model
      <span class="token punctuation">.</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;song&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">leftJoinAndSelect</span><span class="token punctuation">(</span><span class="token string">&quot;song.album&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;album&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">leftJoinAndSelect</span><span class="token punctuation">(</span><span class="token string">&quot;song.singers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;singer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 指定列查询</span>
    <span class="token keyword">const</span> songSelect<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span>column<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">song.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>column<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> albumSelect<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>albumService
      <span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>column<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">album.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>column<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> singerSelect<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singerService
      <span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>column<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">singer.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>column<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> selectOptions<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token operator">...</span>songSelect<span class="token punctuation">,</span>
      <span class="token operator">...</span>albumSelect<span class="token punctuation">,</span>
      <span class="token operator">...</span>singerSelect<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 条件注入</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">builderBatchWhere</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> whereOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * @description 歌曲分页查询 涉及到联表操作
   * @param songDTO SongDTO
   * @param pageNo number
   * @param pageSize number
   */</span>
  <span class="token keyword">async</span> <span class="token function">querySongs</span><span class="token punctuation">(</span>
    songDTO<span class="token operator">:</span> SongDTO<span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">defaultPageNo</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> pageNo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">defaultPageSize</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> pageSize<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Page<span class="token operator">&lt;</span>SongVO<span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
      songName<span class="token punctuation">,</span>
      lyric<span class="token punctuation">,</span>
      albumName<span class="token punctuation">,</span>
      singerName<span class="token punctuation">,</span>
      startPublishTime<span class="token punctuation">,</span>
      endPublishTime<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> songDTO<span class="token punctuation">;</span>
    <span class="token comment">// 设置查询条件</span>
    <span class="token keyword">const</span> whereOptions<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>BatchWhereOption<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        table<span class="token operator">:</span> <span class="token string">&quot;song&quot;</span><span class="token punctuation">,</span>
        column<span class="token operator">:</span> <span class="token string">&quot;songName&quot;</span><span class="token punctuation">,</span>
        key<span class="token operator">:</span> <span class="token string">&quot;songName&quot;</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> songName<span class="token punctuation">,</span>
        condition<span class="token operator">:</span> <span class="token string">&quot;like&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        table<span class="token operator">:</span> <span class="token string">&quot;song&quot;</span><span class="token punctuation">,</span>
        column<span class="token operator">:</span> <span class="token string">&quot;lyric&quot;</span><span class="token punctuation">,</span>
        key<span class="token operator">:</span> <span class="token string">&quot;lyric&quot;</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> lyric<span class="token punctuation">,</span>
        condition<span class="token operator">:</span> <span class="token string">&quot;like&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        table<span class="token operator">:</span> <span class="token string">&quot;song&quot;</span><span class="token punctuation">,</span>
        column<span class="token operator">:</span> <span class="token string">&quot;publishTime&quot;</span><span class="token punctuation">,</span>
        key<span class="token operator">:</span> <span class="token string">&quot;startPublishTime&quot;</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> startPublishTime<span class="token punctuation">,</span>
        condition<span class="token operator">:</span> <span class="token string">&quot;moreThanOrEqual&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        table<span class="token operator">:</span> <span class="token string">&quot;song&quot;</span><span class="token punctuation">,</span>
        column<span class="token operator">:</span> <span class="token string">&quot;publishTime&quot;</span><span class="token punctuation">,</span>
        key<span class="token operator">:</span> <span class="token string">&quot;endPublishTime&quot;</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> endPublishTime<span class="token punctuation">,</span>
        condition<span class="token operator">:</span> <span class="token string">&quot;lessThanOrEqual&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        table<span class="token operator">:</span> <span class="token string">&quot;album&quot;</span><span class="token punctuation">,</span>
        column<span class="token operator">:</span> <span class="token string">&quot;albumName&quot;</span><span class="token punctuation">,</span>
        key<span class="token operator">:</span> <span class="token string">&quot;albumName&quot;</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> albumName<span class="token punctuation">,</span>
        condition<span class="token operator">:</span> <span class="token string">&quot;like&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        table<span class="token operator">:</span> <span class="token string">&quot;singer&quot;</span><span class="token punctuation">,</span>
        column<span class="token operator">:</span> <span class="token string">&quot;singerName&quot;</span><span class="token punctuation">,</span>
        key<span class="token operator">:</span> <span class="token string">&quot;singerName&quot;</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> singerName<span class="token punctuation">,</span>
        condition<span class="token operator">:</span> <span class="token string">&quot;like&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 建立查询池、指定列查询、where条件注入</span>
    <span class="token keyword">const</span> builder<span class="token operator">:</span> SelectQueryBuilder<span class="token operator">&lt;</span>Song<span class="token operator">&gt;</span> <span class="token operator">=</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createBuilderWithWhereOptions</span><span class="token punctuation">(</span>whereOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// offset limit</span>
    builder<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pageNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 查询结果转换</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">getManyAndCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transformPageVO</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> pageNo<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50);function d(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("更多的查询参数，详见"),n("a",r,[s("官方文档"),l(t)])]),k])}const y=p(i,[["render",d],["__file","orm.html.vue"]]);export{y as default};
