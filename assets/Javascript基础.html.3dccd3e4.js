import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as i,a as n,d as a,b as o,e as s,r as l}from"./app.cd2cb36c.js";const c={},r=s(`<h2 id="js-历史介绍" tabindex="-1"><a class="header-anchor" href="#js-历史介绍" aria-hidden="true">#</a> JS 历史介绍</h2><p>JS 诞生于 1995 年，出现主要是用于处理网页中的前端验证（检查用户输入内容是否符合一定规则）。</p><p>市面上存在两个版本的 JS，分别是 JavaScript 和 JScript，为了确保标准一致，制定了共同的标准名为 ECMAScript。</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Javascript/time时间表" alt="历史时间表" loading="lazy"></p><p>不同浏览器的不同实现方式</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Javascript/time时间表" alt="不同浏览器实现" loading="lazy"></p><p>ECMAScript 是 JavaScript 标准，所以一般情况下这两个词认为是一个意思，但实际上 JavaScript 的含义要更大一些。</p><p>一个完整的 JavaScript 实现应该由以下三个部分构成：</p><ul><li><p>ECMAScript：JavaScript 标准</p></li><li><p>BOM：Browser Object Model 浏览器对象模型</p></li><li><p>DOM：Document Object Model 文档对象模型</p></li></ul><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><h3 id="写入方式" tabindex="-1"><a class="header-anchor" href="#写入方式" aria-hidden="true">#</a> 写入方式</h3><p>行内、内联、外联</p><p>同样的，JS 虽然可以写在标签属性中，但是结构与行为耦合，不方便维护，不推荐使用。</p><p>推荐方式：将 JS 代码编写到外部 JS 文件中，然后通过 script 标签引入。写到外部文件中可以在不同的页面中同时使用，也可以利用浏览器缓存机制。</p><p><strong>script 标签一旦用于引入外部文件，就不能在该标签内编写代码了，即使编写了浏览器也会忽略。</strong></p><h3 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序" aria-hidden="true">#</a> 执行顺序</h3><p>从上到下逐行执行</p><h3 id="基础输出语句" tabindex="-1"><a class="header-anchor" href="#基础输出语句" aria-hidden="true">#</a> 基础输出语句</h3><p>alert(); 控制浏览器弹出一个警示框</p><p>document.write(); 让计算机在页面 body 中输出一个内容</p><p>console.log(); 向控制台输出一个内容</p><h2 id="书写规范" tabindex="-1"><a class="header-anchor" href="#书写规范" aria-hidden="true">#</a> 书写规范</h2><ul><li><p>严格区分大小写</p></li><li><p>每一条语句以 ; 结尾（非强制）</p></li><li><p>忽略多个空格和换行</p></li></ul><h3 id="字面量与变量" tabindex="-1"><a class="header-anchor" href="#字面量与变量" aria-hidden="true">#</a> 字面量与变量</h3><p>字面量：就是数据，是源程序的组成部分之一。</p><p>变量：本质上是内存中的一块空间，这块空间有数据类型、名字、字面值。变量是内存中存储数据的最基本单元。</p><p>变量声明关键字：<code>var</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明一个字面为数字1的变量，变量名为a</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h3><p>js 语法中的标识符包括变量名、函数名、属性名。</p><ul><li><p>由字母、数字、_、$组成</p></li><li><p>不能以数字开头</p></li><li><p>不能是 ES 中的关键字或保留字</p></li></ul><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Javascript/关键字和保留字" alt="关键字和保留字" loading="lazy"></p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Javascript/其他不建议字符" alt="其他不建议字符" loading="lazy"></p><ul><li>驼峰命名法</li></ul><p>骆驼式命名法（Camel-Case）又称驼峰命名法，是电脑程式编写时的一套命名规则（惯例）。正如它的名称 CamelCase 所表示的那样，是指混合使用大小写字母来构成变量和函数的名字。程序员们为了自己的代码能更容易的在同行之间交流，所以多采取统一的可读性比较好的命名方式。</p><p>骆驼式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。</p><p><code>小驼峰命名法：camelCase</code></p><p><code>下划线命名法：snake_case</code></p><p>js 底层保存标识符实际采用 Unicode 编码，所以所有 UTF-8 内容理论上均可作为标识符。</p><h2 id="数据类型-重要" tabindex="-1"><a class="header-anchor" href="#数据类型-重要" aria-hidden="true">#</a> 数据类型（重要）</h2><p>js 现阶段的数据类型有六种</p><ul><li><p>Number 数值型</p></li><li><p>Boolean 布尔型</p></li><li><p>String 字符串，注意在书写时需要用引号括起来，字符串内部的引号注意加转移字符 \\</p></li><li><p>Null 空类型</p></li><li><p>Undefined 未定义类型</p></li><li><p>Object 对象</p></li></ul><p>除了 Object 是引用数据类型，其他都是基本数据类型。</p><h3 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h3><ul><li><p><code>\\&quot;</code> 表示 <code>&quot;</code></p></li><li><p><code>\\&#39;</code> 表示 <code>&#39;</code></p></li><li><p><code>\\n</code> 表示换行</p></li><li><p><code>\\t</code> 表示制表符</p></li></ul><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h3><p>js 中所有的数值都是 Number 类型，包括整数、浮点。</p><p>注意：</p><ol><li><p>当变量超过了 Number.MAX_VALUE 时，返回 Infinity</p></li><li><p>Number 变量被赋予了非数字值，返回 NaN(Not A Number)。使用 type of 检查 NaN，返回 Number</p></li></ol><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> Null</h3><p>Null 类型只有一个值，就是 Null，专门用来表示一个空对象。typeof 检查返回 Object</p><h3 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> Undefined</h3><p>声明变量不赋值，就为 undefined</p><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2-string">字符串</a></p><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><p><a href="#%E5%AF%B9%E8%B1%A1">对象</a></p><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h3><h4 id="_1-转换-string" tabindex="-1"><a class="header-anchor" href="#_1-转换-string" aria-hidden="true">#</a> 1. 转换 String</h4><p>方法一：.toString() 不会影响原变量 null 和 undefined 没有 toString 方法，空指针异常</p><p>方法二：String()函数，跟方法一不同之处在于，null 和 undefined 会直接转换为 null 和 undefined</p><h4 id="_2-转换-number" tabindex="-1"><a class="header-anchor" href="#_2-转换-number" aria-hidden="true">#</a> 2.转换 Number</h4><p>方法一：Number()函数</p><ul><li><p>纯数字字符串，转换为数字。</p></li><li><p>字符串有非数字内容，转换 NaN。</p></li><li><p>空串或者是一个全空格的字符串，转换为 0。</p></li><li><p>布尔值转换为 0 和 1。</p></li><li><p>null 转为 0。</p></li><li><p>undefined 转换为 NaN。</p></li></ul><p>方法二：</p><p>parseInt() 字符串转为整数</p><p>parseFloat() 字符串转为浮点数</p><p>转换有效位置从字符串首字符为数字开始，非数字字符结束。如果首字符不是数字，返回 NaN</p><h4 id="_3-转换-boolean" tabindex="-1"><a class="header-anchor" href="#_3-转换-boolean" aria-hidden="true">#</a> 3.转换 Boolean</h4><p>方法一：Boolean 函数</p><p>数字 → 布尔，除了 0 和 NaN，其他都是 true</p><p>字符串 → 布尔，除了空串，其他都是 true</p><p>null 和 undefined 都是 false</p><p>方法二：任意数据类型两次取反，转换布尔值。</p><h3 id="其他进制数字" tabindex="-1"><a class="header-anchor" href="#其他进制数字" aria-hidden="true">#</a> 其他进制数字</h3><p>十六进制 0x 开头</p><p>八进制 0 开头</p><p>二进制 0b 开头</p><p><strong>注意</strong>：parseInt()里面可以传递第二个参数，指定数字进制</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>运算符也叫操作符，计算一个或多个值，返回运算结果</p><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h3><h4 id="_1-加号" tabindex="-1"><a class="header-anchor" href="#_1-加号" aria-hidden="true">#</a> 1.加号 +</h4><p>字符串两两相加，效果为字符串拼接</p><p>任何值与字符串相加，均转换为字符串再拼接</p><p><strong>转换字符串快捷方法：任意类型+ &quot;&quot;</strong></p><h4 id="_2-减乘除模" tabindex="-1"><a class="header-anchor" href="#_2-减乘除模" aria-hidden="true">#</a> 2.减乘除模 - * / %</h4><p>任何值做减乘除模运算时都会转为 Number。</p><p><strong>转换 Number 快捷方法：任意类型 -0 *1 /1 &quot;&quot;</strong></p><h3 id="一元运算符" tabindex="-1"><a class="header-anchor" href="#一元运算符" aria-hidden="true">#</a> 一元运算符</h3><p>正号 + 负号 -</p><p>转换方法与 Number 函数一致。</p><h3 id="自增和自减" tabindex="-1"><a class="header-anchor" href="#自增和自减" aria-hidden="true">#</a> 自增和自减</h3><p>++i 先自增，后赋值参与运算</p><p>i++先赋值参与运算，后自增</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// a的值是6</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//7 b的值是7</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">++</span>j <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p>&amp;&amp; 短路与 || 短路或 ! 非</p><p>非布尔值两次取反，返回 true</p><p>短路与：1.第一个值为 true，返回第二个值；2.第一个值为 false，返回第一个值。（注意返回原值）</p><p>短路或：1.第一个值为 true，返回第一个值；2.第一个值为 false，返回第二个值。（注意返回原值）</p><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><p>+= -= *= /=</p><p>变量对等号右边的字面量做相应的四则运算，得到的结果重新赋值给当前变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
b <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
c <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
d <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h3><p>大于 &gt;</p><p>小于 &lt;</p><p>等于 ==（仅为值比较）</p><p>不等于 !=（仅为值比较）</p><p>全等 ===（全等，包含类型比较）</p><p>不全等 !==（不全等，包含类型比较）</p><p>1.比较字符串时，比较的是字符串的字符编码，且一位一位进行比较。</p><p>因此比较两个字符串型数字一定要转型，否则可能得到不可预期结果。</p><p>2.其他类型跟 Number 比较，转换为数字后再比较。</p><p>3.Null、Undefined 跟数字比较均为 false，没有可比性。</p><p>4.NaN 不等于任何值</p><h3 id="unicode-编码" tabindex="-1"><a class="header-anchor" href="#unicode-编码" aria-hidden="true">#</a> Unicode 编码</h3><p>\\u + 4 位 Unicode 编码</p><p>网页 html 中的 Unicode 编码使用： &amp;# + 编码。注意此处编码为十进制</p><h3 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a> 三元运算符</h3><p>条件表达式 ? 语句 1 : 语句 2;</p><p>判断表达式的值，如果是 true 则取值 1，如果是 false 则取值第二个 0；</p><h3 id="空值合并操作符" tabindex="-1"><a class="header-anchor" href="#空值合并操作符" aria-hidden="true">#</a> 空值合并操作符</h3><p>比较 ?? 左右两侧的值，如果左侧为 null 或 undefined，返回右侧值，否则返回左侧值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;hi&#39;</span>
<span class="token keyword">undefined</span> <span class="token operator">??</span> <span class="token string">&quot;hey&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;hey&#39;</span>
<span class="token boolean">false</span> <span class="token operator">??</span> <span class="token string">&quot;hola&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token number">0</span> <span class="token operator">??</span> <span class="token string">&quot;bonjour&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token string">&quot;first&quot;</span> <span class="token operator">??</span> <span class="token string">&quot;second&quot;</span><span class="token punctuation">;</span> <span class="token comment">// first</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逗号操作符" tabindex="-1"><a class="header-anchor" href="#逗号操作符" aria-hidden="true">#</a> 逗号操作符</h3><p>( _ , _ , _ , _)对每个操作数求值（从左到右），并返回最后一个操作数的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span>

相当于：
<span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">2</span>
<span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//连续执行和赋值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换" aria-hidden="true">#</a> 隐式类型转换</h3>`,131),u={href:"https://www.cnblogs.com/WayToGo-hwd/p/13994961.html",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="流程控制语句" tabindex="-1"><a class="header-anchor" href="#流程控制语句" aria-hidden="true">#</a> 流程控制语句</h2><h3 id="条件判断语句-if" tabindex="-1"><a class="header-anchor" href="#条件判断语句-if" aria-hidden="true">#</a> 条件判断语句 if</h3><p>单 if：满 30 减 20 用程序表示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果语句块之间只有一行代码，大括号可以省略</p><p>if-else：满 100 减 20 否则打九折</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件分支语句-switch" tabindex="-1"><a class="header-anchor" href="#条件分支语句-switch" aria-hidden="true">#</a> 条件分支语句 switch</h3><p>switch 语句用于基于不同的条件来执行不同的动作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
        执行代码块 <span class="token number">1</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        执行代码块 <span class="token number">2</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        与 <span class="token keyword">case</span> <span class="token number">1</span> 和 <span class="token keyword">case</span> <span class="token number">2</span> 不同时执行的代码
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工作原理：首先设置表达式 n（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 break 来阻止代码自动地向下一个 case 运行</p><ul><li>default 关键词</li></ul><p>default 关键词用来规定匹配不存在时做的事情</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x<span class="token punctuation">;</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
    x <span class="token operator">=</span> <span class="token string">&quot;今天是星期六&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
    x <span class="token operator">=</span> <span class="token string">&quot;今天是星期日&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    x <span class="token operator">=</span> <span class="token string">&quot;期待周末&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 如果今天不是星期六或星期日，则会输出默认的消息</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句" aria-hidden="true">#</a> 循环语句</h3><p>循环结构的执行步骤</p><ol><li><p>声明循环变量；</p></li><li><p>判断循环条件;</p></li><li><p>执行循环体操作；</p></li><li><p>更新循环变量；</p></li><li><p>然后循环执行 2-4，直到条件不成立，跳出循环。</p></li></ol><h4 id="_1-while-循环" tabindex="-1"><a class="header-anchor" href="#_1-while-循环" aria-hidden="true">#</a> 1. while 循环</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//1、声明循环变量</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//2、判断循环条件;</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">&quot;&lt;br /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3、执行循环体操作；</span>
  num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//4、更新循环变量；</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>while 循环()中的表达式，运算结果可以是各种类型，但是最终都会转为真假，转换规则如下。</p><p>① Boolean：true 为真，false 为假；</p><p>② String：空字符串为假，所有非空字符串为真；</p><p>③ Number：0 为假，一切非 0 数字为真；</p><p>④ null/Undefined/NaN:全为假；</p><p>⑤ Object：全为真。</p><h4 id="_2-do-while-循环" tabindex="-1"><a class="header-anchor" href="#_2-do-while-循环" aria-hidden="true">#</a> 2.do-while 循环</h4><p>while 循环特点：先判断后执行；</p><p>do-while 循环特点：先执行再判断，即使初始条件不成立，do-while 循环至少执行一次；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">do</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">&quot;&lt;br /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10 9 8 7 6 5 4 3 2 1 0</span>
  num<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-1js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-for-循环" tabindex="-1"><a class="header-anchor" href="#_3-for-循环" aria-hidden="true">#</a> 3.for 循环</h4><ol><li><p>for 有三个表达式：① 声明循环变量；② 判断循环条件；③ 更新循环变量。</p></li><li><p>三个表达式之间，用;分割，for 循环三个表达式都可以省略，但是两个“;”缺一不可。</p></li><li><p>for 循环的执行特点：先判断再执行，与 while 相同</p></li><li><p>for 循环三个表达式都可以有多部分组成，第二部分多个判断条件用&amp;&amp; ||连接，第一三部分用逗号分割；</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> num <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">&quot; &lt;br /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1 2 3 4 5 6 7 8 9 10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-for-in-循环" tabindex="-1"><a class="header-anchor" href="#_4-for-in-循环" aria-hidden="true">#</a> 4. for-in 循环</h4><p>for-in 循环主要用于遍历对象</p><p>for()中的格式：for(keys in zhangsan){}</p><p>keys 表示 obj 对象的每一个键值对的键！！所有循环中，需要使用 <code>obj[keys]</code> 来取到每一个值！！！</p><p>for-in 循环，遍历时不仅能读取对象自身上面的成员属性，也能延续原型链遍历出对象的原型属性所以，可以使用 hasOwnProperty 判断一个属性是不是对象自身上的属性。obj.hasOwnProperty(keys)==true 表示这个属性是对象的成员属性，而不是原先属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//声明一个Peson类</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">func1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//实例化这个类</span>
<span class="token keyword">var</span> zhangsan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用for-in遍历这个对象</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>keys <span class="token keyword">in</span> zhangsan<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">[</span>keys<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-for-of-循环" tabindex="-1"><a class="header-anchor" href="#_5-for-of-循环" aria-hidden="true">#</a> 5.for-of 循环</h4><p>ES6 借鉴 C++、Java、C# 和 Python 语言，引入了 for...of 循环，作为遍历所有数据结构的统一的方法。</p><p>一个数据结构只要部署了 Symbol.iterator 属性，就被视为具有 iterator 接口，就可以用 for...of 循环遍历它的成员。也就是说，for...of 循环内部调用的是数据结构的 Symbol.iterator 方法。 　　 for...of 循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如 arguments 对象、DOM NodeList 对象）、 Generator 对象，以及字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2 3</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a b c d</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-foreach-循环" tabindex="-1"><a class="header-anchor" href="#_6-foreach-循环" aria-hidden="true">#</a> 6. forEach 循环</h4><ul><li><p>forEach()方法需要一个函数作为参数，这个函数由我们创建但不由我们调用，称为回调函数。</p></li><li><p>数组中有几个元素函数执行几次，每次执行时，浏览器会将遍历元素以实参形式传递进来。</p></li><li><p>foreach 遍历无法通过 break 跳出循环，如需要跳出，需要添加 try……catch 代码块</p></li><li><p>浏览器会在回调函数中传递三个参数：</p></li></ul><p>1、当前正在遍历的元素；2、当前正在遍历的元素索引；3、正在遍历的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-循环控制语句" tabindex="-1"><a class="header-anchor" href="#_7-循环控制语句" aria-hidden="true">#</a> 7.循环控制语句</h4><p>1、break：跳出本层循环，继续执行循环后面的语句。如果循环有多层，则 break 只能跳出一层。</p><p>2、continue：跳过本次循环剩余的代码，继续执行下一次循环。</p><p>① 对于 for 循环，continue 之后执行的语句，是循环变量更新语句 i++；</p><p>② 对于 while、do-while 循环，continue 之后执行的语句，是循环条件判断；因此，使用这两个循环时，必须将 continue 放到 i++之后使用，否则，continue 将跳过 i++进入死循环。</p><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><p>基本数据类型都是单一的值，值和值之间没有任何联系，构不成整体。</p><p>对象是一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p><h3 id="内建对象" tabindex="-1"><a class="header-anchor" href="#内建对象" aria-hidden="true">#</a> 内建对象</h3><p>由 ES 标准中定义的对象，在任何的 ES 的实现中都可以使用。</p><p>Math String Number Boolean</p><p>平时使用的强制类型转换实际上调用的就是 String、Number 这些内建对象的方法</p><h3 id="宿主对象" tabindex="-1"><a class="header-anchor" href="#宿主对象" aria-hidden="true">#</a> 宿主对象</h3><p>JS 运行环境提供的对象，主要指浏览器提供的对象：<strong>BOM</strong>、<strong>DOM</strong>。</p><h3 id="自定义对象" tabindex="-1"><a class="header-anchor" href="#自定义对象" aria-hidden="true">#</a> 自定义对象</h3><p>自行创建对象，使用构造函数。new Object()</p><ul><li><p>常规语法：对象.属性名</p></li><li><p>属性名：不强制要求遵守标识符命名规范。</p></li><li><p>写法：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&quot;***&quot;</span>

obj<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;***&quot;</span>

obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;***&quot;</span><span class="token punctuation">,</span>

​		gender<span class="token operator">:</span><span class="token string">&quot;***&quot;</span><span class="token punctuation">,</span>

​		age<span class="token operator">:</span><span class="token operator">**</span><span class="token operator">*</span>&quot;

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>对象字面值的属性名可以加引号也可以不加，建议不加。</p></li><li><p>如果要使用一些特殊的名字，则必须加引号。</p></li><li><p>属性名和属性值是一组一组的键值对结构。</p></li><li><p>键值之间使用 : 连接，多个键值对之间使用 , 隔开</p></li><li><p>如果一个属性之后没有其他的属性，就不要写 ,</p></li></ol><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>函数也是一个对象，函数可以封装一些功能（代码），在需要时可以执行这些功能。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p>var fun = new Function();</p><p>实际开发中很少使用构造函数来创建函数对象。更多使用函数声明创建。</p><p>function 函数名([形参 1, 形参 2, ……]) {</p><p>​ 语句……</p><p>}</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><p>1.调用函数时解析器不会检查实参类型，所以要注意是否有可能接收到非法参数。</p><p>2.同时解析器也不会检查实参的数量。多余的实参不会被赋值。</p><p>3.如果实参的数量少于形参的数量，则没有对应实参的形参将是 undefined。</p><p>4.实参可以是任意数据类型，可以是对象，也可以是函数。</p><p><strong>注意：</strong></p><ul><li><p>fun()：是调用函数的意思，相当于使用函数返回值</p></li><li><p>fun：是函数对象，相当于直接使用函数对象</p></li></ul><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h3><h3 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1" aria-hidden="true">#</a> 返回值</h3><p>1.返回值可以是任意数据类型，可以是对象也可以是函数。</p><p>2.返回值 return 如果不跟任何值则返回 <strong>undefined</strong>，不写 return 也返回 <strong>undefined</strong>。</p><h3 id="iife-立即执行函数" tabindex="-1"><a class="header-anchor" href="#iife-立即执行函数" aria-hidden="true">#</a> IIFE 立即执行函数</h3><p>语法：(function() { * * * * * *})();</p><p>函数定义完，立即被调用，这种函数叫做立即执行函数。往往只会执行一次。</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><p>函数可以成为对象的属性，如果一个函数作为一个对象的属性保存，那么称这个函数是这个对象的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;hello&quot;</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><p>作用域指一个变量的作用范围</p><h3 id="全局作用域" tabindex="-1"><a class="header-anchor" href="#全局作用域" aria-hidden="true">#</a> 全局作用域</h3><ol><li><p>全局作用域指直接编写在 script 标签中的 js 代码。</p></li><li><p>全局作用域在页面打开时创建，在页面关闭时销毁。</p></li><li><p>在全局作用域中有一个全局对象 window，它代表的是一个浏览器窗口，由浏览器创建，可直接使用。</p></li><li><p>全局作用域中创建的变量都会作为 window 对象属性保存，创建的函数作为 window 对象方法保存。</p></li><li><p>变量声明提前，使用 var 关键字声明的变量，会在所有代码执行之前被声明（但是不赋值）。但是如果声明变量时不使用 var 关键字，则变量不会被声明提前。</p></li><li><p>函数声明提前，使用函数声明形式创建的函数 function 函数 K{}，它会在所有代码执行之前声明。但是使用函数表达式 var fun = function(){}创建的函数，能提前声明对象，但不会被赋值。</p></li><li><p>全局作用域中的变量都是全局变量，在页面的任意部分都可以访问得到。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// undefined，不会报错</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>carName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> carName <span class="token operator">=</span> <span class="token string">&quot; Volvo&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 此处可调用 carName 变量</span>
<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数内可调用 carName 变量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数作用域" tabindex="-1"><a class="header-anchor" href="#函数作用域" aria-hidden="true">#</a> 函数作用域</h3><ol><li><p>调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁。</p></li><li><p>每调用一次函数就会创建一个新的函数作用域，他们之间相互独立。</p></li><li><p>函数作用域中可以访问到全局作用域变量，在全局作用域中无法访问到函数作用域的变量。</p></li><li><p>函数作用域中操作变量时，会先在自身作用域中寻找，如果有就直接使用，没有则向上一级作用域寻找直到向全局作用域寻找。如果全局作用域仍未找到，则报错 ReferenceError。</p></li><li><p>在函数中要访问全局变量可以使用 window 对象。</p></li><li><p>在函数作用域也有提前声明特性，使用 var 关键字声明变量，会在函数中所有代码执行前提前声明。函数声明同理。</p></li><li><p>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p></li><li><p>定义形参就相当于在函数作用域中声明了变量</p></li></ol><p>以下实例中 carName 在函数内，但是为全局变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 此处可调用 carName 变量</span>

<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  carName <span class="token operator">=</span> <span class="token string">&quot;Volvo&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// 此处可调用 carName 变量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组-array" tabindex="-1"><a class="header-anchor" href="#数组-array" aria-hidden="true">#</a> 数组 Array</h2><p>数组是一个对象，使用数字作为索引操作元素，不同于普通对象使用字符串作为属性名操作。</p><h3 id="常见特性" tabindex="-1"><a class="header-anchor" href="#常见特性" aria-hidden="true">#</a> 常见特性</h3><ul><li><p>如果读取不存在的索引，不会报错而是返回 undefined。</p></li><li><p>对非连续数组，length 获取数组最大索引+1 长度。（尽量不要创建非连续数组）</p></li><li><p>修改的 length 大于原长度，多余部分会空出来。</p></li><li><p>给数组最后一个元素后面添加元素：arr[length] = xxx;</p></li></ul><h3 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h3><p>数组中的元素可以是任意数据类型</p><p>var arr = [];</p><p>var arr2 = new Array( );</p><p>小区别：</p><p>arr = [10] 创建一个单元素 10 的数组</p><p>arr = new Array(10) 创建一个长度为 10 的数组</p><h3 id="常用数组方法" tabindex="-1"><a class="header-anchor" href="#常用数组方法" aria-hidden="true">#</a> 常用数组方法</h3><h4 id="_1-push" tabindex="-1"><a class="header-anchor" href="#_1-push" aria-hidden="true">#</a> 1. push</h4><p>该方法可以向数组的末尾添加一个或多个元素，并返回数组的新长度</p><p>可以将要添加的元素作为方法的参数传递，这些元素会自动添加到数组末尾</p><p>该方法会将数组新的长度作为返回值返回</p><h4 id="_2-pop" tabindex="-1"><a class="header-anchor" href="#_2-pop" aria-hidden="true">#</a> 2. pop</h4><p>该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</p><h4 id="_3-unshift" tabindex="-1"><a class="header-anchor" href="#_3-unshift" aria-hidden="true">#</a> 3. unshift</h4><p>向数组开头添加一个或多个元素，并返回新的数组长度</p><p>向前边插入元素以后，其他的元素索引会依次调整</p><h4 id="_4-shift" tabindex="-1"><a class="header-anchor" href="#_4-shift" aria-hidden="true">#</a> 4. shift</h4><p>可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><h4 id="_5-slice" tabindex="-1"><a class="header-anchor" href="#_5-slice" aria-hidden="true">#</a> 5. slice</h4><p>可以用来从数组提取指定元素</p><p>该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p><p>参数：</p><p>1.截取开始的位置索引，包含开始索引</p><p>2.截取结束的位置索引，不包含结束索引</p><ul><li><p>第二个参数可以省略不写，此时会截取从开始索引往后的所有元素</p></li><li><p>索引可以传递一个负值，如果传递一个负值，则从后往前计算</p></li></ul><h4 id="_6-splice" tabindex="-1"><a class="header-anchor" href="#_6-splice" aria-hidden="true">#</a> 6. splice</h4><p>可以用于删除数组中的指定元素</p><p>使用 splice() 会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值数组返回</p><p>参数：</p><ol><li><p>表示开始位置的索引</p></li><li><p>表示删除的数量</p></li><li><p>第三个及以后可以传递一些新的元素，这些元素将会自动插入到开始位置索引前</p></li></ol><h4 id="_7-concat" tabindex="-1"><a class="header-anchor" href="#_7-concat" aria-hidden="true">#</a> 7. concat</h4><p>可以连接两个或多个数组，并将新的数组返回</p><p>该方法不会对原数组产生影响</p><h4 id="_8-join" tabindex="-1"><a class="header-anchor" href="#_8-join" aria-hidden="true">#</a> 8. join</h4><p>该方法可以将数组转换为一个字符串</p><p>该方法不会对原数组产生升影响，而是将转换后的字符串作为结果返回</p><p>在 join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符。如果不指定连接符，则默认使用 , 作为连接符。</p><h4 id="_9-reverse" tabindex="-1"><a class="header-anchor" href="#_9-reverse" aria-hidden="true">#</a> 9. reverse</h4><p>该方法用来反转数组（前边的去后边，后边的去前边）</p><p>该方法会直接修改原数组</p><h4 id="_10-sort" tabindex="-1"><a class="header-anchor" href="#_10-sort" aria-hidden="true">#</a> 10. sort</h4><p>可以用来对数组中的元素进行排序</p><p>也会影响原数组，默认会按照 Unicode 编码进行排序</p><ul><li><p>即时对于纯数字的数组，使用 sort() 排序时，也会按照 Unicode 编码来排序，所以对数字进行默认排序时，可能会得到错误结果。</p></li><li><p>我们可以在 sort()添加一个回调函数，来指定排序规则</p></li></ul><p>回调函数中需要定义两个形参，浏览器将会分别使用数组中的元素作为实参自动调用回调函数，使用哪个元素调用不确定，但肯定的是数组中 a 一定在 b 前面</p><ul><li>浏览器会根据回调函数的返回值来决定元素的顺序：</li></ul><ol><li><p>如果返回一个大于 0 的值，则元素会交换位置</p></li><li><p>如果返回一个小于 0 的值，则元素位置不变</p></li><li><p>如果返回一个 0，则认为两个元素相等，也不交换位置</p></li></ol><h4 id="_11-indexof" tabindex="-1"><a class="header-anchor" href="#_11-indexof" aria-hidden="true">#</a> 11. indexOf</h4><p>检索一个数组是否含有指定元素。</p><p>如果数组中含有该元素，则返回其第一次出现的数组元素索引。如果没有返回-1。</p><p>可以指定第二个参数，指定开始查找的位置。</p><h4 id="_12-lastindexof" tabindex="-1"><a class="header-anchor" href="#_12-lastindexof" aria-hidden="true">#</a> 12. lastIndexOf</h4><p>可返回一个指定的字符串值最后出现的位置，如果指定第二个参数 start，则在一个字符串中的指定位置从后向前搜索</p><p>注意： 该方法将从后向前检索字符串，但返回是从起始位置 (0) 开始计算子字符串最后出现的位置。 看它是否含有字符串。</p><p>开始检索的位置在字符串的 start 处或字符串的结尾（没有指定 start 时）。</p><p>如果没有找到匹配字符串则返回 -1 。</p><h2 id="日期-date" tabindex="-1"><a class="header-anchor" href="#日期-date" aria-hidden="true">#</a> 日期 Date</h2><p>在 JS 中使用 Date 对象表示一个时间</p><p>如果直接使用构造函数创建 Date 对象，会封装为当前代码执行时间。</p><p>日期格式 new Date(&quot;01/01/2021 00:00:00&quot;); （括号内参数仅为 1 个，表示为毫秒）</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">getDate()</td><td style="text-align:left;">从 Date 对象返回一个月中的某一天(1~31)</td></tr><tr><td style="text-align:left;">getDay()</td><td style="text-align:left;">从 Date 对象返回一周中的某一天(0~6)</td></tr><tr><td style="text-align:left;">getMonth()</td><td style="text-align:left;">从 Date 对象返回月份(0~1)</td></tr><tr><td style="text-align:left;">getFullYear()</td><td style="text-align:left;">从 Date 对象以四位数字返回年份</td></tr><tr><td style="text-align:left;">getYear()</td><td style="text-align:left;">请使用getFullYear()方法代替</td></tr><tr><td style="text-align:left;">getHours()</td><td style="text-align:left;">返回Date对象的小时(0~23)</td></tr><tr><td style="text-align:left;">getMinutes()</td><td style="text-align:left;">返回Date对象的分钟(0~59)</td></tr><tr><td style="text-align:left;">getSeconds()</td><td style="text-align:left;">返回Date对象的秒数(0~59)</td></tr><tr><td style="text-align:left;">getMilliseconds()</td><td style="text-align:left;">返回Date对象的毫秒(0~999)</td></tr><tr><td style="text-align:left;">getTime()</td><td style="text-align:left;">返回1970年1月1日至今的毫秒数</td></tr><tr><td style="text-align:left;">Date.now()</td><td style="text-align:left;">立即获取当前日期相对1970年1月1日的毫秒数时间戳</td></tr></tbody></table><h2 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string" aria-hidden="true">#</a> 字符串 String</h2><p>开始写 string</p>`,167);function k(h,v){const e=l("ExternalLinkIcon");return t(),i("div",null,[r,n("p",null,[a("上述运算在两变量类型不相同时均遵循"),n("a",u,[a("隐式类型转换"),o(e)])]),d])}const f=p(c,[["render",k],["__file","Javascript基础.html.vue"]]);export{f as default};
