import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,a as e}from"./app.c9ae6438.js";const t={},p=e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>js 打包器的产生由来：</p><h3 id="解决作用域问题" tabindex="-1"><a class="header-anchor" href="#解决作用域问题" aria-hidden="true">#</a> 解决作用域问题</h3><p>早先：grunt gulp，任务执行器，拼接项目文件</p><p>利用立即调用函数 IIFE(Immediately invoked function expressions)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">&quot;前端加油站&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">&quot;前端加油站&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> myName<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决代码拆分问题" tabindex="-1"><a class="header-anchor" href="#解决代码拆分问题" aria-hidden="true">#</a> 解决代码拆分问题</h3><p>node.js：require 模块，但浏览器并不支持</p><p>ES Modules：浏览器原生支持，Node 新版本已支持。目前 Vite 采用的拆分方式就它</p><h3 id="让浏览器支持模块化" tabindex="-1"><a class="header-anchor" href="#让浏览器支持模块化" aria-hidden="true">#</a> 让浏览器支持模块化</h3><p>早期：browserify requirejs 打包工具</p><p>requirejs：define 方法</p><p>ES6：import export</p><h2 id="学习构建工具的意义" tabindex="-1"><a class="header-anchor" href="#学习构建工具的意义" aria-hidden="true">#</a> 学习构建工具的意义</h2><p>本章节中主要讲述的是以 webpack 为基础，基于底层资源和文件的执行原理和步骤顺序、加载打包优化方法等，正式开发的项目都是基于各种框架的脚手架高度封装的 webpack，由于版本差异或封装程度差异，配置项不一定完全适用。</p>`,15),o=[p];function c(i,u){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","1-preface.html.vue"]]);export{d as default};
