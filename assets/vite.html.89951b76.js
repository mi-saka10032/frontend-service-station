import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as l,b as n,e as s,d as a,w as c,a as u,r as e}from"./app.bd960fae.js";const r={},d=n("p",null,"Vite 是一个由 ESBuild 搭建的快速开发服务器与一套 Rollup 打包器构成的前端构建工具",-1),k=n("p",null,"它基于原生 ES 模块提供了极快的冷启动与模块热更新",-1),m=n("p",null,"基于 Rollup 的预配置，可输出用于生产环境的高度优化过的静态资源",-1),v=n("h2",{id:"冷启动链路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#冷启动链路","aria-hidden":"true"},"#"),s(" 冷启动链路")],-1),h={href:"https://blog.csdn.net/qq_40716795/article/details/122975260",target:"_blank",rel:"noopener noreferrer"},g=u(`<h3 id="命令解析" tabindex="-1"><a class="header-anchor" href="#命令解析" aria-hidden="true">#</a> 命令解析</h3><p>这部分代码在 src/node/cli.ts 里，主要内容是借助 minimist —— 一个轻量级的命令解析工具解析 npm scripts，解析的函数是 resolveOptions ，精简后的代码片段如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">resolveOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// command 可以是 dev/build/optimize</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    argv<span class="token punctuation">.</span>command <span class="token operator">=</span> argv<span class="token punctuation">.</span>_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> argv<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拿到 options 后，会根据 options.command 的值判断是执行在开发环境需要的 runServe 命令或生产环境需要的 runBuild 命令</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>command <span class="token operator">||</span> options<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&quot;serve&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">runServe</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">runBuild</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&quot;optimize&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">runOptimize</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 runServe 方法中，执行 server 模块的创建开发服务器方法，同样在 runBuild 中执行 build 模块的构建方法</p><h3 id="runserve" tabindex="-1"><a class="header-anchor" href="#runserve" aria-hidden="true">#</a> runServe</h3><p>这部分代码在 src/node/server/index.ts 里，主要暴露一个 createServer 方法。</p><p>vite 使用 koa 作 web server，使用 clmloader 创建了一个监听文件改动的 watcher，同时实现了一个插件机制，将 koa-app 和 watcher 以及其他必要工具组合成一个 context 对象注入到每个 plugin 中</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Webpack/vite-context.png" alt="ViteContext" loading="lazy"></p><h3 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> plugin</h3><p>plugin 依次从 context 里获取上面这些组成部分，有的 plugin 在 koa 实例添加了几个 middleware，有的借助 watcher 实现对文件的改动监听，这种插件机制带来的好处是整个应用结构清晰，同时每个插件处理不同的事情，职责更分明</p><p>默认的 plugin 有：</p><ul><li><p>用户注入的 plugins —— 自定义 plugin</p></li><li><p>hmrPlugin —— 处理 hmr</p></li><li><p>htmlRewritePlugin —— 重写 html 内的 script 内容</p></li><li><p>moduleRewritePlugin —— 重写模块中的 import 导入</p></li><li><p>moduleResolvePlugin ——获取模块内容</p></li><li><p>vuePlugin —— 处理 vue 单文件组件</p></li><li><p>esbuildPlugin —— 使用 esbuild 处理资源</p></li><li><p>assetPathPlugin —— 处理静态资源</p></li><li><p>serveStaticPlugin —— 托管静态资源</p></li><li><p>cssPlugin —— 处理 css/less/sass 等引用</p></li></ul><p>所以，plugin 在开发模式下的运行机制实际上就是 koa 的中间件；在生产模式下则略有不同，它们是作为 rollup 打包的 plugin</p>`,15);function b(_,f){const t=e("RouterLink"),p=e("ExternalLinkIcon");return i(),l("div",null,[d,k,m,n("p",null,[s("Vite 与 VueCli 和 Webpack 的对比详见"),a(t,{to:"/vue3/2-%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B.html#%E4%BC%98%E7%A7%80%E7%9A%84%E5%86%B7%E5%90%AF%E5%8A%A8"},{default:c(()=>[s("Vite 冷启动")]),_:1})]),v,n("p",null,[s("现在分析执行 vite 命令后 vite 的启动流程。参考链接："),n("a",h,[s("https://blog.csdn.net/qq_40716795/article/details/122975260"),a(p)])]),g])}const B=o(r,[["render",b],["__file","vite.html.vue"]]);export{B as default};
