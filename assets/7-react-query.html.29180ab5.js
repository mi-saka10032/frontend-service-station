import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as e,b as n,e as s,d as o,a as c,r as i}from"./app.34ecf76e.js";const u={},l=c(`<p><code>react-query</code>是 React 的数据获取库，也是一个 hooks 库，使用很少量的代码完成对服务端的状态管理，且大多数情况下使用查询 useQuery 和修改 useMutation 就可以了</p><h2 id="redux-未能做到的事" tabindex="-1"><a class="header-anchor" href="#redux-未能做到的事" aria-hidden="true">#</a> redux 未能做到的事</h2><p>redux 可以轻松管理客户端状态，但并不适合处理异步和服务端状态，异步的问题已经由<code>redux-thunk</code>等异步中间件解决了，还剩下服务端状态未能解决</p><p>服务端状态有以下几点比较复杂：</p><ol><li>缓存（数据未变化时不去请求）</li><li>知道数据何时“过时”</li><li>在后台更新“过时”的数据</li><li>分页、延迟加载等性能优化</li><li>结构化共享并存储查询结果</li></ol><p><code>react-query</code>因此出现了，它可以方便地管理服务端的状态</p><h2 id="入口组件" tabindex="-1"><a class="header-anchor" href="#入口组件" aria-hidden="true">#</a> 入口组件</h2><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token string">&quot;./App.css&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> QueryClient<span class="token punctuation">,</span> QueryClientProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-query&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ReactQueryDevtools <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-query/devtools&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Demo1 <span class="token keyword">from</span> <span class="token string">&quot;./components/Demo1&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个全局client实例</span>
<span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 提供clientProvider</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">QueryClientProvider</span></span> <span class="token attr-name">client</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* 添加devtools */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;development&quot;</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReactQueryDevtools</span></span> <span class="token attr-name">initialIsOpen</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bottom-right<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token string">&quot;&quot;</span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Demo1</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">QueryClientProvider</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="视图组件" tabindex="-1"><a class="header-anchor" href="#视图组件" aria-hidden="true">#</a> 视图组件</h2><p>视图组件中使用 useQuery 和 useMutation，通过 useQueryClient 获取全局 QueryClient 实例，调用 api 管理 react-query 的请求</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useMutation<span class="token punctuation">,</span> useQuery<span class="token punctuation">,</span> useQueryClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-query&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">dataType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">Demo1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 访问App QueryClientProvider提供的client</span>
  <span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token function">useQueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&quot;posts&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError <span class="token punctuation">}</span> <span class="token operator">=</span> query<span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> mutate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 错误处理和刷新 清除缓存信息</span>
        queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span><span class="token string">&quot;posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">error</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Delete
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token punctuation">(</span>data<span class="token operator">?.</span>data <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> dataType<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>d<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>d<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Demo1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usequery" tabindex="-1"><a class="header-anchor" href="#usequery" aria-hidden="true">#</a> useQuery</h2><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/React/useQuery.webp" alt="useQuery控制台输出" loading="lazy"></p><p>useQuery 接收一个唯一键和一个返回 Promise 的函数以及 config<code>[queryKey, queryFn, config]</code>，可用于在整个程序中重新获取数据、缓存、共享查询等</p><h3 id="状态值" tabindex="-1"><a class="header-anchor" href="#状态值" aria-hidden="true">#</a> 状态值</h3><ul><li><code>isFetching || status === &#39;fetching&#39;</code>：类似于 isLoading，不过每次请求时都为 true，所以使用 isFetching 作为 loading 态更好</li><li><code>isLoading || status === &#39;loading&#39;</code>：查询没有数据，正在获取结果中，只有“硬加载”时才为 true，只要请求在 cacheTime 设定时间内，再次请求就会直接使用 cache，即&quot;isLoading = isFetching + no cached data&quot;</li><li><code>isError || status === &#39;error&#39;</code>：查询遇到一个错误，此时可以通过 error 获取到错误</li><li><code>isSuccess || status === &#39;success&#39;</code>：查询成功，并且数据可用，通过 data 获取数据</li><li><code>isIdle || status === &#39;idle&#39;</code>：查询处于禁用状态</li></ul><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><p>1.query-keys：作为查询键，指向全局唯一的 useQuery 返回值；可以是字符串，也可以是数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// A list of todos</span>
 <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// queryKey === [&#39;todos&#39;]</span>

 <span class="token comment">// Something else, whatever!</span>
 <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;somethingSpecial&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// queryKey === [&#39;somethingSpecial&#39;]</span>

  <span class="token comment">// An individual todo</span>
 <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
 <span class="token comment">// queryKey === [&#39;todo&#39;, 5]</span>

 <span class="token comment">// An individual todo in a &quot;preview&quot; format</span>
 <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">preview</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
 <span class="token comment">// queryKey === [&#39;todo&#39;, 5, { preview: true }]</span>

 <span class="token comment">// A list of todos that are &quot;done&quot;</span>
 <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;done&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
 <span class="token comment">// queryKey === [&#39;todos&#39;, { type: &#39;done&#39; }]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.query-functions：任何一个返回 Promise 的函数即可</p><p>注意：要让 react-query 确定查询出错，查询函数必须抛出异常</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;todos&quot;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>somethingGoesWrong<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Oh no!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="并行查询" tabindex="-1"><a class="header-anchor" href="#并行查询" aria-hidden="true">#</a> 并行查询</h3><p>指并发执行查询，以提高并发性能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// The following queries will execute in parallel</span>
   <span class="token keyword">const</span> usersQuery <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> fetchUsers<span class="token punctuation">)</span>
   <span class="token keyword">const</span> teamsQuery <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;teams&#39;</span><span class="token punctuation">,</span> fetchTeams<span class="token punctuation">)</span>
   <span class="token keyword">const</span> projectsQuery <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;projects&#39;</span><span class="token punctuation">,</span> fetchProjects<span class="token punctuation">)</span>
   <span class="token operator">...</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是更推荐的写法，使用 useQueries 实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> users <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> userQueries <span class="token operator">=</span> <span class="token function">useQueries</span><span class="token punctuation">(</span>
    users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">queryKey</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token function-variable function">queryFn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchUserById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="依赖查询" tabindex="-1"><a class="header-anchor" href="#依赖查询" aria-hidden="true">#</a> 依赖查询</h3><p>依赖（串行）查询依赖于前面的查询才能执行，在 config 中使用 enabled 属性实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> user <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> email<span class="token punctuation">]</span><span class="token punctuation">,</span> getUserByEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> userId <span class="token operator">=</span> user<span class="token operator">?.</span>id<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> isIdle<span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> projects <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span><span class="token string">&quot;projects&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">]</span><span class="token punctuation">,</span>
  getProjectsByUser<span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">enabled</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>userId<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usemutation" tabindex="-1"><a class="header-anchor" href="#usemutation" aria-hidden="true">#</a> useMutation</h2><p>useMutation 用于在执行异步函数之后做下一步操作，并提供了各种执行的生命周期用以修饰执行过程</p><p><code>useMutation(mutationFn, config)</code></p><h3 id="状态值-1" tabindex="-1"><a class="header-anchor" href="#状态值-1" aria-hidden="true">#</a> 状态值</h3><p>与 useQuery 基本相同</p><h3 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1" aria-hidden="true">#</a> 参数</h3><p>1.mutationFn</p><p>执行异步任务并返回 promise 的函数</p><p>2.config</p><p>onMutate：在触发执行函数之前触发，并传递给执行函数相同的变量。用于回滚乐观更新</p><p>onSuccess：执行函数成功后触发，传递成功结果</p><p>onSettled：成功或失败都将触发</p><p>onError：失败后触发，传递错误</p><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h2><p>react-query 中管理的异步数据均存在缓存</p><p>默认情况下， 通过或默认查询实例会将缓存的数据视为过时</p><ul><li>查询装载的新实例</li><li>窗口重新聚焦</li><li>网络已重新连接</li><li>可以选择为查询配置重新设置时间间隔</li></ul><p><strong>非活跃状态的查询结果默认在 5 分钟后执行垃圾回收</strong></p><p><strong>失败的查询将以静默方式默认重试 3 次</strong></p><p><strong>通常情况下，通过 queryClient 调取客户端实例来查询缓存</strong></p><p><code>queryClient.getQueryCache</code>：该方法返回此客户端连接到的查询缓存</p><p><code>queryClient.getMutationCache</code>：该方法返回此客户端连接到的执行缓存</p><p><code>queryClient.invalidateQueries</code>：所有匹配的查询都会立即标记为无效，活动查询会在后台重新获取</p><p><code>queryClient.clear</code>：该方法清除所有连接的缓存</p><h2 id="窗口聚焦自动查询" tabindex="-1"><a class="header-anchor" href="#窗口聚焦自动查询" aria-hidden="true">#</a> 窗口聚焦自动查询</h2><p>refetchOnWindowFocus 默认为 true，用户短暂离开再返回应用页时，数据就会被标记为过时，这时 react-query 会在后台自动请求新的数据，通过设置 refetchOnWindowFocus 为 false 禁用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">defaultOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">queries</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">refetchOnWindowFocus</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模型分析" tabindex="-1"><a class="header-anchor" href="#模型分析" aria-hidden="true">#</a> 模型分析</h2><p>Query 是 react-query 的底层核心类，主要负责网络数据请求、状态变化处理、内存回收等工作</p><h3 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求" aria-hidden="true">#</a> 网络请求</h3><p>Query 的网络请求底层通过 Retryer 重试器（Promise）类实现</p><p>Query 给 Retryer 指定 fn（请求函数主体）、retry（重试次数）、retryDelay（重试延迟时间），以及一系列状态变化回调函数（比如 onSuccess、onPause 等）</p><h3 id="状态变化" tabindex="-1"><a class="header-anchor" href="#状态变化" aria-hidden="true">#</a> 状态变化</h3><p>Query 有四种状态，网络请求过程中，Query 的状态会发生变化</p><p><code>export type QueryStatus = &#39;idle&#39; | &#39;loading&#39; | &#39;error&#39; | &#39;success&#39;</code></p><ul><li>当初始化 Query 时，选项 enabled 设置 false，此时 Query 的状态即为 idle 状态；</li><li>loading 状态表示 Query 没有缓存数据，同时正处于请求网络中；</li><li>error 状态表示网络请求遇到了异常，可以通过 error 属性获取异常对象；</li><li>success 状态表示网络请求正常获得结果，可以通过 data 属性获取响应结果。</li></ul><p><strong>Query 使用经典的 reducer 模式处理状态变化。reducer 模式，其实我们并不陌生，Vuex、Redux 等数据状态管理库都是通过 reducer 模式处理数据状态变化的</strong></p><p>Query 会在不同的状态变化回调函数中，调用 Dispatch 分发对应的 Action，Dispatch 最终会调用 Reducer 处理状态的变化</p><p>Reducer 函数，接受当前状态对象和 Action 对象，经过 Switch 结构处理后，返回新的状态</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">fetch</span><span class="token punctuation">(</span>
    options<span class="token operator">?</span><span class="token operator">:</span> QueryOptions<span class="token punctuation">,</span>
    fetchOptions<span class="token operator">?</span><span class="token operator">:</span> FetchOptions
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span> <span class="token punctuation">{</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>retryer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retryer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>
      <span class="token function-variable function">onFail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;failed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">onPause</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;pause&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">onContinue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;continue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token operator">...</span>
<span class="token punctuation">}</span>


<span class="token keyword">private</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token operator">:</span> Action<span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TError<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reducer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token keyword">protected</span> <span class="token function">reducer</span><span class="token punctuation">(</span>
    state<span class="token operator">:</span> QueryState<span class="token punctuation">,</span>
    action<span class="token operator">:</span> Action
  <span class="token punctuation">)</span><span class="token operator">:</span> QueryState <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;fetch&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span>state<span class="token punctuation">,</span>
          status<span class="token operator">:</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token keyword">case</span> <span class="token string">&#39;success&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span>state<span class="token punctuation">,</span>
          status<span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token keyword">case</span> <span class="token string">&#39;error&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token operator">...</span>state<span class="token punctuation">,</span>
          status<span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">return</span> state
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中止请求" tabindex="-1"><a class="header-anchor" href="#中止请求" aria-hidden="true">#</a> 中止请求</h3><p>Query 实现中止网络请求利用了 AbortController 这个 API</p><p>AbortController 表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。使用 AbortController 中止网络请求的基本过程如下：</p><ol><li>调用 new AbortController()，构造 AbortController 实例</li><li>把 AbortController 实例的 signal 传递给请求方法，使得 AbortController 和请求对象绑定在一起</li><li>如果想中止与 AbortController 关联的网络请求时，调用该 AbortController 实例的 abort 方法即可。</li></ol><p>Query 也是通过 AbortController 实现中止网络请求。</p><p>每次调用 Query 的 fetch 方法时，都会实例化一个 AbortController 对象，并且会把 AbortController.signal 放在 queryFnContext 参数中传递给请求主体 queryFn，开发者可以在请求主体方法 queryFn 手动的绑定 signal。</p><p>如果我们想中止 Query 的网络请求，需要调用 Query.cancel，Query.cancel 会调用 Retryer.cancel，不过最终 Retryer 还是会调用 AbortController.abort</p><h3 id="观察者管理" tabindex="-1"><a class="header-anchor" href="#观察者管理" aria-hidden="true">#</a> 观察者管理</h3><p>所有使用 Query 的观察者，都要被添加到 Query.observers 数组中。通过 Query.observers 元素长度，可以判断 Query 是否处于活跃状态，当 Query.observers.length === 0 表示没有任何 Observer 在使用 Query 对象，那么，Query 就被视作不活跃的状态，已经具备被垃圾回收的之一条件</p><p>一旦 Observer 观察 Query 对象，必须调用 Query.addObserver 方法，把 Observer 添加到 Query.observers 数组中。除此之外，还会停止垃圾回收机制</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">addObserver</span><span class="token punctuation">(</span>observer<span class="token operator">:</span> QueryObserver<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>hadObservers <span class="token operator">=</span> <span class="token boolean">true</span>

		<span class="token comment">// Stop the query from being garbage collected</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearGcTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Query.addObserver 相反，Query.removeObserver 负责把 observer 从 Query.observers 中移除，同时调度垃圾回收机制，回收 Query 占用的内存</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">removeObserver</span><span class="token punctuation">(</span>observer<span class="token operator">:</span> QueryObserver<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">!==</span> observer<span class="token punctuation">)</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleGc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h3><p>react-query 通过 QueryCache 管理所有的 Query 对象，QueryCache 可以看成 Map 结构，key 是 Query 对象的 queryHash 属性（全局唯一的），value 是 Query 对象。一旦 Query 处于无用状态，如果不及时释放其对应的内存，易造成 OOM（内存溢出）</p><p>Query 的垃圾回收是通过 Query.scheduleGc 实现的。本质上，就是等待 Query.cacheTime 指定的毫秒时间之后，如果当前 Query 处于不活跃状态，把 Query 从缓存中移除</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> <span class="token function">scheduleGc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearGcTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValidTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>gcTimeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">optionalRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheTime<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token function">optionalRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isFetching<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hadObservers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleGc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token function">clearGcTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gcTimeout<span class="token punctuation">)</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>gcTimeout <span class="token operator">=</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 Query.scheduleGc 的时机有两处：</p><ol><li>观察者取消观察 Query，触发调用 Query.removeObserver 方法，此时如果没有任何观察者使用 Query 了，会开启垃圾回收</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">removeObserver</span><span class="token punctuation">(</span>observer<span class="token operator">:</span> QueryObserver<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">!==</span> observer<span class="token punctuation">)</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleGc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 react-query 中，除了 Observer 可以实例化一个 Query，也可以通过 QueryClient.prefetchQuery（预请求）创建一个 Query。假若 Query 从未被 Observer 使用的话，该 Query 的内存就会变成僵尸内存。因此，为了确保预请求的 Query 在 cacheTime 时间到了，内存也能被及时释放。Query 的构造函数也会调用 Query.scheduleGc</li></ol><h2 id="原理与本质" tabindex="-1"><a class="header-anchor" href="#原理与本质" aria-hidden="true">#</a> 原理与本质</h2><h3 id="场景假设" tabindex="-1"><a class="header-anchor" href="#场景假设" aria-hidden="true">#</a> 场景假设</h3><p>试想这样一个场景，假设页面上有三个子组件 A, B, C，都需要用到同一个接口的 todo 数据</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/React/react-query-todo.awebp" alt="react-query原理图1" loading="lazy"></p><p>如果直接调用 useQuery，那么三次 useQuery 会发送 3 个相同请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// compA</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&quot;todos&quot;</span><span class="token punctuation">,</span> fetchTodos<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// compB</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&quot;todos&quot;</span><span class="token punctuation">,</span> fetchTodos<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// compC</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&quot;todos&quot;</span><span class="token punctuation">,</span> fetchTodos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/React/react-query-todo-unique.awebp" alt="react-query原理图2" loading="lazy"></p><p>但实际上请求只会发出一次，因为三个 useQuery，我们都定义了同一个值为 &#39;todos&#39; 的 queryKey，它代表请求唯一标识</p><h3 id="探讨本质" tabindex="-1"><a class="header-anchor" href="#探讨本质" aria-hidden="true">#</a> 探讨本质</h3><h4 id="唯一标识" tabindex="-1"><a class="header-anchor" href="#唯一标识" aria-hidden="true">#</a> 唯一标识</h4><p>在 react-query 中，代表请求唯一标识的并不是请求的路径 path，而是 queryKey，它作为 useQuery 必传的第一个参数，接收字符串、数组、对象等一切可被序列化的值</p><p>上面声明的 queryKey 都为 &#39;todos&#39;，接收到 queryKey 后，useQuery 会在内部找到或者创建与之对应的 Query 实例，Query 实例包含 isLoading，data 等状态，queryKey 与 Query 实例一一对应</p><p>于是，三个基本同时发出的请求也都收敛到了 Query 实例内部发出，直接与服务端交互。3 个 queryKey 对应 1 个 Query 实例，所以只会有一次请求</p><h4 id="缓存管理" tabindex="-1"><a class="header-anchor" href="#缓存管理" aria-hidden="true">#</a> 缓存管理</h4><p>全局实例化的 QueryClient，会在内部存储所有未过期的 Query，作为一个外部的 store 管理起来。Query 以 map 键值对的方式保存在 store 中，key 为 queryHash，value 为 Query</p><p>因此，react-query 本质就是一个外部的状态管理库</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/React/react-query-store.awebp" alt="react-query原理图3" loading="lazy"></p><h3 id="触发更新渲染" tabindex="-1"><a class="header-anchor" href="#触发更新渲染" aria-hidden="true">#</a> 触发更新渲染</h3><p>触发更新渲染的内容比较复杂，简而言之，是在观察者观测到状态变化时，通过调用 React 提供的 API 触发 React 强制更新</p>`,110),r={href:"https://juejin.cn/post/7169515109172609032#heading-1",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const a=i("ExternalLinkIcon");return p(),e("div",null,[l,n("p",null,[s("更详细的内容详见："),n("a",r,[s("https://juejin.cn/post/7169515109172609032#heading-1"),o(a)])])])}const y=t(u,[["render",k],["__file","7-react-query.html.vue"]]);export{y as default};
