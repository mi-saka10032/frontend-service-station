import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as t}from"./app.65bae536.js";const p={},e=t(`<h2 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h2><ol><li>通过 onClick、onMousemove、onMouseenter 等属性指定事件处理函数（注意大小写）</li><li>React 使用的是自定义事件，而不是原生 DOM 事件，为了更好的兼容性</li><li>React 中的事件是通过事件委托方式处理的（委托给组件外层的元素）</li><li>通过<code>event.target</code>可以得到发生事件的 DOM 元素对象</li></ol><h2 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数" aria-hidden="true">#</a> 高阶函数</h2><p>如果一个函数符合下面 2 个规范中的任何一个，那该函数就是高阶函数</p><ol><li>若 A 函数，接收的参数是一个函数，那么 A 就可以称之为高阶函数</li><li>若 A 函数，调用的返回值依然是一个函数，那么 A 就可以称之为高阶函数</li></ol><p>常见高阶函数：Promise、定时器、数组高阶方法（map、filter 等）</p><p>函数柯里化：通过函数调用继续返回函数的方式，实现多次接收参数，最后统一处理的函数编码形式</p><p><strong>注意：</strong></p><ol><li>父子通信的函数调用需要使用柯里化维持 this 对象</li><li>JSX 循环时需要使用高阶函数 map 返回 JSX 对象</li></ol><h2 id="jsx-循环" tabindex="-1"><a class="header-anchor" href="#jsx-循环" aria-hidden="true">#</a> JSX 循环</h2><p>以下是 state 中的数组元素循环生成 JSX 的写法</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Count</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">structure</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;香蕉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;牛奶&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token comment">/* 注意，此处禁止写 this.state.count++，因为自增运算符是对原count值的修改，React禁止对state的直接修改 */</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">计数按钮</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>structure<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="key-的原理" tabindex="-1"><a class="header-anchor" href="#key-的原理" aria-hidden="true">#</a> key 的原理</h2><p><strong>key 的作用</strong></p><p>简单地说，key 是虚拟 DOM 对象的标识符，在更新显示时 key 起着极其重要的作用</p><p>详细地说，当状态中的数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】， 随后 React 进行【新虚拟 DOM】与【旧虚拟 DOM】的 diff 比较，比较规则如下：</p><p>a.旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：</p><p>（1）若虚拟 DOM 中内容没变，直接使用之前的真实 DOM</p><p>（2）若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM</p><p><strong>用 index 作为 key 可能会引发的问题</strong></p><p>1.若对数据进行：逆序添加、逆序删除等破坏顺序的操作，会产生没有必要的真实 DOM 更新，界面效果没问题，但效率低。</p><p>2.如果结构中还包含输入类的 DOM：会产生错误 DOM 更新，界面有问题。</p><p>3.注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。</p><p><strong>开发中如何选择 key</strong></p><ol><li>最好使用每条数据的唯一标识作为 key，比如 id、手机号、身份证号、学号等唯一值。</li><li>如果确定只是简单展示数据，用 index 也是可以的。</li></ol><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/React/image-20210915190521544.png" alt="react-diff更新" loading="lazy"></p>`,26),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","6-事件处理与更新.html.vue"]]);export{r as default};
