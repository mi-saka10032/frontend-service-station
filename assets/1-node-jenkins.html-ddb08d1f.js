import{_ as e,C as i,Y as t,Z as c,$ as s,a0 as n,a2 as p,a1 as o}from"./framework-bb209140.js";const l={},u={href:"https://github.com/Binaryify/NeteaseCloudMusicApi",target:"_blank",rel:"noopener noreferrer"},d=o(`<h2 id="_1-初始化远程环境" tabindex="-1"><a class="header-anchor" href="#_1-初始化远程环境" aria-hidden="true">#</a> 1.初始化远程环境</h2><p>首先，需要明确部署目标：</p><p>在阿里云 ECS 上安装 jenkins，创建一个 jenkins 发布任务，关联 github 仓库，拉取下来的仓库使用 docker 完成镜像打包和容器服务运行。</p><p>因此，ECS 上必需安装的应用有：java11、jenkins(我选择 java11 支持的版本)、docker、git。</p><h3 id="环境和前置条件" tabindex="-1"><a class="header-anchor" href="#环境和前置条件" aria-hidden="true">#</a> 环境和前置条件</h3><p>服务器：阿里云服务 ECS 1 核(vCPU) 2 GiB</p><p>操作系统：Alibaba Cloud Linux 3.2104 64 位</p><h3 id="远程连接" tabindex="-1"><a class="header-anchor" href="#远程连接" aria-hidden="true">#</a> 远程连接</h3><p>进入阿里云-云服务器 ECS 工作台，远程连接进入命令行操作台界面</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/aliyunecs-remoteLink.png" alt="阿里云ECS远程连接" tabindex="0" loading="lazy"><figcaption>阿里云ECS远程连接</figcaption></figure><p>我这个 ECS 的操作系统已经提供了 yum 包管理器，提供一系列 yum 命令直接一键安装各种应用，下面的安装操作都使用 yum 来执行。</p><p>其他比较常见的还有 Debian / Ubuntu 的 apt-get 包管理器，也是类似的操作。</p><h2 id="安装-jenkins" tabindex="-1"><a class="header-anchor" href="#安装-jenkins" aria-hidden="true">#</a> 安装 jenkins</h2><p>注意：网上大多数文章推荐安装的 jenkins 基于 java8，截至目前，jenkins 新版本已不支持 java8，需要特别备注安装 jenkins 老版本才能正确安装并运行。因此这里我们直接安装 java11 版本的 jenkins。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装java11</span>
yum <span class="token function">install</span> java-11-openjdk

<span class="token comment"># 正常显示java版本即表示java11已成功安装</span>
<span class="token function">java</span> <span class="token parameter variable">-version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/java-version.png" alt="java-version" tabindex="0" loading="lazy"><figcaption>java-version</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置jenkins源</span>
<span class="token function">sudo</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
<span class="token function">sudo</span> <span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://pkg.jenkins.io/redhat-stable/jenkins.io.key

yum <span class="token function">install</span> <span class="token parameter variable">-y</span> jenkins

<span class="token comment"># 正常显示jenkins版本即表示jenkins已安装成功</span>
jenkins <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/jenkins--version.png" alt="jenkins--version" tabindex="0" loading="lazy"><figcaption>jenkins--version</figcaption></figure><h3 id="初始化-jenkins-配置" tabindex="-1"><a class="header-anchor" href="#初始化-jenkins-配置" aria-hidden="true">#</a> 初始化 jenkins 配置</h3><p>修改 jenkins 的配置文件，注意修改用户为 root 以获取管理员权限，端口按个人喜好修改（这里是 8888）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/sysconfig/jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/jenkins-config.png" alt="jenkins-config" tabindex="0" loading="lazy"><figcaption>jenkins-config</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改项目权限</span>
<span class="token function">chown</span> <span class="token parameter variable">-R</span> root:root /var/lib/jenkins
<span class="token function">chown</span> <span class="token parameter variable">-R</span> root:root /var/cache/jenkins
<span class="token function">chown</span> <span class="token parameter variable">-R</span> root:root /var/log/jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动-jenkins" tabindex="-1"><a class="header-anchor" href="#启动-jenkins" aria-hidden="true">#</a> 启动 jenkins</h3><p>使用<code>systemctl start jenkins</code>启动 jenkins，没有报错说明成功。第一次启动会比较慢，要多等一下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动</span>
systemctl start jenkins
<span class="token comment"># 停止</span>
systemctl stop jenkins
<span class="token comment"># 重启</span>
systemctl restart jenkins
<span class="token comment"># 查看状态</span>
systemctl status jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动成功后可以查看运行中的 jenkins 状态</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/jenkins-status.png" alt="jenkins-status" tabindex="0" loading="lazy"><figcaption>jenkins-status</figcaption></figure><h3 id="设置安全组" tabindex="-1"><a class="header-anchor" href="#设置安全组" aria-hidden="true">#</a> 设置安全组</h3><p>对于阿里云 ECS 而言，不存在系统级防火墙，仅需要在控制台开通对应端口的安全组外网访问权限即可。腾讯云应该也是类似的情况，其他类型服务器或许需要输入命令放开对应端口的访问权限</p><p>这里我使用的 jenkins 是 8888 端口，因此需要开启 8888 端口访问入口方向的权限</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/ecs-security.png" alt="ecs-security" tabindex="0" loading="lazy"><figcaption>ecs-security</figcaption></figure><h3 id="登录-jenkins" tabindex="-1"><a class="header-anchor" href="#登录-jenkins" aria-hidden="true">#</a> 登录 jenkins</h3><p>开通安全组之后，使用 ECS 的公网 IP+jenkins 端口号访问 jenkins。初次登录需要初始密码，登录之后修改为自定义密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看初始密码，用于首次登录jenkins</span>
<span class="token function">cat</span> /var/lib/jenkins/secrets/initialAdminPassword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，就是等待 jenkins 安装必要的插件了，也需要等待不少时间。</p><p>登录成功之后的 jenkins 状态界面如下图所示</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/jenkins-login.png" alt="jenkins状态界面" tabindex="0" loading="lazy"><figcaption>jenkins状态界面</figcaption></figure><h3 id="更换端口小坑" tabindex="-1"><a class="header-anchor" href="#更换端口小坑" aria-hidden="true">#</a> 更换端口小坑</h3><p>网上的大多数更换 jenkins 端口的方案，都是<code>vim /etc/sysconfig/jenkins</code>修改<code>JENKINS_PORT</code>之后重启 jenkins，但是我这套系统不大一样，修改之后重启不生效</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/modify-port.png" alt="修改jenkins端口" tabindex="0" loading="lazy"><figcaption>修改jenkins端口</figcaption></figure><p>修改完成后输入以下指令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 停止jenkins</span>
systemctl stop jenkins

<span class="token comment"># 配置文件使生效</span>
<span class="token builtin class-name">source</span> /etc/sysconfig/jenkins

<span class="token comment"># 启动jenkins</span>
systemctl start jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>systemctl status jenkins</code>查看 jenkins 状态或者<code>netstat -ntlp</code>查看进程中端口，都可以看到 jenkins 的端口并没有从 8888 迁移到 9000</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/invalid_port_mod.png" alt="无效的jenkins端口修改" tabindex="0" loading="lazy"><figcaption>无效的jenkins端口修改</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-ntlp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/netstat.png" alt="netstat" tabindex="0" loading="lazy"><figcaption>netstat</figcaption></figure><p>这种情况，需要使用以下指令修改 jenkins 端口配置并重启</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改JENKINS_PORT的端口号</span>
<span class="token function">vim</span> /etc/systemd/system/jenkins.service.d/override.conf

<span class="token comment"># 重新加载服务配置</span>
systemctl daemon-reload

<span class="token comment">## 重启jenkins</span>
systemctl restart jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，jenkins 才能在新端口重新启动。</p><h2 id="创建-jenkins-任务" tabindex="-1"><a class="header-anchor" href="#创建-jenkins-任务" aria-hidden="true">#</a> 创建 jenkins 任务</h2><p>目标仓库为 github 仓库，部署方式预计使用 docker 打包部署，因此 ECS 需要安装 git 和 docker</p><h3 id="安装-docker-和-git" tabindex="-1"><a class="header-anchor" href="#安装-docker-和-git" aria-hidden="true">#</a> 安装 docker 和 git</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 前提软件包</span>
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
<span class="token comment"># 更换源地址</span>
yum-config-manager --add-repo http: //mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
<span class="token comment"># 更新yum软件包索引</span>
yum makecache fast
<span class="token comment"># 安装</span>
yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
<span class="token comment"># 启动</span>
systemctl start <span class="token function">docker</span>
<span class="token comment"># 自机启动</span>
systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
<span class="token comment"># 重新加载服务配置</span>
systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/docker-v.png" alt="docker-v" tabindex="0" loading="lazy"><figcaption>docker-v</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum update

<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">git</span>

<span class="token comment"># 查看git版本</span>
<span class="token function">git</span> <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/git-v.png" alt="git-v" tabindex="0" loading="lazy"><figcaption>git-v</figcaption></figure><h3 id="创建-docker-脚本" tabindex="-1"><a class="header-anchor" href="#创建-docker-脚本" aria-hidden="true">#</a> 创建 Docker 脚本</h3><p>github 仓库已经建好，为个人使用的私库，仓库搭建过程不再赘述，直接进入 jenkins 任务创建环节</p><p>这里为求简洁，我们使用比较简单的流水线（PipeLine）操作</p><p><strong>创建凭据</strong></p><p>问题大多出在这里，注意 ECS 需要创建 ssh-key，公钥添加到个人的 github 账号 ssh 配置里。</p><p>进入系统管理，点击凭据 -&gt; 任意一个 System 的超链接 -&gt; 全局凭据 -&gt; 右上角蓝色按钮 Add Credentials</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/jenkins-new-ssh.png" alt="new-credentials" tabindex="0" loading="lazy"><figcaption>new-credentials</figcaption></figure><p>注意粘贴 ECS 上<code>~/.ssh/id_rsa</code>的私钥内容到上图指定位置并保存</p><p>保存完成后，会生成一个名为 github-ssh（这就是上面的 user-name）的凭据，复制这个凭据的 ID</p><p><strong>构建触发器</strong></p><p>基于 github 仓库的触发器基本都是在远程仓库 push 时触发，网上也有很多范例，我的仓库因为是 fork 过来的仓库很稳定就不需要设置触发器了，所以这一步跳过。</p><p><strong>流水线</strong></p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any

    parameters <span class="token punctuation">{</span>
        <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;IMAGE_NAME&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;自定义镜像名称&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Docker image name&#39;</span><span class="token punctuation">)</span>
        <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;CONTAINER_NAME&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;自定义容器名称&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Docker container name&#39;</span><span class="token punctuation">)</span>
        <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;HOST_PORT&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;自定义服务端口号&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Host port to map to container port&#39;</span><span class="token punctuation">)</span>
        <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;CONTAINER_PORT&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;自定义容器端口号&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Container port to map to host port&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    stages <span class="token punctuation">{</span>
        <span class="token comment">// 拉取github仓库代码</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Checkout&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span>
                git credentialsId<span class="token punctuation">:</span> <span class="token string">&#39;上面复制的凭据id&#39;</span><span class="token punctuation">,</span>
                url<span class="token punctuation">:</span> <span class="token string">&#39;github仓库地址&#39;</span><span class="token punctuation">,</span>
                branch<span class="token punctuation">:</span> <span class="token string">&#39;分支名&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 构建docker容器</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Docker Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span>
                script <span class="token punctuation">{</span>
                    dockerImage <span class="token operator">=</span> docker<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>IMAGE_NAME<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 清除非首次部署docker容器，运行容器</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Docker Run&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span>
                script <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        sh <span class="token interpolation-string"><span class="token string">&quot;docker stop </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>CONTAINER_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
                        sh <span class="token interpolation-string"><span class="token string">&quot;docker rm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>CONTAINER_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        echo <span class="token interpolation-string"><span class="token string">&quot;No previous container found&quot;</span></span>
                    <span class="token punctuation">}</span>
                    dockerImage<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;--name </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>CONTAINER_NAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> -p </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>HOST_PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">params<span class="token punctuation">.</span>CONTAINER_PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，点击左侧立即构建开始执行</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/pipeline-run.png" alt="流水线运行" tabindex="0" loading="lazy"><figcaption>流水线运行</figcaption></figure><p>部署成功后，注意设置这个部署端口的<a href="#%E8%AE%BE%E7%BD%AE%E5%AE%89%E5%85%A8%E7%BB%84">安全组</a>，以允许外网访问</p><p>至此，阿里云 ECS 的 CI/CD 就完成了，通过公网 IP+部署端口号即可访问这个服务。为了保密公网 ip，地址栏就不粘贴了</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/ecs/netease-music-visit.png" alt="阿里云音乐API外网访问" tabindex="0" loading="lazy"><figcaption>阿里云音乐API外网访问</figcaption></figure>`,75);function r(k,m){const a=i("ExternalLinkIcon");return t(),c("div",null,[s("p",null,[n("最近有一个 idea，需要部署一个网易云音乐 API 用来提供音乐相关数据的查询，而 github 上正好有一个"),s("a",u,[n("网易云音乐 API"),p(a)]),n("，可以 fork 过来直接发到我自己的阿里云 ECS 上作为个人的公共查询服务，现在就记录一下我从阿里云远程环境初始化、jenkins 安装和建立发布任务，最后完成在线项目发布运行的过程。")]),d])}const g=e(l,[["render",r],["__file","1-node-jenkins.html.vue"]]);export{g as default};
