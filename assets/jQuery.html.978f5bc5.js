import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,d as t}from"./app.67ca6e1b.js";const e={},p=t(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>jQuery 是 Javascript 的 library 库，包含封装好的特定的集合（方法和函数）。</p><p>jQuery 为了快速方便地操作 DOM，里面基本都是函数（方法），封装 JS 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。</p><p>学习 jQuery 本质：学习调用这些函数（方法）。</p><p>优点：</p><ol><li><p>轻量级。核心文件才几十 kb，不影响页面加载速度</p></li><li><p>跨浏览器兼容。基本兼容了现在主流的浏览器</p></li><li><p>链式编程、隐式迭代</p></li><li><p>对事件、样式、动画支持，大大简化了 DOM 操作</p></li><li><p>支持插件扩展开发。有丰富的第三方插件，如树形菜单、日期控件、轮播图等。</p></li></ol><p>6 免费、开源</p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><h3 id="版本" tabindex="-1"><a class="header-anchor" href="#版本" aria-hidden="true">#</a> 版本</h3><p>1.x：兼容 IE 678 等低版本浏览器，不再更新</p><p>2.x：不兼容 IE 678 等低版本浏览器，不再更新</p><p>3.x：不兼容 IE 678 等低版本浏览器，是官方主要更新维护的版本</p><h3 id="入口函数" tabindex="-1"><a class="header-anchor" href="#入口函数" aria-hidden="true">#</a> 入口函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token operator">...</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成封装。</p></li><li><p>相当于原生 JS 中的 DOMContentLoaded。</p></li><li><p>不同于原生 JS 中的 load 事件，是等页面文档、外部 js 文件、css 文件、图片加载完毕才执行代码。</p></li><li><p>更推荐第一种方式。</p></li></ol><h3 id="顶级对象" tabindex="-1"><a class="header-anchor" href="#顶级对象" aria-hidden="true">#</a> 顶级对象 $</h3><p>$是 jQuery 别称，在代码中可使用 jQuery 代替 $。</p><p>$是 jQuery 的顶级对象，相当于原生 JS 的 window。把元素包装成 jQuery 对象就可以使用 jQuery 方法。</p><h3 id="jquery-对象和-dom-对象" tabindex="-1"><a class="header-anchor" href="#jquery-对象和-dom-对象" aria-hidden="true">#</a> jQuery 对象和 DOM 对象</h3><ol><li><p>用原生 JS 获取来的对象就是 DOM 对象。</p></li><li><p>用 jQuery 对象获取的元素就是 jQuery 对象。</p></li><li><p>jQuery 对象本质：利用$对 DOM 对象包装后产生对象（伪数组形式存储）。</p></li></ol><p>DOM 对象和 jQuery 对象可以相互转换。</p><ol><li>DOM→jQuery $(DOM 对象)</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span>	index是索引号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>jQuery→DOM</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>	index是索引号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="常用-api" tabindex="-1"><a class="header-anchor" href="#常用-api" aria-hidden="true">#</a> 常用 API</h2><h3 id="基础选择器" tabindex="-1"><a class="header-anchor" href="#基础选择器" aria-hidden="true">#</a> 基础选择器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;选择器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">用法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">ID 选择器</td><td style="text-align:left;">$(&quot;#id&quot;)</td><td style="text-align:left;">获取指定 ID 的元素</td></tr><tr><td style="text-align:left;">全选选择器</td><td style="text-align:left;">$(&quot;*&quot;)</td><td style="text-align:left;">匹配所有元素</td></tr><tr><td style="text-align:left;">类选择器</td><td style="text-align:left;">$(&quot;.class&quot;)</td><td style="text-align:left;">获取同一类 class 的元素</td></tr><tr><td style="text-align:left;">标签选择器</td><td style="text-align:left;">$(&quot;div&quot;)</td><td style="text-align:left;">获取同一类标签的所有元素</td></tr><tr><td style="text-align:left;">并集选择器</td><td style="text-align:left;">$(&quot;div,p,li&quot;)</td><td style="text-align:left;">选取多个元素</td></tr><tr><td style="text-align:left;">交集选择器</td><td style="text-align:left;">$(&quot;li.current&quot;)</td><td style="text-align:left;">交集元素</td></tr></tbody></table><h3 id="层级选择器" tabindex="-1"><a class="header-anchor" href="#层级选择器" aria-hidden="true">#</a> 层级选择器</h3><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">用法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">子代选择器</td><td style="text-align:left;">$(&quot;ul&gt;li&quot;)</td><td style="text-align:left;">使用&gt;号，获取亲儿子层级元素；注意，并不会获取孙子层级的元素</td></tr><tr><td style="text-align:left;">后代选择器</td><td style="text-align:left;">$(&quot;ul li&quot;)</td><td style="text-align:left;">使用空格，代表后代选择器，获取 ul 下所有的 li 元素，包括孙子等</td></tr></tbody></table><h3 id="隐式迭代-重要" tabindex="-1"><a class="header-anchor" href="#隐式迭代-重要" aria-hidden="true">#</a> 隐式迭代（重要）</h3><p>遍历内部 DOM 元素（伪数组形式存储）的过程叫做隐式迭代。</p><p>给匹配到的元素进行循环遍历，执行相应的方法，不需要再次循环，简化操作方便调用。</p><h3 id="筛选选择器" tabindex="-1"><a class="header-anchor" href="#筛选选择器" aria-hidden="true">#</a> 筛选选择器</h3><table><thead><tr><th style="text-align:left;">语法</th><th style="text-align:left;">用法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">:first</td><td style="text-align:left;">$(&quot;li:first&quot;)</td><td style="text-align:left;">获取第一个 li 元素</td></tr><tr><td style="text-align:left;">:last</td><td style="text-align:left;">$(&quot;li:last&quot;)</td><td style="text-align:left;">获取最后一个 li 元素</td></tr><tr><td style="text-align:left;">:eq(index)</td><td style="text-align:left;">$(&quot;li:eq(2)&quot;)</td><td style="text-align:left;">获取到的 li 元素中，选择索引号为 2 的元素，索引 index 从 0 开始</td></tr><tr><td style="text-align:left;">:odd</td><td style="text-align:left;">$(&quot;li:odd&quot;)</td><td style="text-align:left;">获取到的 li 元素中，选择索引号为奇数的元素</td></tr><tr><td style="text-align:left;">:even</td><td style="text-align:left;">$(&quot;li:even&quot;)</td><td style="text-align:left;">获取到的 li 元素中，选择索引号为偶数的元素</td></tr></tbody></table><h3 id="筛选方法" tabindex="-1"><a class="header-anchor" href="#筛选方法" aria-hidden="true">#</a> 筛选方法</h3><table><thead><tr><th style="text-align:left;">语法</th><th style="text-align:left;">用法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">parent()</td><td style="text-align:left;">$(&quot;li&quot;).parent()</td><td style="text-align:left;">查找父级</td></tr><tr><td style="text-align:left;">children(selector)</td><td style="text-align:left;">$(&quot;ul&quot;).children(&quot;li&quot;)</td><td style="text-align:left;">相当于$(&quot;ul&gt;li&quot;)，最近一级（儿子）</td></tr><tr><td style="text-align:left;">find(selector)</td><td style="text-align:left;">$(&quot;ul&quot;).find(&quot;li&quot;)</td><td style="text-align:left;">相当于$(&quot;ul li&quot;)，后代选择</td></tr><tr><td style="text-align:left;">siblings(selector)</td><td style="text-align:left;">$(&quot;.first&quot;).siblings(&quot;li&quot;)</td><td style="text-align:left;">查找兄弟节点，不包括自己本身</td></tr><tr><td style="text-align:left;">nextAll([expr])</td><td style="text-align:left;">$(&quot;.first&quot;).nextAll()</td><td style="text-align:left;">查找当前元素之后所有的同辈元素</td></tr><tr><td style="text-align:left;">prevAll([expr])</td><td style="text-align:left;">$(&quot;.first&quot;).prevAll()</td><td style="text-align:left;">查找当前元素之前所有的同辈元素</td></tr><tr><td style="text-align:left;">hasClass(class)</td><td style="text-align:left;">$(&quot;div&quot;).hasClass(&quot;protected&quot;)</td><td style="text-align:left;">检查当前的元素是否含有某个特定类，如果有则返回 true</td></tr><tr><td style="text-align:left;">eq(index)</td><td style="text-align:left;">$(&quot;li&quot;).eq(2)</td><td style="text-align:left;">相当于$(&quot;li:eq(2)&quot;)，index 从 0 开始</td></tr></tbody></table><h3 id="排他思想" tabindex="-1"><a class="header-anchor" href="#排他思想" aria-hidden="true">#</a> 排他思想</h3><ol><li><p>隐式迭代，所有按钮统一绑定事件统一赋予属性。</p></li><li><p>this 元素改变。</p></li><li><p>其余兄弟元素 this.siblings() 去掉背景颜色</p></li><li><p>链式编程（节省代码量，优雅）</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="样式操作" tabindex="-1"><a class="header-anchor" href="#样式操作" aria-hidden="true">#</a> 样式操作</h2><h3 id="操作-css-方法" tabindex="-1"><a class="header-anchor" href="#操作-css-方法" aria-hidden="true">#</a> 操作 CSS 方法</h3><p>jQuery 可以使用 css 方法来修改简单元素样式；也可以操作类，修改多个样式。</p><h4 id="只写-属性名-返回属性值" tabindex="-1"><a class="header-anchor" href="#只写-属性名-返回属性值" aria-hidden="true">#</a> 只写 属性名，返回属性值</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="参数是-属性名-属性值-逗号分隔" tabindex="-1"><a class="header-anchor" href="#参数是-属性名-属性值-逗号分隔" aria-hidden="true">#</a> 参数是 属性名，属性值，逗号分隔</h4><p>设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="参数可以是对象形式" tabindex="-1"><a class="header-anchor" href="#参数可以是对象形式" aria-hidden="true">#</a> 参数可以是对象形式</h4><p>方便设置多组样式。属性名和属性值用冒号隔开，<strong>属性可以不用加引号</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;white&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;font-size&quot;</span><span class="token operator">:</span> <span class="token string">&quot;20px&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：如果是复合属性需要采用驼峰命名法书写。</p><h3 id="设置类样式方法" tabindex="-1"><a class="header-anchor" href="#设置类样式方法" aria-hidden="true">#</a> 设置类样式方法</h3><p>作用等同于以前的 classList，可以操作类样式，主要操作类里面的参数不要加点。</p><h4 id="添加类" tabindex="-1"><a class="header-anchor" href="#添加类" aria-hidden="true">#</a> 添加类</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;current&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除类" tabindex="-1"><a class="header-anchor" href="#删除类" aria-hidden="true">#</a> 删除类</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">&quot;current&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="切换类" tabindex="-1"><a class="header-anchor" href="#切换类" aria-hidden="true">#</a> 切换类</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">&quot;current&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类操作与-classname-区别" tabindex="-1"><a class="header-anchor" href="#类操作与-classname-区别" aria-hidden="true">#</a> 类操作与 className 区别</h3><p>原生 JS 中 className 会覆盖元素原先类名。</p><p>jQuery 只对指定类进行操作，不影响原先的类名。</p><h2 id="动画效果" tabindex="-1"><a class="header-anchor" href="#动画效果" aria-hidden="true">#</a> 动画效果</h2><h3 id="显示隐藏" tabindex="-1"><a class="header-anchor" href="#显示隐藏" aria-hidden="true">#</a> 显示隐藏</h3><p>1.语法规范</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.显示参数</p><ul><li><p>参数都可以省略，无动画则直接显示。</p></li><li><p>speed：三种预定速度之一的字符串（&quot;slow&quot; &quot;normal&quot; or &quot;fast&quot;）或表示动画时长的毫秒数值（如：1000）。</p></li><li><p>easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。</p></li><li><p>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</p></li></ul><h3 id="滑动效果" tabindex="-1"><a class="header-anchor" href="#滑动效果" aria-hidden="true">#</a> 滑动效果</h3><p>1.语法规范</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">slidedown</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">slideup</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">slidetoggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.切换效果参数</p><ul><li><p>参数都可以省略。</p></li><li><p>speed：三种预定速度之一的字符串（&quot;slow&quot; &quot;normal&quot; or &quot;fast&quot;）或表示动画时长的毫秒数值（如：1000）。</p></li><li><p>easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。</p></li><li><p>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</p></li></ul><h3 id="事件切换" tabindex="-1"><a class="header-anchor" href="#事件切换" aria-hidden="true">#</a> 事件切换</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">hover</span><span class="token punctuation">(</span><span class="token punctuation">[</span>over<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>事件切换就是鼠标经过和离开的复合写法。</p><ul><li><p>over：鼠标移到元素上要触发的函数（相当于 mouseenter）</p></li><li><p>out：鼠标移出元素要出发的函数（相当于 mouseleave）</p></li><li><p>如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数。</p></li></ul><h3 id="动画队列及停止" tabindex="-1"><a class="header-anchor" href="#动画队列及停止" aria-hidden="true">#</a> 动画队列及停止</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>stop()方法用于停止动画效果。</p></li><li><p>注意：stop()写到动画或者效果前面，相当于停止结束上一次的动画。</p></li></ul><h3 id="淡入淡出效果" tabindex="-1"><a class="header-anchor" href="#淡入淡出效果" aria-hidden="true">#</a> 淡入淡出效果</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span>spped<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">[</span>spped<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">faddToggle</span><span class="token punctuation">(</span><span class="token punctuation">[</span>spped<span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>参数都可以省略。</p></li><li><p>speed：三种预定速度之一的字符串（&quot;slow&quot; &quot;normal&quot; or &quot;fast&quot;）或表示动画时长的毫秒数值（如：1000）。</p></li><li><p>easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。</p></li><li><p>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">faddTo</span><span class="token punctuation">(</span><span class="token punctuation">[</span>spped<span class="token punctuation">]</span><span class="token punctuation">,</span>opacity<span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>opacity 透明度必须写，取值 0-1 之间。</p></li><li><p>speed：种预定速度之一的字符串（&quot;slow&quot; &quot;normal&quot; or &quot;fast&quot;）或表示动画时长的毫秒数值（如：1000）。必须写。</p></li><li><p>easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。</p></li><li><p>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</p></li></ul><h3 id="自定义动画-animate" tabindex="-1"><a class="header-anchor" href="#自定义动画-animate" aria-hidden="true">#</a> 自定义动画 animate</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">animate</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>params：想要更改的样式属性，以<strong>对象</strong>形式传递，必须写。属性名可以不带引号，如果是复合属性则需要采取驼峰命名法 borderLeft。其余参数都可以省略。</p></li><li><p>speed：三种预定速度之一的字符串（&quot;slow&quot; &quot;normal&quot; or &quot;fast&quot;）或表示动画时长的毫秒数值（如：1000）。</p></li><li><p>easing：（Optional）用来指定切换效果，默认是“swing”，可用参数“linear”。</p></li><li><p>fn：回调函数，在动画完成时执行的函数，每个元素执行一次。</p></li></ul><h2 id="属性操作" tabindex="-1"><a class="header-anchor" href="#属性操作" aria-hidden="true">#</a> 属性操作</h2><h3 id="prop" tabindex="-1"><a class="header-anchor" href="#prop" aria-hidden="true">#</a> prop()</h3><p>获取：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&quot;属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&quot;属性&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;属性值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="attr" tabindex="-1"><a class="header-anchor" href="#attr" aria-hidden="true">#</a> attr()</h3><p>可获取自定义属性</p><p>获取：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//类似于原生getAttribute()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;属性&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;属性值&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//类似于原生setAttribute()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据缓存-data" tabindex="-1"><a class="header-anchor" href="#数据缓存-data" aria-hidden="true">#</a> 数据缓存 data()</h3><p>data()方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据全部清除。</p><p>获取：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时也可以读取 H5 自定义属性 data-index，得到的是 Number</p><h3 id="checked-选择器" tabindex="-1"><a class="header-anchor" href="#checked-选择器" aria-hidden="true">#</a> :checked 选择器</h3><p>查找被选中的表单元素</p><h2 id="内容文本值" tabindex="-1"><a class="header-anchor" href="#内容文本值" aria-hidden="true">#</a> 内容文本值</h2><h3 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> html()</h3><p>相当于原生 innerHTML</p><p>html() //获取元素内容</p><p>html(&quot;内容&quot;) //设置元素的内容</p><h3 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> text()</h3><p>相当于原生 inner Text</p><p>text() //获取文本内容</p><p>text(&quot;内容&quot;) //设置文本内容</p><h3 id="val" tabindex="-1"><a class="header-anchor" href="#val" aria-hidden="true">#</a> val()</h3><p>相当于原生 value</p><p>val() //获取表单值</p><p>val(&quot;内容&quot;) //设置表单值</p><h2 id="元素操作" tabindex="-1"><a class="header-anchor" href="#元素操作" aria-hidden="true">#</a> 元素操作</h2><h3 id="遍历元素" tabindex="-1"><a class="header-anchor" href="#遍历元素" aria-hidden="true">#</a> 遍历元素</h3><p>隐式迭代默认对同一类元素做了同样操作，如果需要设置不同操作，需要遍历。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> domEle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>index：每个元素的索引号；domEle：每个 DOM 元素对象，不是 jQuery 对象。</p><p>要想使用 jQuery 方法，需要转换：$(domEle)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>$.each()方法可用于遍历任何对象。主要用于数据处理，比如数组、对象。</p></li><li><p>里面的函数有 2 个参数：index 是索引号；element 遍历内容</p></li><li><p>功能比较强大，可以遍历数组、对象。</p></li></ol><h3 id="创建元素" tabindex="-1"><a class="header-anchor" href="#创建元素" aria-hidden="true">#</a> 创建元素</h3><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="添加元素" tabindex="-1"><a class="header-anchor" href="#添加元素" aria-hidden="true">#</a> 添加元素</h3><ol><li>内部添加</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似于原生 appendChild</p><ol start="2"><li>外部添加</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">&quot;内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把内容放入目标元素后面</span>
element<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&quot;内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把内容放入目标元素前面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>内部添加元素，生成之后，它们是父子关系。</p></li><li><p>外部添加元素，生成之后，它们是兄弟关系。</p></li></ul><h3 id="删除元素" tabindex="-1"><a class="header-anchor" href="#删除元素" aria-hidden="true">#</a> 删除元素</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除匹配元素自身</span>
element<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除匹配元素集合中的所有子节点</span>
element<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清空匹配的元素内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二行和第三行都为清空，效果相同。</p><h2 id="尺寸位置操作" tabindex="-1"><a class="header-anchor" href="#尺寸位置操作" aria-hidden="true">#</a> 尺寸位置操作</h2><h3 id="尺寸操作" tabindex="-1"><a class="header-anchor" href="#尺寸操作" aria-hidden="true">#</a> 尺寸操作</h3><table><thead><tr><th style="text-align:left;">语法</th><th style="text-align:left;">用法</th></tr></thead><tbody><tr><td style="text-align:left;">width() / height()</td><td style="text-align:left;">取得匹配元素宽度和高度值，只算 width / height</td></tr><tr><td style="text-align:left;">innerWidth() / innerHeight()</td><td style="text-align:left;">取得匹配元素宽度和高度值 包含 padding</td></tr><tr><td style="text-align:left;">outerWidth() / outerHeight()</td><td style="text-align:left;">取得匹配元素宽度和高度值 包含 padding、border</td></tr><tr><td style="text-align:left;">outerWidth(true) / outerHeight(true)</td><td style="text-align:left;">取得匹配元素宽度和高度值 包含 padding border margin</td></tr></tbody></table><h3 id="位置操作" tabindex="-1"><a class="header-anchor" href="#位置操作" aria-hidden="true">#</a> 位置操作</h3><ol><li>offset() 设置或获取元素偏移</li></ol><ul><li><p>返回被选元素相对于文档的偏移坐标，跟父级无关。</p></li><li><p>offset().left offset().top</p></li><li><p>可设置元素偏移 offset({top:10 , left: 30 });</p></li></ul><ol start="2"><li>position() 获取距离带有定位父级位置的偏移</li></ol><ul><li><p>如果没有定位父级，以文档为准</p></li><li><p>可读不可写</p></li></ul><ol start="3"><li>scrollTop()/scrollLeft() 设置或获取被卷去头部或左侧</li></ol><ul><li><p>scrollTop()设置或返回被选元素被卷去头部。</p></li><li><p>页面滚动条滚动长度 $(document).scrollTop()。</p></li></ul><h2 id="事件操作" tabindex="-1"><a class="header-anchor" href="#事件操作" aria-hidden="true">#</a> 事件操作</h2><h3 id="事件注册" tabindex="-1"><a class="header-anchor" href="#事件注册" aria-hidden="true">#</a> 事件注册</h3><p>单个事件注册</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">事件</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其他事件和原生基本一致。</p><h3 id="事件处理-on" tabindex="-1"><a class="header-anchor" href="#事件处理-on" aria-hidden="true">#</a> 事件处理 on</h3><p>on()方法在匹配元素上绑定一个或多个事件的函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>events：一个或多个用空格分隔的事件类型。</p></li><li><p>selector：元素的子元素选择器。</p></li><li><p>fn：回调函数。</p></li></ul><p>优势 1：可以绑定多个事件，多个处理程序</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">mouseover</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">mouseout</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果处理程序相同</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;mouseover mouseout&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">&quot;current&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优势 2：</p><p>事件委派。子元素绑定事件可委派给父元素，把原来加给子元素身上的事件绑定在父元素身上，当父元素内部的子元素满足触发条件时再触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此之前有 bind()，live()，delegate()等方法来处理事件绑定或事件委派，最新版本用 on。</p><p>优势 3：</p><p>动态创建的元素，click()没有办法绑定事件，on()可以给动态生成的元素绑定事件。</p><h3 id="事件处理-off" tabindex="-1"><a class="header-anchor" href="#事件处理-off" aria-hidden="true">#</a> 事件处理 off</h3><p>off()方法可以移除通过 on()方法添加的事件处理程序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解绑p元素所有事件处理程序</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解绑p元素上面的点击事件</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解绑事件委托</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有的事件只想触发一次，可以使用 one()来绑定事件。</p><h3 id="自动触发事件" tabindex="-1"><a class="header-anchor" href="#自动触发事件" aria-hidden="true">#</a> 自动触发事件</h3><p>有些事件希望自动触发，比如轮播图自动播放跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第一种简写</span>

element<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第二种自动触发模式</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

element<span class="token punctuation">.</span><span class="token function">triggerHandler</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第三种自动触发模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三种自动触发模式不会触发元素默认行为</p><p>例如不会触发 input 光标焦点闪烁事件</p><h3 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象" aria-hidden="true">#</a> 事件对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>阻止默认行为：event.preventDefault() return false</p><p>阻止冒泡：event.stopPropagation()</p><h2 id="对象拷贝" tabindex="-1"><a class="header-anchor" href="#对象拷贝" aria-hidden="true">#</a> 对象拷贝</h2><p>将对象拷贝（合并）给另外一个对象使用，此时可以使用$.extend()方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> object1<span class="token punctuation">,</span> <span class="token punctuation">[</span>objectN<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><p>deep：true 深拷贝；false 默认 浅拷贝。</p></li><li><p>target：要拷贝的目标对象。</p></li><li><p>object1：待拷贝到第一个对象的对象。</p></li><li><p>ObjectN：待拷贝的第 N 个对象的对象。</p></li><li><p>浅拷贝：把被拷贝对象复杂数据类型的地址拷给目标对象，修改目标对象会影响被拷贝对象。冲突属性会覆盖掉。</p></li><li><p>深拷贝：前面加 true，完全克隆（拷贝对象而不是地址），修改目标不会影响被拷贝对象。不冲突属性会合并。</p></li></ol><h2 id="多库共存" tabindex="-1"><a class="header-anchor" href="#多库共存" aria-hidden="true">#</a> 多库共存</h2><p>jQuery 使用<code>$</code> 作为标识符，其他 js 也会用$()作为标识符，这样一起使用会冲突。</p><p>需求：需要一个解决方案，让 jQuery 和其他的 js 库不冲突，可以同时存在。</p><p>解决方案：</p><ol><li><p>把里面的$符号统一改为 jQuery。例如 jQuery(&quot;div&quot;)</p></li><li><p>jQuery 变量规定新名称：$.noConflict() var xx = $.noConflict();</p></li></ol><h2 id="插件封装" tabindex="-1"><a class="header-anchor" href="#插件封装" aria-hidden="true">#</a> 插件封装</h2><h3 id="局部封装" tabindex="-1"><a class="header-anchor" href="#局部封装" aria-hidden="true">#</a> 局部封装</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xxxxx<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装完成后，fun 即为对象方法。</p><h3 id="全局封装" tabindex="-1"><a class="header-anchor" href="#全局封装" aria-hidden="true">#</a> 全局封装</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xxxxx<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装完成后，$.fun 即为全局方法。</p>`,204),i=[p];function o(c,l){return a(),s("div",null,i)}const r=n(e,[["render",o],["__file","jQuery.html.vue"]]);export{r as default};
