import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as p,a as s}from"./app.06577971.js";const e={},o=s(`<h2 id="模块化定义" tabindex="-1"><a class="header-anchor" href="#模块化定义" aria-hidden="true">#</a> 模块化定义</h2><p>事实上模块化开发最终目的是将程序划分成一个个小的结构；</p><p>这个结构中编写属于自己的编辑代码，有自己的作用域，不会影响到其他的结构；</p><p>这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用；</p><p>也可以通过某种方式，导入另外结构中的变量、函数、对象等。</p><h2 id="cjs" tabindex="-1"><a class="header-anchor" href="#cjs" aria-hidden="true">#</a> CJS</h2><p>Node 是 CommonJS 在服务器端一个具有代表性的实现</p><p>Browserify 是 CommonJS 在浏览器中的一种实现；</p><p>webpack 打包工具具备对 CommonJS 的支持和转换。</p><p>Node 中对 CommonJS 进行了支持和实现，让我们在开发 Node 的过程中可以方便的进行模块化开发：</p><p>在 Node 中每一个 js 文件都是一个单独的模块；</p><p>这个模块中包括 CommonJS 规范的核心变量：exports、module.exports、require；</p><p>我们我已使用这些变量方便的进行模块化开发。</p><p>前面我们提到过模块化的核心是导出和导入，Node 中对其进行了实现：</p><p>exports 和 module.exports 可以负责对模块中的内容进行导出；</p><p>require 函数可以帮助我们导入其他模块（自定义模块、系统模块、第三方库模块）中的内容；</p><h3 id="exports" tabindex="-1"><a class="header-anchor" href="#exports" aria-hidden="true">#</a> exports</h3><p>本质：浅拷贝</p><p>与 module.exports 的区别</p><p>Node 中使用的是 Module 的类，每一个模块都是 Module 的一个实例，也就是 module</p><p>在 Node 中真正用于导出的其实根本不是 exports，而是 module.exports，module 才是导出的真正实现者</p><p>但是，因为 module 对象的 exports 属性是 exports 对象的一个引用，所以 exports 也可以导出。</p><h3 id="require" tabindex="-1"><a class="header-anchor" href="#require" aria-hidden="true">#</a> require</h3><p>查找规则 require(X)</p><ol><li><p>X 是一个核心模块，直接返回核心模块，并且停止查找</p></li><li><p>X 是以 ./ ../ / 开头的：</p></li></ol><p>第一步：将 X 当做一个文件在对应的目录下查找（js json node）</p><p>第二步：没有找到对应的文件，将 X 作为一个目录，查找目录下面的 index 文件（js json node）</p><p>如果没有找到报错 not found</p><ol start="3"><li>直接是一个 X（没有路径），并且 X 不是一个核心模块</li></ol><p>报错 not found</p><h3 id="模块加载顺序" tabindex="-1"><a class="header-anchor" href="#模块加载顺序" aria-hidden="true">#</a> 模块加载顺序</h3><p>结论一：模块在被第一次引入时，模块中的 js 代码会被运行一次</p><p>结论二：模块被多次引入时，会缓存，最终只加载（运行）一次</p><p>结论三：如果有循环引入，那么加载顺序是什么</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/02-模块化/image-20211009142557767.png" alt="加载顺序示例" loading="lazy"></p><p>如果出现上图模块的引用关系，图结构在遍历的过程中，有深度优先搜索（DFS）和广度优先搜索（BFS）</p><p>Node 采用的是深度优先算法：main -&gt; aaa -&gt; ccc -&gt; ddd -&gt; eee -&gt;bbb</p><ul><li><p>CommonJS 加载模块是同步的</p></li><li><p>浏览器加载 js 文件需要先从服务器将文件下载下来，之后在加载运行，那么采用同步的就意味着后续的 js 代码都无法正常运行，即使是一些简单的 DOM 操作</p></li><li><p>所以在浏览器中，我们通常不使用 CommonJS 规范，当然在 webpack 中使用 CommonJS 是另外一回事</p></li><li><p>在早期为了可以在浏览器中使用模块化，通常会采用 AMD 或 CMD，但是目前一方面现代的浏览器已经支持 ES Modules，另一方面借助于 webpack 等工具可以实现对 CommonJS 或者 ES Module 代码的转换</p></li></ul><h2 id="es-module" tabindex="-1"><a class="header-anchor" href="#es-module" aria-hidden="true">#</a> ES Module</h2><ul><li>ES Module 和 CommonJS 的模块化有一些不同之处：</li></ul><p>一方面它使用了 import 和 export 关键字；</p><p>另一方面它采用编译期的静态分析，并且也加入了动态引用的方式；</p><ul><li>ES Module 模块采用 export 和 import 关键字来实现模块化：</li></ul><p>export 负责将模块内的内容导出；</p><p>import 负责从其他模块导入内容；</p><ul><li>采用 ES Module 将自动采用严格模式：use strict</li></ul><h3 id="export-关键字" tabindex="-1"><a class="header-anchor" href="#export-关键字" aria-hidden="true">#</a> export 关键字</h3><p>导出方法一：在语句声明的前面直接加上 export 关键字</p><p>导出方法二：将所有需要导出的标识符，放到 export 后面的 {}中</p><p>注意：这里的 {}里面不是 ES6 的对象字面量的增强写法，{}也不是表示一个对象的；</p><p>所以： export {name: name}，是错误的写法；</p><p>导出方法三：导出时给标识符起一个别名</p><h3 id="import-关键字" tabindex="-1"><a class="header-anchor" href="#import-关键字" aria-hidden="true">#</a> import 关键字</h3><p>导入方法一：import {标识符列表} from &#39;模块&#39;；</p><p>注意：这里的{}也不是一个对象，里面只是存放导入的标识符列表内容；</p><p>导入方式二：导入时给标识符起别名</p><p>导入方式三：通过 * 将模块功能放到一个模块功能对象（a module object）上</p><h3 id="export-和-import-结合使用" tabindex="-1"><a class="header-anchor" href="#export-和-import-结合使用" aria-hidden="true">#</a> export 和 import 结合使用</h3><p>export { sum as barSum } from &#39;./bar.js&#39;;</p><p>在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中；</p><p>这样方便指定统一的接口规范，也方便阅读；</p><p>这个时候，我们就可以使用 export 和 import 结合使用。</p><h3 id="default" tabindex="-1"><a class="header-anchor" href="#default" aria-hidden="true">#</a> default</h3><p>默认导出 export 时可以不需要指定名字；</p><p>在导入时不需要使用 {}，并且可以自己来指定名字；</p><p>它也方便我们和现有的 CommonJS 等规范相互操作；</p><p>在一个模块中，只能有一个默认导出（default export）。</p><h3 id="import-函数" tabindex="-1"><a class="header-anchor" href="#import-函数" aria-hidden="true">#</a> import 函数</h3><p>通过 import 加载一个模块，是不可以在其放到逻辑代码中的；</p><p>因为 ES Module 在被 JS 引擎解析时，就必须知道它的依赖关系；</p><p>由于这个时候 js 代码没有任何的运行，所以无法在进行类似于 if 判断中根据代码的执行情况；</p><p>但是某些情况下，我们确确实实希望动态的来加载某一个模块这个时候我们需要使用 import() 函数来动态加载。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// import返回值：promise对象</span>
<span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./modules/aaa.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">aaa</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    aaa<span class="token punctuation">.</span><span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./modules/bbb.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">bbb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    bbb<span class="token punctuation">.</span><span class="token function">bbb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="加载过程" tabindex="-1"><a class="header-anchor" href="#加载过程" aria-hidden="true">#</a> 加载过程</h2><h3 id="cjs-加载过程-同步" tabindex="-1"><a class="header-anchor" href="#cjs-加载过程-同步" aria-hidden="true">#</a> CJS 加载过程（同步）</h3><p>运行时加载：js 引擎在执行 js 代码的过程中加载模块</p><p>同步：一个文件没有加载结束之前，后面的代码都不会执行</p><p>导出对象：可以将这个对象的引用在其他模块中赋值给其他变量，最终它们指向的都是同一个对象，一个变量修改了对象的属性，所有的地方都会被修改</p><h3 id="esm-加载过程-异步" tabindex="-1"><a class="header-anchor" href="#esm-加载过程-异步" aria-hidden="true">#</a> ESM 加载过程（异步）</h3><p>编译时（解析时）加载：import 不能和运行时相关的内容放在一起使用；比如 from 后面的路径需要动态获取，比如不能将 import 放到 if 等语句的代码块中，所以我们有时候也称 ES Module 是静态解析的，而不是动态或者运行时解析的</p><p>异步：JS 引擎在遇到 import 时会去获取这个 js 文件，但是这个获取的过程是异步的，并不会阻塞主线程继续执行；也就是说设置了 type=module 的代码，相当于在 script 标签上也加上了 async 属性；如果我们后面有普通的 script 标签以及对应的代码，那么 ES Module 对应的 js 文件和代码不会阻塞它们的执行</p><p>导出变量的引用：ES Module 通过 export 导出的是变量本身的引用</p><ul><li><p>export 在导出一个变量时，js 引擎会解析这个语法，并且创建模块环境记录（module environment record）</p></li><li><p>模块环境记录会和变量进行 绑定（binding），并且这个绑定是实时的</p></li><li><p>在导入的地方，我们是可以实时的获取到绑定的最新值的；所以，如果在导出的模块中修改了变化，那么导入的地方可以实时获取最新的变量；但是，在导入的地方不可以修改变量，因为它只是被绑定到了这个变量上（其实是一个常量）</p></li></ul><h2 id="node-对-esm-的支持" tabindex="-1"><a class="header-anchor" href="#node-对-esm-的支持" aria-hidden="true">#</a> Node 对 ESM 的支持</h2><p>方式一：在 package.json 中配置 type: module</p><p>方式二：文件以 .mjs 结尾，表示使用的是 ES Module</p><h2 id="cjs-和-esm-交互" tabindex="-1"><a class="header-anchor" href="#cjs-和-esm-交互" aria-hidden="true">#</a> CJS 和 ESM 交互</h2><ul><li>通常情况下，CommonJS 不能加载 ES Module</li></ul><p>因为 CommonJS 是同步加载的，但是 ES Module 必须经过静态分析等，无法在这个时候执行 JavaScript 代码；</p><p>但是这个并非绝对的，某些平台在实现的时候可以对代码进行针对性的解析，也可能会支持</p><p>Node 当中是不支持的</p><ul><li>多数情况下，ES Module 可以加载 CommonJS</li></ul><p>ES Module 在加载 CommonJS 时，会将其 module.exports 导出的内容作为 default 导出方式来使用；</p><p>这个依然需要看具体的实现，比如 webpack 中是支持的、Node 最新的 Current 版本也是支持的；</p><p>但是在最新的 LTS 版本中就不支持。</p>`,95),t=[o];function i(r,l){return n(),p("div",null,t)}const u=a(e,[["render",i],["__file","模块化.html.vue"]]);export{u as default};
