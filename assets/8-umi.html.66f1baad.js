import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as k,c as v,e as t,w as a,a as n,b as s,d as c,r as l}from"./app.67ca6e1b.js";const m={},b=c('<p>Umi 是由蚂蚁集团推出的一款主要面向 React 的底层前端框架，有很多有意思的特性：</p><ol><li>企业级，在安全性、稳定性、最佳实践、约束能力方面会考虑更多</li><li>插件化，啥都能改，Umi 本身也是由插件构成</li><li>MFSU，<strong>比 Vite 还快的 Webpack 打包方案</strong></li><li>基于 React Router 6 的完备路由</li><li>默认最快的请求</li><li>SSR &amp; SSG</li><li>稳定白盒性能好的 ESLint 和 Jest</li><li>React 18 的框架级接入</li><li>Monorepo 最佳实践</li></ol><p>Umi 主要依靠 Webpack 实现高度封装与集成，因此关于构建优化的内容可以参照<a href="./5-vuecli#%E6%9E%84%E5%BB%BA%E4%BC%98%E5%8C%96">VueCli 构建优化</a></p><h2 id="安装与创建" tabindex="-1"><a class="header-anchor" href="#安装与创建" aria-hidden="true">#</a> 安装与创建</h2><h3 id="安装包" tabindex="-1"><a class="header-anchor" href="#安装包" aria-hidden="true">#</a> 安装包</h3>',5),g=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"npm"),s(),n("span",{class:"token function"},"install"),s(),n("span",{class:"token parameter variable"},"-g"),s(` create-umi
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"yarn"),s(),n("span",{class:"token function"},"install"),s(),n("span",{class:"token parameter variable"},"-g"),s(` create-umi
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"pnpm"),s(),n("span",{class:"token function"},"install"),s(),n("span",{class:"token parameter variable"},"-g"),s(` create-umi
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),f=n("h3",{id:"创建新项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建新项目","aria-hidden":"true"},"#"),s(" 创建新项目")],-1),x=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,`npx create-umi@latest umi-demo
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"yarn"),s(` create umi umi-demo
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"pnpm"),s(` dlx create-umi@latest umi-demo
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_=c(`<p>这里我们选择<code>Ant Design pro</code>，以获得完整的项目结构</p><p>国内建议选 pnpm + taobao 源，速度提升明显。这一步会自动安装依赖，同时安装成功后会自动执行 umi setup 做一些文件预处理等工作</p><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><p>这是 Umi 官方约定（推荐）的目录结构，开发时需按约定组织代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── config
│   └── config.ts
├── dist
├── mock
│   └── app.ts｜tsx
├── src
│   ├── .umi
│   ├── .umi-production
│   ├── layouts
│   │   ├── BasicLayout.tsx
│   │   ├── index.less
│   ├── models
│   │   ├── global.ts
│   │   └── index.ts
│   ├── pages
│   │   ├── index.less
│   │   └── index.tsx
│   ├── utils // 推荐目录
│   │   └── index.ts
│   ├── services // 推荐目录
│   │   └── api.ts
│   ├── app.<span class="token punctuation">(</span>ts<span class="token operator">|</span>tsx<span class="token punctuation">)</span>
│   ├── global.ts
│   ├── global.<span class="token punctuation">(</span>css<span class="token operator">|</span><span class="token function">less</span><span class="token operator">|</span>sass<span class="token operator">|</span>scss<span class="token punctuation">)</span>
│   ├── overrides.<span class="token punctuation">(</span>css<span class="token operator">|</span><span class="token function">less</span><span class="token operator">|</span>sass<span class="token operator">|</span>scss<span class="token punctuation">)</span>
│   ├── favicon.<span class="token punctuation">(</span>ico<span class="token operator">|</span>gif<span class="token operator">|</span>png<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>svg<span class="token operator">|</span>avif<span class="token operator">|</span>webp<span class="token punctuation">)</span>
│   └── loading.<span class="token punctuation">(</span>tsx<span class="token operator">|</span>jsx<span class="token punctuation">)</span>
├── node_modules
│   └── .cache
│       ├── bundler-webpack
│       ├── mfsu
│       └── mfsu-deps
├── .env
├── plugin.ts
├── .umirc.ts // 与 config/config 文件 <span class="token number">2</span> 选一
├── package.json
├── tsconfig.json
└── typings.d.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍一些重要目录与文件</p><h3 id="umirc-ts" tabindex="-1"><a class="header-anchor" href="#umirc-ts" aria-hidden="true">#</a> .umirc.ts</h3><p>与 <code>config/config.ts</code> 文件功能相同，2 选 1 。<code>.umirc.ts</code> 文件优先级较高</p><p>配置文件，包含 Umi 所有非运行时配置（运行时配置一般定义于 app.ts）。</p><p>若你需要在不同环境中加载不同配置，这在 Umi 中是根据 UMI_ENV 来实现的，一个不同环境启动的例子</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;umi dev&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dev:pre&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env UMI_ENV=pre umi dev&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mock" tabindex="-1"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> mock</h3><p>存放 mock 文件，此目录下所有 <code>.ts / .js</code> 文件会被 mock 服务加载，从而提供模拟数据</p><h3 id="public" tabindex="-1"><a class="header-anchor" href="#public" aria-hidden="true">#</a> public</h3><p>存放固定的静态资源，如存放 public/image.png ，则开发时可以通过 <strong>/image.png</strong> 访问到，构建后会被拷贝到输出文件夹</p><p>注意：<code>/</code>开头表示 public 的绝对路径；<code>.</code>开头表示当前文件的相对路径</p><p>对于 svg 资源，Umi 支持 svgr ，可以直接导入作为组件使用：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> SmileUrl<span class="token punctuation">,</span> <span class="token punctuation">{</span> ReactComponent <span class="token keyword">as</span> SvgSmile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./smile.svg&quot;</span><span class="token punctuation">;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SvgSmile</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> imgUrl <span class="token keyword">from</span> <span class="token string">&quot;./image.png&quot;</span><span class="token punctuation">;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>imgUrl<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="src" tabindex="-1"><a class="header-anchor" href="#src" aria-hidden="true">#</a> src</h3><h4 id="umi" tabindex="-1"><a class="header-anchor" href="#umi" aria-hidden="true">#</a> .umi</h4><p>不要提交 .umi 临时文件到 git 仓库，默认已在 .gitignore 被忽略</p><p>dev 时的临时文件目录，比如入口文件、路由等，都会被临时生成到这里</p><h4 id="umi-production" tabindex="-1"><a class="header-anchor" href="#umi-production" aria-hidden="true">#</a> .umi-production</h4><p>不要提交 .umi-production 临时文件到 git 仓库，默认已在 .gitignore 被忽略</p><p>build 时的临时文件目录，比如入口文件、路由等，都会被临时生成到这里</p><h4 id="app-ts" tabindex="-1"><a class="header-anchor" href="#app-ts" aria-hidden="true">#</a> app.ts</h4><p>运行时配置 文件，可以在这里扩展运行时的能力，比如修改路由、修改 render 方法等</p><p>运行时配置带来的逻辑会在浏览器中运行，因此当有远程配置、动态内容时，这些我们在本地开发时还不确定，不能写死，所以需要在浏览器实际运行项目时动态获取他们</p><p>适合场景：角色鉴权、动态添加路由等</p><h4 id="layouts-index-tsx" tabindex="-1"><a class="header-anchor" href="#layouts-index-tsx" aria-hidden="true">#</a> layouts/index.tsx</h4><p>公共组件布局，新建组件后，会默认渗透到每一级 pages 组件作为它们的公共组件。注意需要添加<code>&lt;Outlet&gt;</code>渲染嵌套路由</p><p>当你需要关闭 layout 时可以使用 layout: false ，当你需要更多层 layout 时，可以考虑使用 wrappers ，仅在配置式路由可用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;./index&quot;</span><span class="token punctuation">,</span> layout<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> <span class="token string">&quot;./users&quot;</span><span class="token punctuation">,</span>
    wrappers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@/wrappers/auth&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pages" tabindex="-1"><a class="header-anchor" href="#pages" aria-hidden="true">#</a> pages</h4><p>约定式路由默认以 pages/* 文件夹的文件层级结构来生成路由表。</p><p>在配置式路由中，component 若写为相对路径，将从该文件夹为起点开始寻找文件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token comment">// \`./index\` === \`@/pages/index\`</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;./index&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>基础路由</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+ pages/
  + users/
    - index.tsx
  - index.tsx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的自动生成路由：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/index.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/users/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/users/index.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>动态路由</li></ol><p>这里的动态路由指的是 url 中携带 params 参数的路由</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+ pages/
  + foo/
    - <span class="token variable">$slug</span>.tsx
  + <span class="token variable">$bar</span>/
    - $.tsx
  - index.tsx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会生成路由配置如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/index.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/foo/:slug&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/foo/$slug.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/:bar/*&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/$bar/$.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>404</li></ol><p>编写路径须是<code>pages/404.tsx</code></p><p>结构约定式路由自动注册 404 兜底。配置式路由需要手动配置兜底</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token comment">// other routes ...</span>
  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/*&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;@/pages/404.tsx&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="global-ts" tabindex="-1"><a class="header-anchor" href="#global-ts" aria-hidden="true">#</a> global.ts</h4><p>全局前置脚本文件。与 App.ts 的区别在于：</p><p>global.ts 为应用前置、全局运行；App.ts 是对全局 Context、应用运行时做修改</p><h4 id="global-less" tabindex="-1"><a class="header-anchor" href="#global-less" aria-hidden="true">#</a> global.less</h4><p>全局样式文件</p><h4 id="overrides-less" tabindex="-1"><a class="header-anchor" href="#overrides-less" aria-hidden="true">#</a> overrides.less</h4><p>高优先级的全局样式文件，用于覆盖第三方库样式</p><h4 id="loading-tsx" tabindex="-1"><a class="header-anchor" href="#loading-tsx" aria-hidden="true">#</a> loading.tsx</h4><p>全局加载组件</p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Webpack/umi-lifecycle.png" alt="Umi生命周期" loading="lazy"></p><ul><li>init stage: 该阶段 Umi 将加载各类配置信息。包括：加载 .env 文件； require package.json ；加载用户的配置信息； resolve 所有的插件（内置插件、环境变量、用户配置依次进行）。</li><li>initPresets stage: 该阶段 Umi 将注册 presets。presets 在注册的时候可以通过 return { presets, plugins } 来添加额外的插件。其中 presets 将添加到 presets 队列的队首，而 plugins 将被添加到 plugins 队列的队尾。</li><li>initPlugins stage: 该阶段 Umi 将注册 plugins。这里的 plugins 包括上个阶段由 presets 添加的额外的 plugins， 一个值得注意的点在于： 尽管 plugins 也可以 return { presets, plugins } ，但是 Umi 不会对其进行任何操作。插件的 init 其实就是执行插件的代码（但是插件的代码本质其实只是调用 api 进行各种 hook 的注册，而 hook 的执行并非在此阶段执行，因此这里叫插件的注册）。</li><li>resolveConfig stage: 该阶段 Umi 将整理各个插件中对于 config schema 的定义，然后执行插件的 modifyConfig 、modifyDefaultConfig、 modifyPaths 等 hook，进行配置的收集。</li><li>collectionAppData stage: 该阶段 Umi 执行 modifyAppData hook，来维护 App 的元数据。（ AppData 是 umi@4 新增的 api ）</li><li>onCheck stage: 该阶段 Umi 执行 onCheck hook。</li><li>onStart stage: 该阶段 Umi 执行 onStart hook</li><li>runCommand stage: 该阶段 Umi 运行当前 cli 要执行的 command，（例如 umi dev, 这里就会执行 dev command）Umi 的各种核心功能都在 command 中实现。包括我们的插件调用 api 注册的绝大多数 hook。</li></ul>`,63),S={href:"https://umijs.org/docs/guides/plugins#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"},E=c(`<h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><p>Umi 默认按页拆包，注意编写<code>src/loading.tsx</code></p><p>path 只支持两种占位符配置，第一种是动态参数 :id 的形式，第二种是 * 通配符，通配符只能出现路由字符串的最后</p><p><a href="#pages">配置方法</a></p><p>可配置的基础属性有：path、component、routes、redirect、wrappers、title。这里主要说 wrappers</p><h3 id="wrappers" tabindex="-1"><a class="header-anchor" href="#wrappers" aria-hidden="true">#</a> wrappers</h3><p>配置路由组件的包装组件，通过包装组件可以为当前的路由组件组合进更多的功能。 比如，可以用于路由级别的权限校验：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> wrappers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@/wrappers/auth&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&quot;login&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Navigate<span class="token punctuation">,</span> Outlet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Outlet</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navigate</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，访问 /user，就通过 auth 组件做权限校验，如果通过，渲染 src/pages/user，否则跳转到 /login。</p>`,10),R=n("strong",null,"路由守卫",-1),A=n("p",null,"其余的路由跳转、路由 hooks 函数和 React 原生一样",-1),C=n("h2",{id:"插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#插件","aria-hidden":"true"},"#"),s(" 插件")],-1),I={href:"https://pro.ant.design/zh-CN",target:"_blank",rel:"noopener noreferrer"},U=c(`<h2 id="样式" tabindex="-1"><a class="header-anchor" href="#样式" aria-hidden="true">#</a> 样式</h2><p>为避免单个组件引入的样式文件影响全局，建议还是以 CSS Modules 的形式编写 CSS 文件</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// src/pages/index.tsx</span>

<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&quot;./index.css&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Umi 同样也支持各种 CSS 预编译器，Sass 需要单独安装<code>pnpm add sass -D</code></p><h2 id="路由与请求并行加载" tabindex="-1"><a class="header-anchor" href="#路由与请求并行加载" aria-hidden="true">#</a> 路由与请求并行加载</h2><p>开启：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .umirc.ts</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  clientLoader<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑一个三层嵌套路由的场景：</p><ol><li>我们需要先等第一层路由的组件加载完成，然后第一层路由的组件发起数据请求</li><li>第一层路由的数据请求完成后，开始请求第二层路由的组件，第二层路由的组件加载好以后请求第二层路由需要的数据</li><li>第二层路由的数据请求完成后，开始请求第三层路由的组件，第三层路由的组件加载好以后请求第三层路由需要的数据</li><li>第三层路由的数据请求完成后，整个页面才完成渲染</li></ol><p>使用：</p><p>在路由文件中，除了默认导出的页面组件外，再导出一个 clientLoader 函数，并且在该函数内完成路由数据加载的逻辑</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// pages/.../some_page.tsx</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> useClientLoaderData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useClientLoaderData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">clientLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><p>Umi 可以通过环境变量来完成一些特殊的配置和功能。支持变量写法</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code># file .env.local
FOO=foo
BAR=bar

CONCAT=$FOO$BAR # CONCAT=foobar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),M={href:"https://umijs.org/docs/guides/env-variables#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%88%97%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},B=c(`<h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h2><p>注意：这里的布局指的是整个页面的全局布局配置，之前的<code>layouts/index.tsx</code>只是提供给子路由的公共布局组件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// config/config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  layout<span class="token operator">:</span> <span class="token punctuation">{</span>
    title<span class="token operator">:</span> <span class="token string">&quot;your app title&quot;</span><span class="token punctuation">,</span>
    locale<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 默认开启，如无需菜单国际化可关闭</span>
    logo<span class="token operator">:</span> <span class="token string">&#39;https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 默认布局调整</span>
    <span class="token function-variable function">rightContentRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>RightContent <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">footerRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    menuHeaderRender<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>  <span class="token comment">// 是否展示菜单顶栏的title和logo</span>
    <span class="token function-variable function">logout</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Logout <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token comment">// 设置退出的处理逻辑，默认不作处理并隐藏退出键</span>
    rightRender<span class="token operator">:</span> <span class="token string">&#39;Default: 展示用户名、头像、退出登录相关组件&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 发生错误后的回调</span>
    ErrorComponent<span class="token operator">:</span> <span class="token operator">&lt;</span>ErrorBoundary <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token comment">// 错误边界组件</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此，配置路由表中野扩展了一些全局的属性：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// config/route.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> routes<span class="token operator">:</span> IBestAFSRoute<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&quot;/welcome&quot;</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> <span class="token string">&quot;IndexPage&quot;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&quot;欢迎&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 兼容此写法</span>
    icon<span class="token operator">:</span> <span class="token string">&quot;testicon&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 更多功能查看</span>
    <span class="token comment">// https://beta-pro.ant.design/docs/advanced-menu</span>
    <span class="token comment">// ---</span>
    <span class="token comment">// 新页面打开</span>
    target<span class="token operator">:</span> <span class="token string">&quot;_blank&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 不展示顶栏</span>
    headerRender<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 不展示页脚</span>
    footerRender<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 不展示菜单</span>
    menuRender<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 不展示菜单顶栏</span>
    menuHeaderRender<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 权限配置，需要与 plugin-access 插件配合使用</span>
    access<span class="token operator">:</span> <span class="token string">&quot;canRead&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 隐藏子菜单</span>
    hideChildrenInMenu<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 隐藏自己和子菜单</span>
    hideInMenu<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 在面包屑中隐藏</span>
    hideInBreadcrumb<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 子项往上提，仍旧展示,</span>
    flatMenu<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据流" tabindex="-1"><a class="header-anchor" href="#数据流" aria-hidden="true">#</a> 数据流</h2><h3 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h3><table><thead><tr><th style="text-align:left;">路径</th><th style="text-align:left;">命名空间</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">src/models/count.ts</td><td style="text-align:left;">count</td><td style="text-align:left;">src/models 目录下不支持目录嵌套定义 model</td></tr><tr><td style="text-align:left;">src/pages/pageA/model.ts</td><td style="text-align:left;">pageA.model</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">src/pages/pageB/models/product.ts</td><td style="text-align:left;">pageB.product</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">src/pages/pageB/models/fruit/apple.ts</td><td style="text-align:left;">pageB.fruit.apple</td><td style="text-align:left;">pages/xxx/models 下 model 定义支持嵌套定义</td></tr></tbody></table><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/models/userModel.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 user 这个字段就变为了全局数据，我们可以在任意 pages 组件中通过</p><h3 id="简单应用" tabindex="-1"><a class="header-anchor" href="#简单应用" aria-hidden="true">#</a> 简单应用</h3><p>通过 useModel 我们可以在任一组件里调用全局 model。以一个 userModel 为例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/models/userModel.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ahooks&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/services/user&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> user<span class="token punctuation">,</span> loading<span class="token operator">:</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    user<span class="token punctuation">,</span>
    loading<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// src/components/Username/index.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> user<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useModel</span><span class="token punctuation">(</span><span class="token string">&#39;userModel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token punctuation">{</span>loading <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="model-优化" tabindex="-1"><a class="header-anchor" href="#model-优化" aria-hidden="true">#</a> model 优化</h3><p>useModel() 方法可以接受可选的第二个参数，当组件只需要使用 Model 中的部分参数，而对其它参数的变化不感兴趣时，可以传入一个函数进行过滤。以实现计数器的操作按钮为例</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// src/components/CounterActions/index.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> minus <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useModel</span><span class="token punctuation">(</span><span class="token string">&quot;counterModel&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    add<span class="token operator">:</span> model<span class="token punctuation">.</span>increment<span class="token punctuation">,</span>
    minus<span class="token operator">:</span> model<span class="token punctuation">.</span>decrement<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>add<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">add by 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>minus<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">minus by 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始状态值" tabindex="-1"><a class="header-anchor" href="#初始状态值" aria-hidden="true">#</a> 初始状态值</h3><p>全局初始状态在整个 Umi 项目的最开始创建。编写 src/app.ts 的导出方法 getInitialState()，其返回值将成为全局初始状态。可以理解为 Vue 中路由守卫里预获取菜单列表、用户登录信息等全局数据的前置方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/app.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchInitialData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/services/initial&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getInitialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> initialData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchInitialData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> initialData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，各种插件和您定义的组件都可以通过 useModel(&#39;@@initialState&#39;) 直接获取到这份全局的初始状态</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> initialState<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> refresh<span class="token punctuation">,</span> setInitialState <span class="token punctuation">}</span> <span class="token operator">=</span>
    <span class="token function">useModel</span><span class="token punctuation">(</span><span class="token string">&quot;@@initialState&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>initialState<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">对象属性</th><th style="text-align:left;">类型</th><th style="text-align:left;">介绍</th></tr></thead><tbody><tr><td style="text-align:left;">initialState</td><td style="text-align:left;">any</td><td style="text-align:left;">导出的 getInitialState() 方法的返回值</td></tr><tr><td style="text-align:left;">loading</td><td style="text-align:left;">boolean</td><td style="text-align:left;">getInitialState() 或 refresh() 方法是否正在进行中。在首次获取到初始状态前，页面其他部分的渲染都会被阻止</td></tr><tr><td style="text-align:left;">error</td><td style="text-align:left;">Error</td><td style="text-align:left;">如果导出的 getInitialState() 方法运行时报错，报错的错误信息</td></tr><tr><td style="text-align:left;">setInitialState</td><td style="text-align:left;">(state: any) =&gt; void</td><td style="text-align:left;">手动设置 initialState 的值，手动设置完毕会将 loading 置为 false</td></tr></tbody></table><h2 id="请求" tabindex="-1"><a class="header-anchor" href="#请求" aria-hidden="true">#</a> 请求</h2><p>Umi 内置了请求插件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> request<span class="token punctuation">,</span> useRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>

request<span class="token punctuation">;</span>
useRequest<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构建配置" tabindex="-1"><a class="header-anchor" href="#构建配置" aria-hidden="true">#</a> 构建配置</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  request<span class="token operator">:</span> <span class="token punctuation">{</span>
    dataField<span class="token operator">:</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建时配置 data，则消费数据时从后端获取到的数据默认取 data 字段内的数据</p><p>如数据格式<code>{ success: true, data: 123, code: 1 }</code>，useRequest 默认获取到值就是 123</p><h3 id="运行配置" tabindex="-1"><a class="header-anchor" href="#运行配置" aria-hidden="true">#</a> 运行配置</h3><p>在 src/app.ts 中你可以通过配置 request 项，来为你的项目进行统一的个性化的请求设定</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> RequestConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> request<span class="token operator">:</span> RequestConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  <span class="token comment">// other axios options you want</span>
  errorConfig<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">errorThrower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  requestInterceptors<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  responseInterceptors<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里提供了异常处理、异常抛出、请求拦截、响应拦截，都是基于 axios 的配置，全局有效</p><p>以下是一个运行时配置示例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> RequestConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./request&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 错误处理方案： 错误类型</span>
<span class="token keyword">enum</span> ErrorShowType <span class="token punctuation">{</span>
  <span class="token constant">SILENT</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token constant">WARN_MESSAGE</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">ERROR_MESSAGE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token constant">NOTIFICATION</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token constant">REDIRECT</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 与后端约定的响应数据格式</span>
<span class="token keyword">interface</span> <span class="token class-name">ResponseStructure</span> <span class="token punctuation">{</span>
  success<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  errorCode<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  errorMessage<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  showType<span class="token operator">?</span><span class="token operator">:</span> ErrorShowType<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 运行时配置</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> request<span class="token operator">:</span> RequestConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 统一的请求设定</span>
  timeout<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;X-Requested-With&quot;</span><span class="token operator">:</span> <span class="token string">&quot;XMLHttpRequest&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 错误处理： umi@3 的错误处理方案。</span>
  errorConfig<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 错误抛出</span>
    <span class="token function-variable function">errorThrower</span><span class="token operator">:</span> <span class="token punctuation">(</span>res<span class="token operator">:</span> ResponseStructure<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> success<span class="token punctuation">,</span> data<span class="token punctuation">,</span> errorCode<span class="token punctuation">,</span> errorMessage<span class="token punctuation">,</span> showType <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> error<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        error<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;BizError&quot;</span><span class="token punctuation">;</span>
        error<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token punctuation">{</span> errorCode<span class="token punctuation">,</span> errorMessage<span class="token punctuation">,</span> showType<span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> error<span class="token punctuation">;</span> <span class="token comment">// 抛出自制的错误</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 错误接收及处理</span>
    <span class="token function-variable function">errorHandler</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> opts<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token operator">?.</span>skipErrorHandler<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
      <span class="token comment">// 我们的 errorThrower 抛出的错误。</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;BizError&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> errorInfo<span class="token operator">:</span> ResponseStructure <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>info<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token punctuation">{</span> errorMessage<span class="token punctuation">,</span> errorCode <span class="token punctuation">}</span> <span class="token operator">=</span> errorInfo<span class="token punctuation">;</span>
          <span class="token keyword">switch</span> <span class="token punctuation">(</span>errorInfo<span class="token punctuation">.</span>showType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> ErrorShowType<span class="token punctuation">.</span><span class="token constant">SILENT</span><span class="token operator">:</span>
              <span class="token comment">// do nothing</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> ErrorShowType<span class="token punctuation">.</span><span class="token constant">WARN_MESSAGE</span><span class="token operator">:</span>
              message<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> ErrorShowType<span class="token punctuation">.</span><span class="token constant">ERROR_MESSAGE</span><span class="token operator">:</span>
              message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> ErrorShowType<span class="token punctuation">.</span><span class="token constant">NOTIFICATION</span><span class="token operator">:</span>
              notification<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                description<span class="token operator">:</span> errorMessage<span class="token punctuation">,</span>
                message<span class="token operator">:</span> errorCode<span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> ErrorShowType<span class="token punctuation">.</span><span class="token constant">REDIRECT</span><span class="token operator">:</span>
              <span class="token comment">// TODO: redirect</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
              message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Axios 的错误</span>
        <span class="token comment">// 请求成功发出且服务器也响应了状态码，但状态代码超出了 2xx 的范围</span>
        message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Response status:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 请求已经成功发起，但没有收到响应</span>
        <span class="token comment">// \\\`error.request\\\` 在浏览器中是 XMLHttpRequest 的实例，</span>
        <span class="token comment">// 而在node.js中是 http.ClientRequest 的实例</span>
        message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;None response! Please retry.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送请求时出了点问题</span>
        message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Request error, please retry.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 请求拦截器</span>
  requestInterceptors<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 拦截请求配置，进行个性化处理。</span>
      <span class="token keyword">const</span> url <span class="token operator">=</span> config<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;?token = 123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>config<span class="token punctuation">,</span> url <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>

  <span class="token comment">// 响应拦截器</span>
  responseInterceptors<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 拦截响应数据，进行个性化处理</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;请求失败！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="权限" tabindex="-1"><a class="header-anchor" href="#权限" aria-hidden="true">#</a> 权限</h2><p>access 的控制粒度为组件级。如果要判断组件页面是否具备权限，请在路由表里使用 wrappers 包装组件控制</p><h3 id="启用权限" tabindex="-1"><a class="header-anchor" href="#启用权限" aria-hidden="true">#</a> 启用权限</h3><p>配置开启。同时需要 src/access.ts 提供权限配置。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  access<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// access 插件依赖 initial State 所以需要同时开启</span>
  initialState<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们约定了 src/access.ts 为我们的权限定义文件，该文件需要默认导出一个方法，导出的方法会在项目初始化时被执行。该方法需要返回一个对象，对象的每一个值就对应定义了一条权限</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/access.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>initialState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> userId<span class="token punctuation">,</span> role <span class="token punctuation">}</span> <span class="token operator">=</span> initialState<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    canReadFoo<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    canUpdateFoo<span class="token operator">:</span> role <span class="token operator">===</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">canDeleteFoo</span><span class="token operator">:</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> foo<span class="token punctuation">.</span>ownerId <span class="token operator">===</span> userId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 initialState 是通过初始化状态插件 initial-state 提供的数据，你可以使用该数据来初始化你的用户权限。当然也可以通过<code>const { setInitialState } = useModel(&#39;@@initialState&#39;)</code>获取到的 setInitialState 方法来重设 initialState</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p>路由配置：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&quot;/pageA&quot;</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> <span class="token string">&quot;PageA&quot;</span><span class="token punctuation">,</span>
    access<span class="token operator">:</span> <span class="token string">&quot;canReadPageA&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 权限定义返回值的某个 key</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页面配置：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useAccess<span class="token punctuation">,</span> Access <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;umi&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">PageA</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token keyword">const</span> access <span class="token operator">=</span> <span class="token function">useAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// access 的成员: canReadFoo, canUpdateFoo, canDeleteFoo</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>access<span class="token punctuation">.</span>canReadFoo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果可以读取 Foo，则...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Access</span></span>
        <span class="token attr-name">accessible</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>access<span class="token punctuation">.</span>canReadFoo<span class="token punctuation">}</span></span>
        <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Can not read foo content.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span>
      <span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Foo content.
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Access</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Access</span></span>
        <span class="token attr-name">accessible</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>access<span class="token punctuation">.</span>canUpdateFoo<span class="token punctuation">}</span></span>
        <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Can not update foo.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span>
      <span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Update foo.
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Access</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Access</span></span>
        <span class="token attr-name">accessible</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>access<span class="token punctuation">.</span><span class="token function">canDeleteFoo</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
        <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Can not delete foo.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span>
      <span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Delete foo.
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Access</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>useAccess() 的返回值 access 就是 src/access.ts 中定义的权限集合，可以利用它进行组件内代码执行流的控制</li><li><code>&lt;Access&gt;</code> 组件拥有 accessible 和 fallback 两个属性，当 accessible 为 true 时会渲染子组件，当 accessible 为 false 会渲染 fallback 属性对应的 ReactNode。</li></ul>`,50);function T(j,F){const u=l("CodeTabs"),i=l("ExternalLinkIcon"),r=l("RouterLink");return k(),v("div",null,[b,t(u,{id:"59",data:[{title:"npm"},{title:"yarn"},{title:"pnpm"}],"tab-id":"shell"},{tab0:a(({title:e,value:p,isActive:o})=>[g]),tab1:a(({title:e,value:p,isActive:o})=>[h]),tab2:a(({title:e,value:p,isActive:o})=>[y]),_:1}),f,t(u,{id:"73",data:[{title:"npm"},{title:"yarn"},{title:"pnpm"}],"tab-id":"shell"},{tab0:a(({title:e,value:p,isActive:o})=>[x]),tab1:a(({title:e,value:p,isActive:o})=>[w]),tab2:a(({title:e,value:p,isActive:o})=>[q]),_:1}),_,n("p",null,[s("更详细内容详见"),n("a",S,[s("UmiJS 生命周期"),t(i)])]),E,n("p",null,[s("注意：wrappers 包装组件的本质是"),t(r,{to:"/react/9-%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7.html#%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6"},{default:a(()=>[s("HOC")]),_:1}),s("，通过中间属性控制实现"),R,s("控制")]),A,C,n("p",null,[s("Umi 默认不附带插件，涵盖完整插件的项目详见"),n("a",I,[s("Ant Design Pro"),t(i)])]),U,n("p",null,[s("环境变量的功能与其他脚手架别无二致，自带的环境变量列表详见："),n("a",M,[s("https://umijs.org/docs/guides/env-variables#环境变量列表"),t(i)])]),B])}const L=d(m,[["render",T],["__file","8-umi.html.vue"]]);export{L as default};
