import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,a as e}from"./app.9cc78ce3.js";const t={},p=e(`<h2 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> path</h2><p>path 模块用于对路径和文件进行处理，提供了很多好用的方法。</p><p>主要因为 Mac OS、Linux 和 windows 上的路径写法不一样</p><p>在window 上会使用 \\或者 \\ 来作为文件路径的分隔符，当然目前也支持 /</p><p>在 Mac OS、Linux 的 Unix 操作系统上使用 / 来作为文件路径的分隔符</p><p>为了屏蔽他们之间的差异，在开发中对于路径的操作我们可以使用 path 模块</p><h3 id="可移植操作系统接口" tabindex="-1"><a class="header-anchor" href="#可移植操作系统接口" aria-hidden="true">#</a> 可移植操作系统接口</h3><p>Portable Operating System Interface，缩写为 POSIX</p><p>Linux 和 Mac OS 都实现了 POSIX 接口；</p><p>Window 部分电脑实现了 POSIX 接口；</p><h3 id="获取路径信息" tabindex="-1"><a class="header-anchor" href="#获取路径信息" aria-hidden="true">#</a> 获取路径信息</h3><p>dirname：获取文件的父文件夹；</p><p>basename：获取文件名；</p><p>extname：获取文件扩展名；</p><h3 id="路径拼接" tabindex="-1"><a class="header-anchor" href="#路径拼接" aria-hidden="true">#</a> 路径拼接</h3><p>如果我们希望将多个路径进行拼接，但是不同的操作系统可能使用的是不同的分隔符</p><p>这时候可以使用 path.join 函数</p><h3 id="将文件和某个文件夹拼接" tabindex="-1"><a class="header-anchor" href="#将文件和某个文件夹拼接" aria-hidden="true">#</a> 将文件和某个文件夹拼接</h3><p>如果我们希望将某个文件和文件夹拼接，可以使用 path.resolve;</p><p>resolve 函数会判断我们拼接的路径前面是否有 /或../或./；</p><p>如果有表示是一个绝对路径，会返回对应的拼接路径；如果没有，那么会和当前执行文件所在的文件夹进行路径的拼接</p><p>在 webpack 中获取路径或者起别名的地方也可以使用。</p><h2 id="fs" tabindex="-1"><a class="header-anchor" href="#fs" aria-hidden="true">#</a> fs</h2><h3 id="file-system-文件系统" tabindex="-1"><a class="header-anchor" href="#file-system-文件系统" aria-hidden="true">#</a> File System 文件系统</h3><p>借助于 Node 帮我们封装的文件系统，我们可以在任何的操作系统（window、Mac OS、Linux）上面直接去操作文件；</p><p>这也是 Node 可以开发服务器的一大原因，也是它可以成为前端自动化脚本等热门工具的原因。</p><p>Node 的 API 大多数都提供三种操作方式：</p><p>方法1：同步操作文件：代码会被阻塞，不会继续执行；</p><p>方法2：异步回调函数操作文件：代码不会被阻塞，需要传入回调函数，当获取到结果时，回调函数被执行；</p><p>方法3：异步 Promise 操作文件：代码不会被阻塞，通过 fs.promises 调用方法操作，会返回一个 Promise，可以通过 then、catch 进行处理。</p><h3 id="file-descriptors-文件描述符" tabindex="-1"><a class="header-anchor" href="#file-descriptors-文件描述符" aria-hidden="true">#</a> File Descriptors 文件描述符</h3><p>在 POSIX 系统上，对于每个进程，内核都维护着一张当前打开着的文件和资源的表格。</p><p>每个打开的文件都分配了一个称为文件描述符的简单的数字标识符。</p><p>在系统层，所有文件系统操作都使用这些文件描述符来标识和跟踪每个特定的文件。</p><p>Windows 系统使用了一个虽然不同但概念上类似的机制来跟踪资源。</p><p>最终，为了简化用户的工作，Node.js 抽象出操作系统之间的特定差异，并为所有打开的文件分配一个数字型的文件描述符。</p><h3 id="fs-open" tabindex="-1"><a class="header-anchor" href="#fs-open" aria-hidden="true">#</a> fs.open()</h3><p>用于分配新的文件描述符。一旦被分配，则文件描述符可用于从文件读取数据、向文件写入数据、或请求关于文件的信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;../foo.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> fd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  fs<span class="token punctuation">.</span><span class="token function">fstat</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>参数 1：文件路径，String 类型</p></li><li><p>参数 2：文件打开模式 options.flag &#39;r&#39; &#39;w&#39; ...</p></li><li><p>参数 3：callback 回调函数</p></li></ul><p>详细描述见 Node 官方文档</p><h3 id="fs-读写" tabindex="-1"><a class="header-anchor" href="#fs-读写" aria-hidden="true">#</a> fs 读写</h3><p>fs.readFile(path[, options], callback)：读取文件的内容；</p><p>fs.writeFile(file, data[, options], callback)：在文件中写入内容；</p><h4 id="options-flag" tabindex="-1"><a class="header-anchor" href="#options-flag" aria-hidden="true">#</a> options.flag</h4><p>w 打开文件写入，默认值；</p><p>w+打开文件进行读写，如果不存在则创建文件；</p><p>r+ 打开文件进行读写，如果不存在那么抛出异常；</p><p>r 打开文件读取，读取时的默认值；</p><p>a 打开要写入的文件，将流放在文件末尾。如果不存在则创建文件；</p><p>a+打开文件以进行读写，将流放在文件末尾。如果不存在则创建文件</p><h4 id="options-encoding" tabindex="-1"><a class="header-anchor" href="#options-encoding" aria-hidden="true">#</a> options.encoding</h4><p>最常用 UTF-8 编码</p><p>文件读取 readFile 中，如果不填写 encoding，返回的结果是 Buffer。</p><h3 id="fs-操作文件夹" tabindex="-1"><a class="header-anchor" href="#fs-操作文件夹" aria-hidden="true">#</a> fs 操作文件夹</h3><p>fs.mkdir() fs.mkdirSync() 创建新文件夹</p><h4 id="读取文件夹内容" tabindex="-1"><a class="header-anchor" href="#读取文件夹内容" aria-hidden="true">#</a> 读取文件夹内容</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将目录中读取到的文件名称转为 files 数组</p><h4 id="文件夹重命名" tabindex="-1"><a class="header-anchor" href="#文件夹重命名" aria-hidden="true">#</a> 文件夹重命名</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&quot;../old&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;../new&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文件夹复制" tabindex="-1"><a class="header-anchor" href="#文件夹复制" aria-hidden="true">#</a> 文件夹复制</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>Node 中的核心 API 都是基于异步事件驱动的</p><p>某些对象（发射器（Emitters））发出某一个事件；</p><p>监听这个事件（监听器 Listeners），并且传入的回调函数，这个回调函数会在监听到事件时调用；</p><p>发出事件和监听事件都是通过<strong>EventEmitter 类</strong>来完成的，它们都属于 events 对象。</p><p><code>emitter.on(eventName, listener)</code>：监听事件，也可以使用 addListener；</p><p><code>emitter.off(eventName, listener)</code>：移除事件监听，也可以使用 removeListener；</p><p><code>emitter.emit(eventName[, ...args])</code>：发出事件，可以携带一些参数；</p><h3 id="常见属性" tabindex="-1"><a class="header-anchor" href="#常见属性" aria-hidden="true">#</a> 常见属性</h3><p><code>emitter.eventNames()</code>： 返回当前 EventEmitter 对象注册的事件字符串数组；</p><p><code>emitter.getMaxListeners()</code>： 返回当前 EventEmitter 对象的最大监听器数量，可以通过 setMaxListeners()来修改，默认是 10；</p><p><code>emitter.listenerCount(事件名称)</code>： 返回当前 EventEmitter 对象某一个事件名称，监听器的个数；</p><p><code>emitter.listeners(事件名称)</code>：返回当前 EventEmitter 对象某个事件监听器上所有的监听器数组。</p><h3 id="方法补充" tabindex="-1"><a class="header-anchor" href="#方法补充" aria-hidden="true">#</a> 方法补充</h3><p><code>emitter.once(eventName, listener)</code>：事件监听一次</p><p><code>emitter.prependListener()</code>：将监听事件添加到最前面</p><p><code>emitter.prependOnceListener()</code>：将监听事件添加到最前面，但是只监听一次</p><p><code>emitter.removeAllListeners([eventName])</code>：移除所有的监听器</p>`,81),i=[p];function o(c,r){return a(),s("div",null,i)}const u=n(t,[["render",o],["__file","常用内置模块.html.vue"]]);export{u as default};
