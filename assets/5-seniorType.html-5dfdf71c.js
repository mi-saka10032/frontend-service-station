import{_ as n,Y as s,Z as a,a1 as t}from"./framework-bb209140.js";const p={},e=t(`<h2 id="collections" tabindex="-1"><a class="header-anchor" href="#collections" aria-hidden="true">#</a> Collections</h2><h3 id="lists" tabindex="-1"><a class="header-anchor" href="#lists" aria-hidden="true">#</a> Lists</h3><p>Lists 即常规意义上的数组类型。默认<code>List&lt;int&gt;</code>类型。</p><p>注意，由于类型推断的存在，Lists 允许集合内存在多种不同基础类型的元素对象，但应尽量保持类型唯一性。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string-literal"><span class="token string">&#39;Car&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;Boat&#39;</span></span><span class="token punctuation">,</span>
    <span class="token number">123</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Train&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sets" tabindex="-1"><a class="header-anchor" href="#sets" aria-hidden="true">#</a> Sets</h3><p>Sets 即常规意义上的非重复值集合类型。默认<code>Set&lt;String&gt;</code>类型。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Set&lt;String&gt; names = {}; // This works, too.</span>
<span class="token comment">// var names = {}; // Creates a map, not a set.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Set</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  names<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;k&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  names<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
elements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;fluorine&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
elements<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>halogens<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maps" tabindex="-1"><a class="header-anchor" href="#maps" aria-hidden="true">#</a> Maps</h3><p>Maps 即常规以上的 K-V 集合。默认<code>Map&lt;String, String&gt;</code>类型。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// Key:    Value</span>
  <span class="token string-literal"><span class="token string">&#39;first&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;partridge&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;second&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;turtledoves&#39;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;fifth&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;golden rings&#39;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;helium&#39;</span></span><span class="token punctuation">,</span>
  <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;neon&#39;</span></span><span class="token punctuation">,</span>
  <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;argon&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解构" tabindex="-1"><a class="header-anchor" href="#解构" aria-hidden="true">#</a> 解构</h3><p>Dart 提供类似 JavaScript 中 ES6 的解构语法，但是更强大、更灵活，也包含灵活的条件判断。</p><p>List 解构：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">?</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> nav <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Home&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Furniture&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Plants&#39;</span></span><span class="token punctuation">,</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>promoActive<span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">&#39;Outlet&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Map 解构（条件判断）：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> login <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Manager&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> nav <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string-literal"><span class="token string">&#39;Home&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;Furniture&#39;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&#39;Plants&#39;</span></span><span class="token punctuation">,</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>login <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Manager&#39;</span></span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">&#39;Inventory&#39;</span></span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;tom&#39;</span></span><span class="token punctuation">,</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>login <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Manager&#39;</span></span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">&#39;age&#39;</span></span><span class="token punctuation">:</span> <span class="token number">18</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>nav<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>泛型的使用情况与范围和 TypeScript 的泛型一样。</p><h2 id="类型定义" tabindex="-1"><a class="header-anchor" href="#类型定义" aria-hidden="true">#</a> 类型定义</h2><p>类型定义的使用情况与范围和 TypeScript 的 type 一样，但 TS 的 type 类型更加灵活。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">ListMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> m1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Verbose.</span>
<span class="token class-name">ListMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> m2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Same thing but shorter and clearer.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><p>这里只记录简单枚举，增强枚举比较复杂暂时不写。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>枚举值可以像静态变量一样直接访问</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> favoriteColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>favoriteColor <span class="token operator">==</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Your favorite color is blue!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>枚举值默认从 0 开始</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>values：获取枚举值列表</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Color</span><span class="token punctuation">&gt;</span></span> colors <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>values<span class="token punctuation">;</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>name：获取枚举名称</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;blue&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,36),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","5-seniorType.html.vue"]]);export{r as default};
