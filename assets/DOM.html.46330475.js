import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as l,d as o,w as c,a,r as i,b as n,e as t}from"./app.06db0411.js";const r={},d=a(`<p>全称 Document Object Model 文档对象模型</p><p>文档：整个 HTML 网页文档。</p><p>对象：网页中的每一个部分都转换为了对象。</p><p>模型：使用模型表示对象之间的关系，方便获取对象。</p><h2 id="节点介绍" tabindex="-1"><a class="header-anchor" href="#节点介绍" aria-hidden="true">#</a> 节点介绍</h2><p>Node，是构成网页的最基本组成部分，网页中的每一个部分都可以称为一个节点。</p><p>html 标签、属性、文本、注释、文档都是一个节点，具体类型不同。</p><p>节点的类型不同，属性和方法也都不尽相同。</p><p><strong>常用节点分类</strong></p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">nodeName</th><th style="text-align:left;">noeType</th><th style="text-align:left;">nodeValue</th></tr></thead><tbody><tr><td style="text-align:left;">文档节点</td><td style="text-align:left;">#document</td><td style="text-align:left;">9</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">元素节点</td><td style="text-align:left;">标签名</td><td style="text-align:left;">1</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">属性节点</td><td style="text-align:left;">属性名</td><td style="text-align:left;">2</td><td style="text-align:left;">属性值</td></tr><tr><td style="text-align:left;">文本节点</td><td style="text-align:left;">$text</td><td style="text-align:left;">3</td><td style="text-align:left;">★ 文本内容</td></tr></tbody></table><h3 id="文档节点-document" tabindex="-1"><a class="header-anchor" href="#文档节点-document" aria-hidden="true">#</a> 文档节点#document</h3><p>document 代表整个 HTML 文档，网页中的所有节点都是它的<strong>子节点</strong>。</p><p>document 对象作为 window 对象的属性存在，不用获取可以直接使用。</p><p>通过该对象我们可以在整个文档访问内查找节点对象，并可以通过该对象创建各种节点对象。</p><h4 id="html-结构相关" tabindex="-1"><a class="header-anchor" href="#html-结构相关" aria-hidden="true">#</a> HTML 结构相关</h4><p>document.head</p><p>document.title</p><p>document.body</p><p>document.documentElement</p><h4 id="url-相关" tabindex="-1"><a class="header-anchor" href="#url-相关" aria-hidden="true">#</a> url 相关</h4><p>document.URL</p><p>document.baseURI</p><p>document.documentURI</p><p>document.cookie</p><h3 id="元素节点-element" tabindex="-1"><a class="header-anchor" href="#元素节点-element" aria-hidden="true">#</a> 元素节点 Element</h3><p>HTML 各种标签都是元素节点，最常用的一个节点。</p><h3 id="属性节点-attr" tabindex="-1"><a class="header-anchor" href="#属性节点-attr" aria-hidden="true">#</a> 属性节点 Attr</h3><p>标签中的一个一个的属性，属性节点并非是元素节点的子节点，而是元素节点的一部分。</p><p>可以通过元素节点来获取指定的属性节点。</p><p>注意：一般不使用属性节点。</p><h3 id="文本节点-text" tabindex="-1"><a class="header-anchor" href="#文本节点-text" aria-hidden="true">#</a> 文本节点 Text</h3><p>HTML 标签以外的文本内容，任意非 HTML 的文本都是文本节点，包括可以字面解释的文本内容。</p><p>一般作为元素节点的子节点存在。</p><p>获取文本节点时，一般先要获取元素节点，通过元素节点获取文本节点。</p><p><strong>注意：浏览器已经提供文档节点对象，这个对象是 window，可以在页面中直接使用，文档节点代表整个网页</strong></p><h2 id="元素节点" tabindex="-1"><a class="header-anchor" href="#元素节点" aria-hidden="true">#</a> 元素节点</h2><ul><li><p>通过 document 对象调用</p></li><li><p>getElementById()：通过 id 属性获取一个元素节点对象</p></li><li><p>getElementsByTagName()：通过标签名获取一组元素节点对象</p></li><li><p>getElementsByName()：通过 name 属性获取一组元素节点对象</p><p>1.根据 ID 获取元素后，通过 innerHTML 可以获取到元素内部 HTML 代码。</p><p>2.根据标签名或 name 获取一组对象时，返回一个类数组对象，即使查询到的元素只有一个，也会封装到数组中返回。</p><p>3.innerHTML 对于自结束标签，这个属性没有意义。如果需要读取元素节点属性，直接使用 元素.属性名 <strong>注意：class 属性不能采用这种方式</strong></p><p>4.读取 class 属性时需要使用元素 .className</p></li></ul><h3 id="获取节点属性" tabindex="-1"><a class="header-anchor" href="#获取节点属性" aria-hidden="true">#</a> 获取节点属性</h3><h4 id="获取子节点" tabindex="-1"><a class="header-anchor" href="#获取子节点" aria-hidden="true">#</a> 获取子节点</h4><p>childNodes：表示当前节点的所有子节点。</p><p><strong>childNodes 会获取包括文本节点在内的所有节点，根据 DOM 标签标签间空白也会当成空白节点</strong></p><p><strong>IE8 及以下的浏览器中不会将空白文本当成子节点</strong></p><br><p>children：获取当前元素的所有子元素。</p><p>firstChild：表示当前节点的第一个子节点。</p><p>firstElementChild：获取当前元素的第一个子元素。</p><p><strong>firstElementChild 不支持 IE8 以下浏览器</strong></p><br><p>lastChild：表示当前节点的最后一个子节点。</p><p>lastElementChild：获取当前元素的最后一个子元素。</p><p><strong>与上面同理</strong></p><h4 id="获取父节点和兄弟节点" tabindex="-1"><a class="header-anchor" href="#获取父节点和兄弟节点" aria-hidden="true">#</a> 获取父节点和兄弟节点</h4><p>parentNode：当前节点的父节点</p><p>previousSibling：当前节点的前一个兄弟节点，可能会获取到空白文本</p><p>previousElementSibling：获取前一个兄弟元素，IE8 以下不支持</p><p>nextSibling：当前节点的后一个兄弟节点</p><p>nextElementSibling：获取后一个兄弟元素，IE8 以下不支持</p><h4 id="元素拷贝" tabindex="-1"><a class="header-anchor" href="#元素拷贝" aria-hidden="true">#</a> 元素拷贝</h4><p>cloneNode( true / false ) false：浅拷贝；true：深拷贝。</p><h4 id="inner" tabindex="-1"><a class="header-anchor" href="#inner" aria-hidden="true">#</a> inner</h4><ul><li>innerHTML：设置或获取位于对象起始和结束标签内的 HTML</li></ul><p>-innerText：设置或获取位于对象起始和结束标签内的文本。标签名不会被解析，当作字符原样输出</p><h4 id="outer" tabindex="-1"><a class="header-anchor" href="#outer" aria-hidden="true">#</a> outer</h4><p>outerHTML：设置或获取对象及其内容的 HTML 形式。与 innerHTML 不同的是，对象本身的标签也包含进去了。在设置 outerHTML 时，和 innerHTML 一样</p><p>outerText：设置(包括标签)或获取(不包括标签)对象的文本</p><br><p><strong>区别</strong></p><p>innerHTML 与 outerHTML 在设置对象的内容时包含的 HTML 会被解析，而 innerText 与 outerText 则不会 ​ 在设置时，innerHTML 与 innerText 仅设置标签内的文本，而 outerHTML 与 outerText 设置包括标签在内的文本</p><h3 id="获取节点方法" tabindex="-1"><a class="header-anchor" href="#获取节点方法" aria-hidden="true">#</a> 获取节点方法</h3><p>getElementById()</p><p>通过 id 属性获取一个元素节点对象</p><p>getElementsByTagName()</p><p>通过标签名获取一组元素节点对象</p><p>getElementsByName()</p><p>通过 name 属性获取一组元素节点对象</p><p>getElementsByClassName()</p><p>通过元素 class 属性值查询一组元素节点对象，IE8 以下不支持。</p><p>document.querySelector()</p><p>根据一个 CSS 选择器来查询一个元素节点对象</p><p>虽然 IE8 中没有 getElementsByClassName()但是可以使用 querySelector()代替。</p><p>使用该方法总会返回唯一的一个元素。</p><p>document.querySelectorAll()</p><p>该方法和 querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回。</p><p>即使符合条件的元素只有一个，也会返回数组。</p><h3 id="其余节点方法" tabindex="-1"><a class="header-anchor" href="#其余节点方法" aria-hidden="true">#</a> 其余节点方法</h3><p>1.获取 body 标签</p><p>document.body</p><p>保存的是 body 的引用。</p><p>2.获取 html 根标签</p><p>document.documentElement</p><p>保存 html 根标签</p><p>3.获取页面中所有元素</p><p>document.all == document.getElementByTagName(&quot;*&quot;);</p><h3 id="增删改节点方法" tabindex="-1"><a class="header-anchor" href="#增删改节点方法" aria-hidden="true">#</a> 增删改节点方法</h3><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">appendChild()</td><td style="text-align:left;">把新的子节点添加到指定节点</td></tr><tr><td style="text-align:left;">removeChild()</td><td style="text-align:left;">删除子节点</td></tr><tr><td style="text-align:left;">replaceChild()</td><td style="text-align:left;">替换子节点</td></tr><tr><td style="text-align:left;">insertBefore()</td><td style="text-align:left;">在指定的子节点前面插入新的子节点</td></tr><tr><td style="text-align:left;">createAttribute()</td><td style="text-align:left;">创建属性节点</td></tr><tr><td style="text-align:left;">createElement()</td><td style="text-align:left;">创建元素节点</td></tr><tr><td style="text-align:left;">cratedTextNode()</td><td style="text-align:left;">创建文本节点</td></tr><tr><td style="text-align:left;">getAttribute()</td><td style="text-align:left;">返回指定的属性值</td></tr><tr><td style="text-align:left;">setAttribute()</td><td style="text-align:left;">把指定属性设置或修改为指定的值</td></tr></tbody></table><p>createAttribute()、createTextNode()只能在 document 对象下创建</p><p>createElement()可以在任何元素节点下创建</p><ul><li>注意：使用 innerHTML 也可以完成 DOM 的增删改的相关操作</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ul<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;&lt;li&gt;abc&lt;li&gt;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般两种方式结合使用</p><ul><li>元素自删：A.parentNode.remove(A)</li></ul><h3 id="动态创建元素" tabindex="-1"><a class="header-anchor" href="#动态创建元素" aria-hidden="true">#</a> 动态创建元素</h3><ul><li><p>document.write()：直接将内容写入页面的内容流，但是文档流执行完毕，会导致整个页面全部重绘。</p></li><li><p>element.innerHTML：将内容写入某个 DOM 节点，不会导致页面全部重绘，创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂。</p></li><li><p>document.createElement()：创建多个元素效率稍低一点，但是结构更清晰。</p></li></ul><h2 id="属性节点" tabindex="-1"><a class="header-anchor" href="#属性节点" aria-hidden="true">#</a> 属性节点</h2><p>attributes 获取属性节点的集合</p><p>getAttributeNode 获取属性节点对象</p><p>getAttribute(&quot;class&quot;)获取属性节点的值</p><p>setAttribute(&quot;class&quot;,&quot;name&quot;)设置属性节点的值 （可设置非标准属性）</p><p>hasAttribute(&quot;class&quot;) 判断属性节点是否存在</p><h3 id="classlist" tabindex="-1"><a class="header-anchor" href="#classlist" aria-hidden="true">#</a> classList</h3><p>classList 属性返回元素的类名，作为 DOMTokenList 对象。该属性用于在元素中添加，移除及切换 CSS 类。</p><h4 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> add()</h4><p>add(class1, class2, ……)</p><p>在元素中添加一个或多个类名。</p><p>如果指定的类名已存在，则不会添加</p><h4 id="contains" tabindex="-1"><a class="header-anchor" href="#contains" aria-hidden="true">#</a> contains()</h4><p>contains(class)</p><p>返回布尔值，判断指定的类名是否存在。</p><p>可能值：true，元素已包含了该类名；false，元素不存在该类名。</p><h4 id="item" tabindex="-1"><a class="header-anchor" href="#item" aria-hidden="true">#</a> item()</h4><p>item(index)</p><p>返回元素中索引值对应的类名，索引值从 0 开始。</p><p>如果索引值在区间范围外返回 null</p><h4 id="remove" tabindex="-1"><a class="header-anchor" href="#remove" aria-hidden="true">#</a> remove()</h4><p>remove(class1, class2, ……)</p><p>移除元素中一个或多个类名。</p><p>注意：移除不存在的类名，不会报错。</p><h4 id="toggle" tabindex="-1"><a class="header-anchor" href="#toggle" aria-hidden="true">#</a> toggle()</h4><p>toggle(class, true|false)</p><p>在元素中切换类名。</p><p>第一个参数为要在元素中移除的类名，并返回 false。</p><p>如果该类名不存在则会在元素中添加类名，并返回 true。</p><p>第二个是可选参数，是个布尔值用于设置元素是否强制添加或者移除类，不管该类名是否存在。</p><p><strong>注意</strong>：IE 或 Opera 12 及其更早版本不支持第二个参数。</p><h3 id="dataset" tabindex="-1"><a class="header-anchor" href="#dataset" aria-hidden="true">#</a> dataset</h3><p>添加自定义属性之后，在 JS 中可以通过元素的 dataset 属性访问自定义属性。dataset 属性的值是一个 DOMStringMap 实例，也就是一个键值对的映射。在这个映射中，每个 data-* 形式的属性都会有一个对应的属性，只不过属性名没有 data- 前缀。</p><h2 id="css-操作" tabindex="-1"><a class="header-anchor" href="#css-操作" aria-hidden="true">#</a> CSS 操作</h2><h3 id="读取设置内联样式" tabindex="-1"><a class="header-anchor" href="#读取设置内联样式" aria-hidden="true">#</a> 读取设置内联样式</h3><p>语法：</p><p>​ 元素.style.样式名 = 样式值;</p><ol><li><p>注意：如果 CSS 样式名中含有&quot;-&quot;，这种样式不合法，需要改为驼峰命名法。</p></li><li><p>通过 style 设置的样式都是内联样式，内联样式优先级很高，所以 JS 修改样式基本会立即显示。</p></li><li><p>如果原有样式中写了!important，样式拥有最高优先级，JS 也无法覆盖，会导致 JS 修改失败。</p></li><li><p>通过 style 属性设置和读取的都是内联样式。</p></li></ol><h3 id="获取元素样式" tabindex="-1"><a class="header-anchor" href="#获取元素样式" aria-hidden="true">#</a> 获取元素样式</h3><p>IE 语法：</p><p>​ 元素.currentStyle.样式名 <strong>注意</strong>！只有 IE 浏览器支持</p><ul><li>如果当前元素没有设置该样式，则获取默认值。</li></ul><p>其他浏览器 语法：</p><p>​ getComputedStyle()方法，window 方法，可直接使用。 IE8 以下不支持</p><p>需要两个参数：1、获取样式的元素；2、可传递伪元素，一般为 null。</p><p>通用语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> window<span class="token punctuation">.</span>getComputedStyle
    <span class="token operator">?</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span>
    <span class="token operator">:</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果获取的样式没有设置，则会获取到真实值，而不是默认值。</li></ul><p>通过上述两种语法获取的样式都是只读的，不能写。如果要修改必须通过 style 属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将获取到的首个p标签隐藏</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元素宽高移动属性" tabindex="-1"><a class="header-anchor" href="#元素宽高移动属性" aria-hidden="true">#</a> 元素宽高移动属性</h3><h4 id="元素偏移量-offset-系列" tabindex="-1"><a class="header-anchor" href="#元素偏移量-offset-系列" aria-hidden="true">#</a> 元素偏移量 offset 系列</h4><p>1.获得元素距离带有定位父元素的位置</p><p>2.获得元素自身的大小（宽度高度）</p><p>注意： 返回的数值都不带单位。</p><ol><li>offsetWidth、offsetHeight</li></ol><p>获取元素的整个宽度和高度，包括内容区、内边距和边框</p><ol start="2"><li>offsetParent</li></ol><p>可以用来获取当前元素的定位父元素</p><p>会获取到离当前元素最近的开启了定位的祖先元素</p><ol start="3"><li>offsetLeft、offsetTop</li></ol><p>当前元素相对于其定位父元素的水平偏移量</p><p>当前元素相对于其定位父元素的垂直偏移量</p><ol start="4"><li>offset 与 style 的区别</li></ol><table><thead><tr><th style="text-align:left;">offset</th><th style="text-align:left;">style</th></tr></thead><tbody><tr><td style="text-align:left;">offset 可以得到任意样式表中的样式值</td><td style="text-align:left;">style 只能得到行内样式表中的样式值</td></tr><tr><td style="text-align:left;">offset 系列获得的数值是没有单位的</td><td style="text-align:left;">style.width 获得的是带有单位的字符串</td></tr><tr><td style="text-align:left;">offsetWidth 包含 padding+border+width</td><td style="text-align:left;">style.width 获得不包含 padding 和 border 的值</td></tr><tr><td style="text-align:left;">offsetWidth 等属性只读，不可赋值</td><td style="text-align:left;">style.width 是可读写属性</td></tr><tr><td style="text-align:left;">想要获取元素大小位置，offset 更合适</td><td style="text-align:left;">想要给元素更改值，需要用 style 改变</td></tr></tbody></table><h3 id="元素可视区系列" tabindex="-1"><a class="header-anchor" href="#元素可视区系列" aria-hidden="true">#</a> 元素可视区系列</h3><h4 id="clienttop、clientleft" tabindex="-1"><a class="header-anchor" href="#clienttop、clientleft" aria-hidden="true">#</a> clientTop、clientLeft</h4><p>返回元素上边框、左边框的大小，不带 px 返回数字，只读属性不能修改。</p><h4 id="clientwidth、clientheight" tabindex="-1"><a class="header-anchor" href="#clientwidth、clientheight" aria-hidden="true">#</a> clientWidth、clientHeight</h4><p>这两个属性可以获取元素的可见宽度和高度</p><p>这些属性都是不带 px 的，返回都是一个数字，可以直接进行计算</p><p>会获取元素宽度和高度，包括内容区和内边距</p><p>这些属性都是只读的，不能修改</p><h3 id="元素滚动系列" tabindex="-1"><a class="header-anchor" href="#元素滚动系列" aria-hidden="true">#</a> 元素滚动系列</h3><h4 id="scrollwidth、scrollheight" tabindex="-1"><a class="header-anchor" href="#scrollwidth、scrollheight" aria-hidden="true">#</a> scrollWidth、scrollHeight</h4><p>可以获取元素整个滚动区域的宽度和高度</p><h4 id="scrollleft、scrolltop" tabindex="-1"><a class="header-anchor" href="#scrollleft、scrolltop" aria-hidden="true">#</a> scrollLeft、scrollTop</h4><p>可以获取水平滚动条滚动的距离</p><p>可以获取垂直滚动条滚动的距离</p><h4 id="滚动到底" tabindex="-1"><a class="header-anchor" href="#滚动到底" aria-hidden="true">#</a> 滚动到底</h4><p>当满足 scrollHeight - scrollTop == clientHeight</p><p>说明垂直滚动条到底</p><p>当满足 scrollWidth - scrollLeft == clientWidth</p><p>说明水平滚动条到底</p><p>chrome 认为浏览器的滚动条是 body 的，可以通过 body.scrollTop 来获取</p><p>2021 年更新：chrome 不再认为滚动条是 body 的，只能通过 document.documentElement.scrollTop 来获取。</p><h3 id="三大系列对比" tabindex="-1"><a class="header-anchor" href="#三大系列对比" aria-hidden="true">#</a> 三大系列对比</h3><p>| 三大系列大小对比 | 作用 | | element.offsetWidth | 返回自身包括 padding、边框、内容区的宽度，返回数值不带单位 | | element.clientWidth | 返回自身包括 padding、内容区的宽度，不含边框，返回数值不带单位 | | element.scrollWidth | 返回自身实际的宽度，不含边框，返回数值不带单位 |</p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><p>文档或浏览器窗口中发生的一些特定的交互瞬间。当事件的响应函数被触发时，浏览器每次会将一个事件对象作为实参传递进响应函数，在事件对象中封装了当前事件相关的一切信息，比如：鼠标坐标、键盘按键、鼠标滚轮滚动方向。</p><p>JS 与 HTML 之间的交互是通过事件实现的。</p><table><thead><tr><th style="text-align:left;">鼠标事件</th><th style="text-align:left;">触发条件</th></tr></thead><tbody><tr><td style="text-align:left;">onclick</td><td style="text-align:left;">鼠标点击左键触发</td></tr><tr><td style="text-align:left;">onmouseover</td><td style="text-align:left;">鼠标经过触发</td></tr><tr><td style="text-align:left;">onmouseout</td><td style="text-align:left;">鼠标离开触发</td></tr><tr><td style="text-align:left;">onfocus</td><td style="text-align:left;">获得鼠标焦点触发</td></tr><tr><td style="text-align:left;">onblur</td><td style="text-align:left;">失去鼠标焦点触发</td></tr><tr><td style="text-align:left;">onmousemove</td><td style="text-align:left;">鼠标移动触发</td></tr><tr><td style="text-align:left;">onmouseup</td><td style="text-align:left;">鼠标弹起触发</td></tr><tr><td style="text-align:left;">onmousedown</td><td style="text-align:left;">鼠标按下触发</td></tr></tbody></table><h3 id="弃用写法" tabindex="-1"><a class="header-anchor" href="#弃用写法" aria-hidden="true">#</a> 弃用写法</h3><p>事件对应属性中设置 js 代码，当事件被触发时，代码执行。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;点击测试&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>点击测试文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>耦合不方便维护、不推荐使用。</p><h3 id="代码加载" tabindex="-1"><a class="header-anchor" href="#代码加载" aria-hidden="true">#</a> 代码加载</h3><p>浏览器在加载一个页面时，按照自上向下顺序加载，读取到一行就运行一行，如果将 script 标签写到页面上边，在代码执行时，页面还没有加载。</p><p>将 js 代码编写到页面下部，目的是在页面加载完毕之后再执行 js 代码。</p><p>onload 事件会在整个页面加载完成之后触发，可以确保代码执行时所有 DOM 对象已经加载完毕。</p><p>pageshow 事件：在 load 事件后触发，根据事件对象中的 persisted 来判断是否是缓存中的页面触发的 pageshow 事件，注意这个事件给 window 添加。</p><h3 id="for-异步执行" tabindex="-1"><a class="header-anchor" href="#for-异步执行" aria-hidden="true">#</a> for 异步执行</h3><p>for 循环会在页面加载完成之后立即执行，而响应函数会在超链接被点击时时才执行。当响应函数执行时，for 循环早已执行完毕。</p><h3 id="滚动条事件-onscroll" tabindex="-1"><a class="header-anchor" href="#滚动条事件-onscroll" aria-hidden="true">#</a> 滚动条事件 onscroll</h3><h5 id="clientx、clienty" tabindex="-1"><a class="header-anchor" href="#clientx、clienty" aria-hidden="true">#</a> clientX、clientY</h5><p>获取鼠标指针的水平、垂直坐标</p><h5 id="pagex、pagey" tabindex="-1"><a class="header-anchor" href="#pagex、pagey" aria-hidden="true">#</a> pageX、PageY</h5><p>获取鼠标相对于当前页面坐标。</p><p>IE8 以下不支持。</p><h3 id="页面被卷去的头部" tabindex="-1"><a class="header-anchor" href="#页面被卷去的头部" aria-hidden="true">#</a> 页面被卷去的头部</h3><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条，当滚动条向下滚动时， 页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll 事件。</p><p>三大获取方案：</p><p>1.声明了 DTD，使用 document.documentElement.scrollTop</p><p>2.未声明 DTD，使用 document.body.scrollTop</p><p>3.新方法 window.pageYOffset 和 window.pageXOffset，IE9 开始支持</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">function</span> <span class="token function">getScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">left</span><span class="token operator">:</span> window<span class="token punctuation">.</span>pageXOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> doc
ument<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span>
	<span class="token literal-property property">top</span><span class="token operator">:</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> docum
ent<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> <span class="token number">0</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用的时候：getScroll().left</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件冒泡" tabindex="-1"><a class="header-anchor" href="#事件冒泡" aria-hidden="true">#</a> 事件冒泡</h3><p>事件的向上传导，当后代元素上的事件触发时，其祖先元素的相同事件也会被触发。</p><p>在开发中大部分情况冒泡都是有用的，如果不希望发生事件冒泡可以通过事件来取消冒泡。</p><p>event.cancelBubble = true;</p><h4 id="新增-mouseenter" tabindex="-1"><a class="header-anchor" href="#新增-mouseenter" aria-hidden="true">#</a> 新增 mouseenter</h4><p>当鼠标移动到元素上时就会触发 mouseenter 事件，类似于 mouseover，它们两者之间的差别是：</p><p>1.mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发</p><p>2.mouseenter 只会经过自身盒子触发，这是因为 mouseenter 不会冒泡</p><p>3.与 mouseenter 对应的还有 mouseleave（鼠标移出）。</p><h3 id="事件委派" tabindex="-1"><a class="header-anchor" href="#事件委派" aria-hidden="true">#</a> 事件委派</h3><p>将事件统一绑定给元素的共同祖先元素，后代元素触发时，一直冒泡到祖先元素，通过祖先元素来处理事件。</p><p>优点：减少事件绑定次数，提高程序性能。</p><p>Event.target 返回触发时此事件的元素（事件的目标节点）。</p><h3 id="事件绑定" tabindex="-1"><a class="header-anchor" href="#事件绑定" aria-hidden="true">#</a> 事件绑定</h3><h4 id="传统绑定" tabindex="-1"><a class="header-anchor" href="#传统绑定" aria-hidden="true">#</a> 传统绑定</h4><p>使用 对象.事件 = 函数 的形式绑定响应函数，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> f<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它只能同时为一个元素的一个事件绑定一个响应函数，</p><p>不能绑定多个，后面会覆盖前边。</p><p>如果 对象.事件 = null，则事件无触发。</p><h4 id="事件监听器" tabindex="-1"><a class="header-anchor" href="#事件监听器" aria-hidden="true">#</a> 事件监听器</h4><p>addEventListener() IE8 不支持</p><p>通过这个方法也可以为元素绑定响应函数</p><p>参数：1、事件字符串，不要 on；2、回调函数，事件触发时被调用；3、是否在捕获阶段触发，需要一个布尔值，一般都传 false。</p><p>使用 addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，这样当事件被触发时，响应函数将会按照函数绑定顺序执行。</p><p><strong>注意：该方法里的 this 是绑定事件对象。</strong></p><p>attachEvent() IE8 支持</p><p>参数：1、事件的字符串，要 on；2、回调函数。</p><p>后绑定先执行，执行顺序和 addEvnetListener()相反。</p><p><strong>注意：该方法里的 this 是 window。</strong></p><h4 id="定义绑定函数" tabindex="-1"><a class="header-anchor" href="#定义绑定函数" aria-hidden="true">#</a> 定义绑定函数</h4><p>定义一个函数，用来为指定元素绑定响应函数</p><p>参数：obj，要绑定事件的对象；eventStr，事件字符串（不要 on）；callback，回调函数。</p><p><strong>若需要同时兼容 IE8 和其他浏览器，需要统一 this。常用于将 IE8 中的 this 对象改为事件对象</strong></p><p><strong>核心：在匿名函数中调用 回调函数.call ，根据 call()里传递的对象作为函数中 this 对象来实现</strong></p><h3 id="事件传播" tabindex="-1"><a class="header-anchor" href="#事件传播" aria-hidden="true">#</a> 事件传播</h3><p>网景公司和微软公司对传播理解不同</p><p>微软公司：事件从内向外传播，最后触发祖先元素事件。事件在冒泡阶段执行。</p><p>网景公司：事件由外向内传播，最先触发祖先元素事件。</p><p>W3C：事件传播分为 3 个阶段</p><h4 id="_1、捕获阶段" tabindex="-1"><a class="header-anchor" href="#_1、捕获阶段" aria-hidden="true">#</a> 1、捕获阶段</h4><p>捕获阶段时从最外层祖先元素开始，向目标元素进行事件捕获，默认不会触发事件。</p><h4 id="_2、目标阶段" tabindex="-1"><a class="header-anchor" href="#_2、目标阶段" aria-hidden="true">#</a> 2、目标阶段</h4><p>事件捕获到目标元素，捕获结束开始在目标元素上触发事件。</p><h4 id="_3、冒泡阶段" tabindex="-1"><a class="header-anchor" href="#_3、冒泡阶段" aria-hidden="true">#</a> 3、冒泡阶段</h4><p>事件从目标元素向他的祖先元素开始传递。</p><h4 id="_4、捕获阶段触发" tabindex="-1"><a class="header-anchor" href="#_4、捕获阶段触发" aria-hidden="true">#</a> 4、捕获阶段触发</h4><p>addEventListener()第三个参数设置为 true。一般不会希望在捕获阶段触发事件，所以一般设为 false。</p><p>IE8 没有捕获阶段。</p><h3 id="拖拽事件" tabindex="-1"><a class="header-anchor" href="#拖拽事件" aria-hidden="true">#</a> 拖拽事件</h3><h4 id="拖拽流程" tabindex="-1"><a class="header-anchor" href="#拖拽流程" aria-hidden="true">#</a> 拖拽流程</h4><p>1.当鼠标在被拖拽元素上按下时，开始拖拽</p><p>2.当鼠标移动时被拖拽元素跟随鼠标移动</p><p>3.当鼠标松开时，被拖拽元素固定在当前位置</p><p>4.最好设置鼠标移入/移出元素时，才可触发鼠标按下和松开事件</p><h4 id="鼠标与元素的相对位移量" tabindex="-1"><a class="header-anchor" href="#鼠标与元素的相对位移量" aria-hidden="true">#</a> 鼠标与元素的相对位移量</h4><p>1.鼠标按下时，设置鼠标偏移量 clientX、clientY 相对于元素的 offset 偏移量。</p><p>2.鼠标移动时减去上述偏移量。</p><h4 id="拖拽异常" tabindex="-1"><a class="header-anchor" href="#拖拽异常" aria-hidden="true">#</a> 拖拽异常</h4><p>旧版本浏览器：拖拽网页内容时，浏览器默认搜索引擎中搜索内容，此时导致拖拽功能异常，属于浏览器默认行为。</p><p>如果不希望这个行为发生，可通过 return false 取消这个行为。</p><p>新版本浏览器基本取消了这个异常行为。</p><h4 id="ie-setcapture" tabindex="-1"><a class="header-anchor" href="#ie-setcapture" aria-hidden="true">#</a> IE:setCapture</h4><p>IE 浏览器支持，火狐调用不会报错，chrome 调用报错。</p><p>调用一个元素的 setCaputre()方法之后，这个元素会把下一次所有的鼠标事件捕获到自身上。</p><p>鼠标松开时，取消 释放事件捕获 release</p><h4 id="ondrag" tabindex="-1"><a class="header-anchor" href="#ondrag" aria-hidden="true">#</a> ondrag</h4><p>IE8 及以下不支持</p><p>ondrag 事件在元素或者选取的文本被拖动时触发</p><p>注意： 为了让元素可拖动，需要使用 HTML5 draggable 属性。</p><p>提示： 链接和图片默认是可拖动的，不需要 draggable 属性。</p><p>在拖动目标上触发事件 (源元素):</p><ul><li><p>ondragstart - 用户开始拖动元素时触发</p></li><li><p>ondrag - 元素正在拖动时触发</p></li><li><p>ondragend - 用户完成元素拖动后触发</p></li></ul><p>释放目标时触发的事件:</p><ul><li><p>ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件</p></li><li><p>ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件</p></li><li><p>ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件</p></li><li><p>ondrop - 在一个拖动过程中，释放鼠标键时触发此事件</p></li></ul><p>注意：在拖动元素时，每隔 350 毫秒会触发 ondrag 事件。</p>`,295),u=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token comment"},"<!-- codepen中可拖拽 -->"),t(`
`),n("span",{class:"token doctype"},[n("span",{class:"token punctuation"},"<!"),n("span",{class:"token doctype-tag"},"DOCTYPE"),t(),n("span",{class:"token name"},"html"),n("span",{class:"token punctuation"},">")]),t(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("html")]),n("span",{class:"token punctuation"},">")]),t(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("head")]),n("span",{class:"token punctuation"},">")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("meta")]),t(),n("span",{class:"token attr-name"},"charset"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),t("utf-8"),n("span",{class:"token punctuation"},'"')]),t(),n("span",{class:"token punctuation"},"/>")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("title")]),n("span",{class:"token punctuation"},">")]),t("菜鸟教程(runoob.com)"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("title")]),n("span",{class:"token punctuation"},">")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("style")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token style"},[n("span",{class:"token language-css"},[t(`
      `),n("span",{class:"token selector"},".droptarget"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token property"},"float"),n("span",{class:"token punctuation"},":"),t(" left"),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token property"},"width"),n("span",{class:"token punctuation"},":"),t(" 100px"),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token property"},"height"),n("span",{class:"token punctuation"},":"),t(" 35px"),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token property"},"margin"),n("span",{class:"token punctuation"},":"),t(" 15px"),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token property"},"padding"),n("span",{class:"token punctuation"},":"),t(" 10px"),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),t(" 1px solid #aaaaaa"),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token punctuation"},"}"),t(`
    `)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("style")]),n("span",{class:"token punctuation"},">")]),t(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("head")]),n("span",{class:"token punctuation"},">")]),t(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("body")]),n("span",{class:"token punctuation"},">")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("p")]),n("span",{class:"token punctuation"},">")]),t("在两个矩形框中来回拖动 p 元素:"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("p")]),n("span",{class:"token punctuation"},">")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("div")]),t(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),t("droptarget"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),t(`
      `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("p")]),t(),n("span",{class:"token attr-name"},"draggable"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),t("true"),n("span",{class:"token punctuation"},'"')]),t(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),t("dragtarget"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),t("拖动我!"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("p")]),n("span",{class:"token punctuation"},">")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("div")]),n("span",{class:"token punctuation"},">")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("div")]),t(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),t("droptarget"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("div")]),n("span",{class:"token punctuation"},">")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("p")]),t(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"style"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value css language-css"},[n("span",{class:"token property"},"clear"),n("span",{class:"token punctuation"},":"),t("both"),n("span",{class:"token punctuation"},";")]),n("span",{class:"token punctuation"},'"')])]),n("span",{class:"token punctuation"},">")]),t(`
      `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("strong")]),n("span",{class:"token punctuation"},">")]),t("注意："),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("strong")]),n("span",{class:"token punctuation"},">")]),t(`Internet Explorer 8 及更早 IE 版本或 Safari 5.1
      及更早版本的浏览器不支持 drag 事件。
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("p")]),n("span",{class:"token punctuation"},">")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("p")]),t(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),t("demo"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("p")]),n("span",{class:"token punctuation"},">")]),t(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),t("script")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[t(`
      `),n("span",{class:"token comment"},"/* 拖动时触发*/"),t(`
      document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addEventListener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"dragstart"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"event"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token comment"},"//dataTransfer.setData()方法设置数据类型和拖动的数据"),t(`
        event`),n("span",{class:"token punctuation"},"."),t("dataTransfer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setData"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Text"'),n("span",{class:"token punctuation"},","),t(" event"),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),t("id"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token comment"},"// 拖动 p 元素时输出一些文本"),t(`
        document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"demo"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),t("innerHTML "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},'"开始拖动 p 元素."'),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token comment"},"//修改拖动元素的透明度"),t(`
        event`),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),t("style"),n("span",{class:"token punctuation"},"."),t("opacity "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},'"0.4"'),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token comment"},"//在拖动p元素的同时,改变输出文本的颜色"),t(`
      document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addEventListener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"drag"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"event"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"demo"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),t("style"),n("span",{class:"token punctuation"},"."),t("color "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},'"red"'),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token comment"},"// 当拖完p元素输出一些文本元素和重置透明度"),t(`
      document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addEventListener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"dragend"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"event"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"demo"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),t("innerHTML "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},'"完成 p 元素的拖动"'),n("span",{class:"token punctuation"},";"),t(`
        event`),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),t("style"),n("span",{class:"token punctuation"},"."),t("opacity "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},'"1"'),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token comment"},"/* 拖动完成后触发 */"),t(`
      `),n("span",{class:"token comment"},"// 当p元素完成拖动进入droptarget,改变div的边框样式"),t(`
      document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addEventListener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"dragenter"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"event"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("event"),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),t("className "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token string"},'"droptarget"'),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
          event`),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),t("style"),n("span",{class:"token punctuation"},"."),t("border "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},'"3px dotted red"'),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token punctuation"},"}"),t(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token comment"},"// 默认情况下,数据/元素不能在其他元素中被拖放。对于drop我们必须防止元素的默认处理"),t(`
      document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addEventListener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"dragover"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"event"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        event`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"preventDefault"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token comment"},"// 当可拖放的p元素离开droptarget，重置div的边框样式"),t(`
      document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addEventListener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"dragleave"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"event"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        `),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("event"),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),t("className "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token string"},'"droptarget"'),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
          event`),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),t("style"),n("span",{class:"token punctuation"},"."),t("border "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token punctuation"},"}"),t(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
      `),n("span",{class:"token comment"},`/*对于drop,防止浏览器的默认处理数据(在drop中链接是默认打开)
复位输出文本的颜色和DIV的边框颜色
利用dataTransfer.getData()方法获得拖放数据
拖拖的数据元素id(“drag1”)
拖拽元素附加到drop元素*/`),t(`
      document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addEventListener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"drop"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"event"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
        event`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"preventDefault"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),t("event"),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),t("className "),n("span",{class:"token operator"},"=="),t(),n("span",{class:"token string"},'"droptarget"'),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
          document`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"demo"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),t("style"),n("span",{class:"token punctuation"},"."),t("color "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},";"),t(`
          event`),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),t("style"),n("span",{class:"token punctuation"},"."),t("border "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},";"),t(`
          `),n("span",{class:"token keyword"},"var"),t(" data "),n("span",{class:"token operator"},"="),t(" event"),n("span",{class:"token punctuation"},"."),t("dataTransfer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getData"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Text"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
          event`),n("span",{class:"token punctuation"},"."),t("target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"appendChild"),n("span",{class:"token punctuation"},"("),t("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),t("data"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
        `),n("span",{class:"token punctuation"},"}"),t(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
    `)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("script")]),n("span",{class:"token punctuation"},">")]),t(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("body")]),n("span",{class:"token punctuation"},">")]),t(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),t("html")]),n("span",{class:"token punctuation"},">")]),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=a('<h3 id="滚轮事件" tabindex="-1"><a class="header-anchor" href="#滚轮事件" aria-hidden="true">#</a> 滚轮事件</h3><h4 id="滚轮流程" tabindex="-1"><a class="header-anchor" href="#滚轮流程" aria-hidden="true">#</a> 滚轮流程</h4><p>滚轮向下滚动，元素变长。滚轮向上滚动，元素变短。</p><h4 id="事件名称" tabindex="-1"><a class="header-anchor" href="#事件名称" aria-hidden="true">#</a> 事件名称</h4><p>onmousewheel：老版本浏览器名称，</p><p>老版本火狐使用 DOMMouseScroll 绑定滚动，需要通过 addEventListener()绑定</p><p>当前新版名称：<strong>onwheel</strong></p><h4 id="获取滚轮长度" tabindex="-1"><a class="header-anchor" href="#获取滚轮长度" aria-hidden="true">#</a> 获取滚轮长度</h4><p>1.判断滚轮滚动方向 事件属性 event.wheelDelta</p><p>向上滚 120 向下滚-120</p><p>2.火狐旧版本不支持 需使用 event.detail（当前测试新版本火狐也支持 wheelDelta）</p><p>向上滚-3 向下滚 3</p><h4 id="浏览器滚动条滚动" tabindex="-1"><a class="header-anchor" href="#浏览器滚动条滚动" aria-hidden="true">#</a> 浏览器滚动条滚动</h4><p>滚轮滚动时，浏览器滚动条会随之滚动。</p><p>这是浏览器的默认行为，如果不希望发生，可以取消</p><p>return false;</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h4><p>使用 addEventListener()方法绑定响应函数，取消默认行为时不能使用 returen false;</p><p>需要使用 event 取消默认行为 event.preventDefault(); （IE8 不支持）</p><h3 id="键盘事件" tabindex="-1"><a class="header-anchor" href="#键盘事件" aria-hidden="true">#</a> 键盘事件</h3><h4 id="事件名称-1" tabindex="-1"><a class="header-anchor" href="#事件名称-1" aria-hidden="true">#</a> 事件名称</h4><p>onkeydown：按键按下；onkeyup：按键松开。</p><p>键盘事件一般都会绑定给一些可以获取到焦点的对象。或者是 document。</p><h4 id="onkeydown" tabindex="-1"><a class="header-anchor" href="#onkeydown" aria-hidden="true">#</a> onkeydown</h4><p>如果一直按着某个按键不松手，事件会一直触发。</p><p>onkeydown 连续触发时，第一次和第二次会间隔略长，其他会非常快。</p><p>设计是为了防止误操作。</p><p>文本框中输入内容，属于 onkeydown 默认行为，如果 onkeydown 取消了默认行为，则输入的内容，不会出现在文本框中。</p><h4 id="键盘属性" tabindex="-1"><a class="header-anchor" href="#键盘属性" aria-hidden="true">#</a> 键盘属性</h4><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">altKey</td><td style="text-align:left;">返回当事件触发时，ALT 是否被按下</td></tr><tr><td style="text-align:left;">button</td><td style="text-align:left;">返回当事件触发时，某个鼠标按钮是否被按下</td></tr><tr><td style="text-align:left;">clientX</td><td style="text-align:left;">返回当事件触发时，鼠标指针的水平是否被按下</td></tr><tr><td style="text-align:left;">clientY</td><td style="text-align:left;">返回当事件触发时，鼠标指针的垂直坐标是否被按下</td></tr><tr><td style="text-align:left;">ctrlKey</td><td style="text-align:left;">返回当事件触发时，CTRL 键是否被按下</td></tr><tr><td style="text-align:left;">metaKey</td><td style="text-align:left;">返回当事件触发时，meta 键是否被按下</td></tr><tr><td style="text-align:left;">relatedTarget</td><td style="text-align:left;">返回与事件的目标节点相关的节点</td></tr><tr><td style="text-align:left;">screenX</td><td style="text-align:left;">返回当事件触发时，鼠标指针距离屏幕的水平坐标</td></tr><tr><td style="text-align:left;">screenY</td><td style="text-align:left;">返回当事件触发时，鼠标指针距离屏幕的垂直坐标</td></tr><tr><td style="text-align:left;">shiftKey</td><td style="text-align:left;">返回当事件触发时，SHIFT 键是否被按下</td></tr></tbody></table><h4 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> key</h4><p>老版本浏览器：keyCode 获取按键编码，新版本使用 key</p><p>keyCode：返回定义键码值编码</p><p>key：返回按键字符或字符串</p><h4 id="键盘移动元素" tabindex="-1"><a class="header-anchor" href="#键盘移动元素" aria-hidden="true">#</a> 键盘移动元素</h4><p>← ↑ → ↓ keyCode 37 38 39 40，届时可通过 switch 实现。</p><h2 id="断点调试方法" tabindex="-1"><a class="header-anchor" href="#断点调试方法" aria-hidden="true">#</a> 断点调试方法</h2><p>1.JavaScript 调试</p><p>JS 报错提示。</p><p>2.JavaScript 调试工具</p><p>浏览器 Console</p><p>3.console.log()方法</p><p>4.Sources 设置断点</p><p>5.debugger 关键字</p><p>6.Event Listener Breakpoints</p><p>事件监听器断点，即根据事件名称进行断点设置。当事件被触发时，断点到事件绑定的位置。 事件监听器断点，列出了所有页面及脚本事件，包括：鼠标、键盘、动画、定时器、XHR 等等。极 大的降低了事件方面业务逻辑的调试难度。</p>',46);function k(g,m){const s=i("CodeDemo");return p(),l("div",null,[d,o(s,{id:"code-demo-1282",type:"normal",title:"%E6%8B%96%E6%8B%BD%E7%A4%BA%E4%BE%8B",code:"eJzFV1tPG0cU/iuD+2Ij8ILSSBExPDQgFSm9SEWVKvll8Y7tlezd1XqgoAiJlpvBgEm5B5IQxLUNJs2FAMbmv6Q7Y/spf6Fnd/ZiG5BJeahfvD5z9sx83/nmnOMnvjhJJnwdvlBTayuKqBLWsGKcHtHsMcussEwBtbZ2hZVQU/cPj/p++bEHme6mwf5GKBTHomQ9wXMSExFF4qKewqQz7Bsg0dYHYR8SnHUikwTuKmc3K6cv2fJ66SDj1wcUVe0PRtRkICTwdds5RYbdHwgFJV3ViKjHMEFPHCNC0YQqkg6UwFHy0LP+Kksk3oHa29q0oSpzHMuxOHjfu19jTkJUWQH3WrMmSpKsxMwwNfZ+VZewDmZtCKXUhCyhr0Tr4/qM2AgED0JIcHkK9avSsANS66KbB8bpjnH6Z+nlIS1ss1eTwD97vks3XkAK6MwB0hCdGCu93+oICZrzniQPokhCTKWAZo+ZsM/lK6QhSRdjMbE/gcGH6AMYMiFLlr8Yc/35Hiz9tKkqugDhG+5U46UhCyv4RBJY1Dv6VRJ/WH2cFNFVJdbF3h2w8ezni2cmOZalVyFYVyCrPUNaQtWxjh4gmp1hG+/Z6iHq7UGl6TTbfM3SK+gnMSrqMrofbHfCuo7cqfRsnH3IlvfTdB1InWNLx2z2N4sHZJxnjPzJP6O/OxBdsJrNCk6qFip3IRXRZY24EIRmZJO1elLe36PZp82CsyapkYEkVkgQNNMzCA+P5RTBCtb9nO4UsAactaDogBIhsqogPzbdAtVaFgRJJGKfLiqpKNaDcIe64bc/wFbO2Lvlcq5YKuTY8hs2lyv9nacvMvSPWX4gE7Zl92JZ0YPXxgv7+vCQdRjuxBMalKVAlcgFwQbrqs9EXVykU+fG6ahxvsFWpoBw7wWXAYjVk8Dm4zfDvZKJ3yI2EJQV4OPbvu8eo04U9tGLUbqfqdsjGPbVnMG4zLGlM+7EPQBqZTTL1ubp+V49WhuIJcSgqokRmQxbe7UFv64KPOLhFAS4fTy85sanC7OAtQU2ptk1DpmDNffe3ixPv71t1hslvDFnHEtEhYthIdGxdBMSRAuLJpTcrA3lara4HWRTmZoDLV0hshEerMDud4VUJ4PcLEsvuAIwlWylo0YIDdLbfgMlzn3le9CFeX5rkXdtOWs2X9yNv1K+3KATu165s9UABQ9OWC6eQZVmWx/pRfb21EGVa0SeHLWtDlar7n4vJjHqNIFWl9+aF6+liPcpi6F70KoklRAsoVoFub2qXkyV/Fo5t8PGJujkB+M008Lri8CZgtJaHivA1aETJ0Z+xTEelbf/MqeGpSKUWXp8ZpzPmyeG3mLkX9PLicqrfGXtLTva9q6ytQvdGS8tTN6WSXWwMZGcDU23vrtxVBxIEL+H78q9scedpSKcySkEe3koUR7jny/sW/PfNQCNcRCa8P+kgcZZb/Zy1sIT5TbTulxxNfhBAaYzZL6yWGTzu2zt2NbN9CKQFwgrdGfOKMxdW0ShDHX3/uxS6VRWmj4sLR3UNC6AU9MI5z/S4irPl9P2rGF1xe2DPIWy5P80umky3/5p9Dmcho+0fLGyPk5ntmj6jYmAm27bzlXtjvq7U5a/vGnUZP6LZILQoKgjMxmwds1I4WTGGSmqIdZtJGrwz0J6FJcTkv8mCGbsQHWMqzKFsdGbykKCPUrDdM3/j/hG/gU/uUJD"},{default:c(()=>[u]),_:1}),h])}const v=e(r,[["render",k],["__file","DOM.html.vue"]]);export{v as default};
