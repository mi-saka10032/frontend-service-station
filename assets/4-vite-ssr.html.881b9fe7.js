import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,b as s,e as n,d as e,a as t,r as i}from"./app.b974c09e.js";const l={},u=t(`<p>这份是 Vite 官方提供的服务端渲染指南</p><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><p>一个典型的 SSR 应用应该有如下的源文件结构：</p><p>项目启动命令改为：node server</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-- index.html
-- src/
  -- main.js          <span class="token comment"># 导出环境无关的（通用的）应用代码</span>
  -- entry-client.js  <span class="token comment"># 将应用挂载到一个 DOM 元素上</span>
  -- entry-server.js  <span class="token comment"># 使用某框架的 SSR API 渲染该应用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>index.html</code> 将需要引用 <code>entry-client.js</code> 并包含一个占位标记供给服务端渲染时注入：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--ssr-outlet--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/entry-client.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用任何你喜欢的占位标记来替代 <code>&lt;!--ssr-outlet--&gt;</code>，只要它能够被正确替换。</p><h2 id="情景逻辑" tabindex="-1"><a class="header-anchor" href="#情景逻辑" aria-hidden="true">#</a> 情景逻辑</h2><p>如果需要执行 SSR 和客户端间情景逻辑，可以使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SSR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 仅在服务端执行的逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是在构建过程中被静态替换的，因此它将允许对未使用的条件分支进行<strong>摇树优化(tree shaking)</strong>。</p><h2 id="设置开发服务器" tabindex="-1"><a class="header-anchor" href="#设置开发服务器" aria-hidden="true">#</a> 设置开发服务器</h2>`,13),r={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>server.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">createServer</span><span class="token operator">:</span> createViteServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;vite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 以中间件模式创建 Vite 应用，这将禁用 Vite 自身的 HTML 服务逻辑</span>
  <span class="token comment">// 并让上级服务器接管控制</span>
  <span class="token comment">//</span>
  <span class="token comment">// 如果你想使用 Vite 自己的 HTML 服务逻辑（将 Vite 作为</span>
  <span class="token comment">// 一个开发中间件来使用），那么这里请用 &#39;html&#39;</span>
  <span class="token keyword">const</span> vite <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createViteServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">middlewareMode</span><span class="token operator">:</span> <span class="token string">&quot;ssr&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 使用 vite 的 Connect 实例作为中间件</span>
  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vite<span class="token punctuation">.</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">;</span>

  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 服务 index.html - 下面我们来处理这个问题</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),k=s("code",null,"vite",-1),v={href:"https://vitejs.cn/guide/api-javascript.html#vitedevserver",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"vite.middlewares",-1),b={href:"https://github.com/senchalabs/connect",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>下一步是实现 <code>*</code> 处理程序供给服务端渲染的 HTML：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>originalUrl<span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 读取 index.html</span>
    <span class="token keyword">let</span> template <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>
      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">&quot;utf-8&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 应用 Vite HTML 转换。这将会注入 Vite HMR 客户端，</span>
    <span class="token comment">//    同时也会从 Vite 插件应用 HTML 转换。</span>
    <span class="token comment">//    例如：@vitejs/plugin-react-refresh 中的 global preambles</span>
    template <span class="token operator">=</span> <span class="token keyword">await</span> vite<span class="token punctuation">.</span><span class="token function">transformIndexHtml</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 加载服务器入口。vite.ssrLoadModule 将自动转换</span>
    <span class="token comment">//    你的 ESM 源码使之可以在 Node.js 中运行！无需打包</span>
    <span class="token comment">//    并提供类似 HMR 的根据情况随时失效。</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> vite<span class="token punctuation">.</span><span class="token function">ssrLoadModule</span><span class="token punctuation">(</span><span class="token string">&quot;/src/entry-server.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 渲染应用的 HTML。这假设 entry-server.js 导出的 \`render\`</span>
    <span class="token comment">//    函数调用了适当的 SSR 框架 API。</span>
    <span class="token comment">//    例如 ReactDOMServer.renderToString()</span>
    <span class="token keyword">const</span> appHtml <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">render</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 注入渲染后的应用程序 HTML 到模板中。</span>
    <span class="token keyword">const</span> html <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;!--ssr-outlet--&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> appHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 6. 返回渲染后的 HTML。</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text/html&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果捕获到了一个错误，让 Vite 来修复该堆栈，这样它就可以映射回</span>
    <span class="token comment">// 你的实际源码中。</span>
    vite<span class="token punctuation">.</span><span class="token function">ssrFixStacktrace</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>package.json</code> 中的 <code>dev</code> 脚本也应该相应地改变，使用服务器脚本：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
-   <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span>
+   <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node server&quot;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生产环境构建" tabindex="-1"><a class="header-anchor" href="#生产环境构建" aria-hidden="true">#</a> 生产环境构建</h2><p>为了将 SSR 项目交付生产，我们需要：</p><ol><li>正常生成一个客户端构建；</li><li>再生成一个 SSR 构建，使其通过 <code>require()</code> 直接加载，这样便无需再使用 Vite 的 <code>ssrLoadModule</code>；</li></ol><p><code>package.json</code> 中的脚本应该看起来像这样：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node server&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build:client&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build --outDir dist/client&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build:server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build --outDir dist/server --ssr src/entry-server.js &quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意使用 <code>--ssr</code> 标志表明这将会是一个 SSR 构建。同时需要指定 SSR 的入口。</p><p>接着，在 <code>server.js</code> 中，通过 <code>p<wbr>rocess.env.NODE_ENV</code> 条件分支，需要添加一些用于生产环境的特定逻辑：</p><ul><li>使用 <code>dist/client/index.html</code> 作为模板，而不是根目录的 <code>index.html</code>，因为前者包含了到客户端构建的正确资源链接。</li><li>使用 <code>require(&#39;./dist/server/entry-server.js&#39;)</code> ，而不是 <code>await vite.ssrLoadModule(&#39;/src/entry-server.js&#39;)</code>（前者是 SSR 构建后的最终结果）。</li><li>将 <code>vite</code> 开发服务器的创建和所有使用都移到 dev-only 条件分支后面，然后添加静态文件服务中间件来服务 <code>dist/client</code> 中的文件。</li></ul><h2 id="生成预加载指令" tabindex="-1"><a class="header-anchor" href="#生成预加载指令" aria-hidden="true">#</a> 生成预加载指令</h2><p><code>vite build</code> 支持使用 <code>--ssrManifest</code> 标志，这将会在构建输出目录中生成一份 <code>ssr-manifest.json</code>(标记)：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>- <span class="token property">&quot;build:client&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build --outDir dist/client&quot;</span><span class="token punctuation">,</span>
+ <span class="token property">&quot;build:client&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build --outDir dist/client --ssrManifest&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的脚本将会为客户端构建生成 <code>dist/client/ssr-manifest.json</code>（是的，该 SSR 清单是从客户端构建生成而来，因为我们想要将模块 ID 映射到客户端文件上）。清单包含模块 ID 到它们关联的 chunk 和资源文件的映射。</p><p>为了利用该清单，框架需要提供一种方法来收集在服务器渲染调用期间使用到的组件模块 ID。</p><p><code>@vitejs/plugin-vue</code> 支持该功能，开箱即用，并会自动注册使用的组件模块 ID 到相关的 Vue SSR 上下文：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/entry-server.js</span>
<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> vueServerRenderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ctx.modules 现在是一个渲染期间使用的模块 ID 的 Set</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),g=s("code",null,"server.js",-1),q=s("code",null,"src/entry-server.js",-1),S=s("code",null,"render",-1),y={href:"https://github.com/vitejs/vite/blob/main/packages/playground/ssr-vue/src/entry-server.js",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="预渲染-ssg" tabindex="-1"><a class="header-anchor" href="#预渲染-ssg" aria-hidden="true">#</a> 预渲染/SSG</h2><p>如果预先知道某些路由所需的路由和数据，我们可以使用与生产环境 SSR 相同的逻辑将这些路由预先渲染到静态 HTML 中。这也被视为一种静态站点生成（SSG）的形式。</p><p>详见 prerender.js 文件。</p><h2 id="ssr-外部化" tabindex="-1"><a class="header-anchor" href="#ssr-外部化" aria-hidden="true">#</a> SSR 外部化</h2><p>Vite 基于以下策略执行自动化的 SSR 外部化:</p><ul><li>如果一个依赖的解析 ESM 入口点和它的默认 Node 入口点不同，它的默认 Node 入口可能是一个可以外部化的 CommonJS 构建。例如，<code>vue</code> 将被自动外部化，因为它同时提供 ESM 和 CommonJS 构建。</li><li>否则，Vite 将检查包的入口点是否包含有效的 ESM 语法 - 如果不包含，这个包可能是 CommonJS，将被外部化。例如，<code>react-dom</code> 将被自动外部化，因为它只指定了唯一的一个 CommonJS 格式的入口。</li></ul><p>如果这个策略导致了错误，你可以通过 <code>ssr.external</code> 和 <code>ssr.noExternal</code> 配置项手动调整。在未来，这个策略将可能得到改进，将去探测该项目是否有启用 <code>type: &quot;module&quot;</code>，这样 Vite 便可以在 SSR 期间通过动态 <code>import()</code> 导入兼容 Node 的 ESM 构建依赖来实现外部化依赖项。</p><h2 id="ssr-专有插件逻辑" tabindex="-1"><a class="header-anchor" href="#ssr-专有插件逻辑" aria-hidden="true">#</a> SSR 专有插件逻辑</h2><p>一些框架，如 Vue 或 Svelte，会根据客户端渲染和服务端渲染的区别，将组件编译成不同的格式。可以向以下的插件钩子中，给 Vite 传递额外的 <code>options</code> 对象，对象中包含 <code>ssr</code> 属性来支持根据情景转换：</p><ul><li><code>resolveId</code></li><li><code>load</code></li><li><code>transform</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mySSRPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;my-ssr&quot;</span><span class="token punctuation">,</span>
    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token operator">?.</span>ssr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行 ssr 专有转换...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>options</code> 中的 <code>load</code> 和 <code>transform</code> 为可选项，rollup 目前并未使用该对象，但将来可能会用额外的元数据来扩展这些钩子函数。</p><p>注意：Vite 2.7 之前的版本，会提示你 <code>ssr</code> 参数的位置不应该是 <code>options</code> 对象。目前所有主框架和插件都已对应更新，但你可能还会发现使用过时 API 的旧文章。</p><h2 id="ssr-target" tabindex="-1"><a class="header-anchor" href="#ssr-target" aria-hidden="true">#</a> SSR Target</h2><p>SSR 构建的默认目标为 node 环境，但你也可以让服务运行在 Web Worker 上。每个平台的打包条目解析是不同的。你可以将<code>ssr.target</code> 设置为 <code>webworker</code>，以将目标配置为 Web Worker。</p><h2 id="ssr-bundle" tabindex="-1"><a class="header-anchor" href="#ssr-bundle" aria-hidden="true">#</a> SSR Bundle</h2><p>在某些如 <code>webworker</code> 运行时等特殊情况中，你可能想要将你的 SSR 打包成单个 JavaScript 文件。你可以通过设置 <code>ssr.noExternal</code> 为 <code>true</code> 来启用这个行为。这将会做两件事：</p><ul><li>将所有依赖视为 <code>noExternal</code>（非外部化）</li><li>若任何 Node.js 内置内容被引入，将抛出一个错误</li></ul>`,18);function j(x,_){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("在构建 SSR 应用程序时，你可能希望完全控制主服务器，并将 Vite 与生产环境脱钩。因此，建议以中间件模式使用 Vite。下面是一个关于 "),s("a",r,[n("express"),e(a)]),n(" 的例子")]),d,s("p",null,[n("这里 "),k,n(" 是 "),s("a",v,[n("ViteDevServer"),e(a)]),n(" 的一个实例。"),m,n(" 是一个 "),s("a",b,[n("Connect"),e(a)]),n(" 实例，它可以在任何一个兼容 connect 的 Node.js 框架中被用作一个中间件。")]),h,s("p",null,[n("我们现在需要在 "),g,n(" 的生产环境分支下读取该清单，并将其传递到 "),q,n(" 导出的 "),S,n(" 函数中。这将为我们提供足够的信息，来为异步路由相应的文件渲染预加载指令！查看 "),s("a",y,[n("示例代码"),e(a)]),n(" 获取完整示例。")]),f])}const R=p(l,[["render",j],["__file","4-vite-ssr.html.vue"]]);export{R as default};
