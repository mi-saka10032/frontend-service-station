import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as o,a as t,b as e,e as l,d as r,r as i}from"./app.9676ab1b.js";const d={},p={href:"https://juejin.cn/post/6844904162509979662",target:"_blank",rel:"noopener noreferrer"},c={href:"https://blog.csdn.net/weixin_43522687/article/details/106750074",target:"_blank",rel:"noopener noreferrer"},f=r('<h2 id="实现方案" tabindex="-1"><a class="header-anchor" href="#实现方案" aria-hidden="true">#</a> 实现方案</h2><p>单纯根据对概念的理解，很容易想到实现微前端的重要思想就是将应用进行拆解和整合，通常是一个父应用加上一些子应用，那么使用类似 Nginx 配置不同应用的转发，或是采用 iframe 来将多个应用整合到一起等等这些其实都属于微前端的实现方案，也是微前端概念出现前 web 应用之间的整合方案。除此之外，也有真正全新的实现方案：</p><p><strong>Nginx 路由转发</strong>：通过 Nginx 配置反向代理来实现不同路径映射到不同应用，例如：<code>www.xxx.com/app1</code>映射 app1，<code>www.xxx.com/app2</code>映射到 app2，这种<strong>整合方案</strong>并不属于前端层面的改造，更多的是运维的配置</p><p><strong>iframe 嵌套</strong>：父应用单独是一个页面，每个子应用嵌套一个 iframe，父子通信可采用 postMessage 或者 contentWindow 等方式</p><p><strong>Web Components</strong>：全新的开发模式，每个子应用需要采用纯 Web Components 技术编写组件。每个子应用都拥有单独的 js 和 css，支持单独部署</p><p><strong>组合式应用路由分发</strong>：每个子应用独立构建和部署，运行时由父应用来进行路由管理，应用加载、启动、卸载以及通信等</p><table><thead><tr><th style="text-align:left;">方案</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th></tr></thead><tbody><tr><td style="text-align:left;">Nginx 转发</td><td style="text-align:left;">简单，快速，易配置</td><td style="text-align:left;">在切换应用时会触发浏览器刷新，影响体验</td></tr><tr><td style="text-align:left;">iframe 嵌套</td><td style="text-align:left;">实现简单，子应用之间自带沙箱，天然隔离，互不影响</td><td style="text-align:left;">iframe 的样式显示、兼容性都很局限；太过简单而显得 low</td></tr><tr><td style="text-align:left;">Web Components</td><td style="text-align:left;">每个子应用拥有独立的 script 和 css，也可单独部署</td><td style="text-align:left;">对于历史系统，改造成本高，子应用通信较为复杂，易踩坑</td></tr><tr><td style="text-align:left;">组合式应用路由分发</td><td style="text-align:left;">纯前端改造，体验良好，可无感知切换，子应用相互隔离</td><td style="text-align:left;">需要设计和开发，由于父子应用处于同一页面运行，需要解决子应用的样式冲突、变量污染、通信机制等技术点</td></tr></tbody></table><p>上述方案中，每种都有自己的优劣，最原始的 Nginx 配置反向代理是从接入层的角度来将系统进行分离，但是需要运维配置，而 iframe 嵌套是最简单和最快速的方案，但是 iframe 的弊端也是无法避免的，而 Web Components 的方案则需要大量的改造成本，最后的组合式应用路由分发方案改造成本中等并且能满足大部分需求，也不影响各前端应用的体验，是当下各个业务普遍采用的一种方案</p>',8);function g(x,h){const n=i("ExternalLinkIcon");return s(),o("div",null,[t("p",null,[e("参考链接 1："),t("a",p,[e("https://juejin.cn/post/6844904162509979662"),l(n)])]),t("p",null,[e("参考链接 2："),t("a",c,[e("https://blog.csdn.net/weixin_43522687/article/details/106750074"),l(n)])]),f])}const y=a(d,[["render",g],["__file","2-plan.html.vue"]]);export{y as default};
