import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as l,d as t}from"./app.9676ab1b.js";const p={},c=t('<h2 id="事件绑定" tabindex="-1"><a class="header-anchor" href="#事件绑定" aria-hidden="true">#</a> 事件绑定</h2><ol><li>使用 v-on:xxx 或 @xxx 绑定事件，其中 xxx 是事件名</li><li>事件的回调需要配置在 methods 对象中，最终会在 vm 上</li><li>methods 中配置的函数，不要用箭头函数，否则 this 不是 vm</li><li>methods 中配置的函数，都是被 Vue 所管理的函数，this 指向是 vm 或组件实例对象</li><li>@click=&quot;demo&quot; 和 @click=&quot;demo($event)&quot; 效果一致，但后者可以传参</li><li>绑定事件的时候引号内可以写一些简单的语句</li></ol><h2 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符" aria-hidden="true">#</a> 事件修饰符</h2><ol><li>@click.prevent：阻止事件的默认行为 event.preventDefault()</li><li>@click.stop : 停止事件冒泡 event.stopPropagation()</li><li>@click.one：事件只触发一次</li><li>@click.capture：使用事件的捕获模式</li><li>@click.self：只有 event.target 是当前操作的元素时才触发事件</li><li>@click.passive：事件的默认行为立即执行，无需等待事件回调执行完毕（先动作，再执行函数）</li></ol><p>修饰符可连续写如 @click.one.prevent</p><h2 id="按键修饰符" tabindex="-1"><a class="header-anchor" href="#按键修饰符" aria-hidden="true">#</a> 按键修饰符</h2><p>1.keycode : 操作的是某个 keycode 值的键</p><p>2.keyName : 操作的某个按键名的键(少部分)</p><ul><li>常用的按键别名：</li></ul><p>回车 =&gt; enter</p><p>删除 =&gt; delete（捕获“删除”和“退格”键）</p><p>退出 =&gt; esc</p><p>空格 =&gt; space</p><p>换行 =&gt; tab</p><p>上 =&gt; up</p><p>下 =&gt; down</p><p>左 =&gt; left</p><p>右 =&gt; right</p><ul><li><p>Vue 未提供别名的按键，可以使用按键原始的 key 值去绑定，但要注意转为 kebab-case（短横线命名）</p></li><li><p>系统修饰键（用法特殊）：ctrl、alt、shift、meta</p></li></ul><p>（1）配合keyup使用，按下修饰键的同事，再按下其他键，随后释放其他键，事件才被触发。</p><p>（2）配合keydown使用，正常触发事件。</p><ul><li><p>也可以使用keyCode去指定具体的按键（不推荐）</p></li><li><p><code>Vue.config.keyCodes[自定义键名]</code> = 键码，定制按键别名</p></li></ul>',22),o=[c];function a(r,d){return i(),l("div",null,o)}const h=e(p,[["render",a],["__file","3-事件处理.html.vue"]]);export{h as default};
