import{_ as n,Y as s,Z as a,a1 as t}from"./framework-bb209140.js";const p={},e=t(`<p>所有权是 Rust 最独特的特性，它让 Rust 无需 GC 就可以保证内存安全</p><h2 id="什么是所有权" tabindex="-1"><a class="header-anchor" href="#什么是所有权" aria-hidden="true">#</a> 什么是所有权</h2><ul><li>Rust 的核心特性就是所有权</li><li>所有程序在运行时都必须管理它们使用计算机内存的方式 <ul><li>有些语言有 GC 机制，在程序运行时，它们会不断寻找不再使用的内存</li><li>在其他语言中，程序员必须显式地分配和释放内存</li></ul></li><li>Rust 采用了第三种方式： <ul><li>内存是通过一个所有权系统来管理的，其中包含一组编译器在编译时检查的规则</li><li>当程序运行时，所有权特性不会减慢程序的运行速度</li></ul></li></ul><h2 id="内存空间" tabindex="-1"><a class="header-anchor" href="#内存空间" aria-hidden="true">#</a> 内存空间</h2><p>在像 Rust 这样的系统级编程语言里，一个值在 stack 上还是在 heap 上对语言的行为和你为什么要做某些决定是有更大影响的</p><p>在你的代码运行的时候，stack 和 heap 都是你可用的内存，但他们的结构很不相同。</p><h3 id="内存存储规则" tabindex="-1"><a class="header-anchor" href="#内存存储规则" aria-hidden="true">#</a> 内存存储规则</h3><ul><li><p>stack 按值的接收顺序来存储，按相反的顺序将它们移除（后进先出，LIFO）</p><ul><li>添加数据为压入栈</li><li>移除数据为弹出栈</li></ul></li><li><p>所有存储在 stack 上的数据必须拥有已知的固定大小</p><ul><li>编译时大小未知的数据或运行时大小可能发生变化的数据必须存放在 heap 上</li></ul></li><li><p>把值压到 stack 上不叫分配，因为指针是已知固定大小的，可以把指针存放在 stack 上</p><ul><li>但如果想要实际数据，你必须使用指针来定位</li><li>把数据压到 stack 上要比在 heap 上分配快得多 <ul><li>因为操作系统不需要寻找用来存储新数据的空间，那个位置永远都在 stack 的顶端</li></ul></li><li>在 heap 上分配空间需要做更多的工作 <ul><li>操作系统首先需要找到一个足够大的空间来存放数据，然后要做好记录方便下次分配</li></ul></li></ul></li><li><p>heap 内存组织性差一些，访问 heap 中的数据要比访问 stack 中的数据慢，因为需要通过指针才能找到 heap 中的数据</p><ul><li>当你把数据放入 heap 时，你会请求一定数量的空间</li><li>操作系统在 heap 里找到一块足够大的空间，把它标记为再用，并返回一个指针，也就是这个空间的地址</li><li>这个过程叫做在 heap 上进行分配，有时仅仅称为“分配”</li></ul></li></ul><h3 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用" aria-hidden="true">#</a> 函数调用</h3><ul><li>当你的代码调用函数时，值被传入到行数（也包括只指向 heap 的指针）。函数本地的变量被压到 stack 上。当函数结束后，这些值会从 stack 上弹出。</li></ul><h3 id="所有权存在原因" tabindex="-1"><a class="header-anchor" href="#所有权存在原因" aria-hidden="true">#</a> 所有权存在原因</h3><p>所有权解决的问题：</p><ul><li>跟踪代码的哪些部分正在使用 heap 的哪些数据</li><li>最小化 heap 上的重复数据量</li><li>清理 heap 上未使用的数据以避免空间不足</li><li>管理 heap 数据是所有权存在的重要原因</li></ul><h2 id="所有权规则" tabindex="-1"><a class="header-anchor" href="#所有权规则" aria-hidden="true">#</a> 所有权规则</h2><ul><li>每个值都有一个变量，这个变量是该值的所有者</li><li>每个值同时只能有一个所有者</li><li>当所有者超出作用域时，该值将被删除</li></ul><h3 id="变量作用域" tabindex="-1"><a class="header-anchor" href="#变量作用域" aria-hidden="true">#</a> 变量作用域</h3><p>scope 是程序中一个项目的有效范围</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// s 不可用</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// s 可用</span>
  <span class="token comment">// 可以对s进行相关操作</span>
<span class="token punctuation">}</span> <span class="token comment">// s作用域到此结束，s不可再用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配" aria-hidden="true">#</a> 内存分配</h2><ul><li>以 String 为例，当用完 String 之后，需要使用某种方式将内存返回给操作系统，这步，在拥有 GC 的语言中，GC 会跟踪并清理不再使用的内存</li><li>没有 GC，就需要我们去识别内存何时不再使用，并调用代码将它返回 <ul><li>如果忘了，就是浪费内存</li><li>如果提前做了，变量就会非法</li><li>如果做了两次，也是 BUG。必须一次分配对应一次释放</li></ul></li></ul><p>Rust 采用了不同的方式，对于某个值来说，当拥有它的变量走出作用范围时，内存会立即自动地交还给操作系统，此时会调用 Drop Trait</p><h3 id="move" tabindex="-1"><a class="header-anchor" href="#move" aria-hidden="true">#</a> Move</h3><p><code>let s1 = String::from(&quot;hello&quot;);</code></p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/rust/rust-string.png" alt="rust-string" tabindex="0" loading="lazy"><figcaption>rust-string</figcaption></figure><p>一个 String 由以上三部分组成：</p><ol><li>一个指向存放字符串内容的内存的指针</li><li>一个长度 len</li><li>一个容量 capacity</li></ol><p>上面这些东西放在 stack 上，存放字符串内容的部分在 heap 上</p><p>长度 len 则是存放字符串内容所需的字节数（实际存了多少）</p><p>容量 capacity 是指 String 从操作系统总共获得内存的总字节数（最大可存多少）</p><p><code>let s2 = s1;</code></p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/rust/rust-string-copy.png" alt="rust-string-move" tabindex="0" loading="lazy"><figcaption>rust-string-move</figcaption></figure><ul><li>当把 s1 赋给 s2 时，String 的数据被复制了一份：即在 stack 上复制了一份指针、长度和容量，但并没有复制指针指向的 heap 上的数据</li><li>当变量离开作用域时，Rust 会自动调用 drop 函数，并将变量使用的 heap 内存释放</li><li>当 s1、s2 离开作用域时，它们都会尝试释放相同的内存，这里会引起二次释放（double free）BUG</li><li>为了保证内存安全： <ul><li>Rust 没有尝试复制被分配的内存</li><li>Rust 会让 s1 失效。当 s1 离开作用域的时候，Rust 不需要释放任何东西</li><li>经典报错：<code>error[E0382]：borrow of moved value: s1</code></li></ul></li></ul><p>我们将这种变量交互的方式称为移动（Move）而不是拷贝（Copy），是因为 Rust 不同于含有 GC 的语言，直接让 s1 失效了</p><p>这里隐含了一个设计原则：<strong>Rust 不会自动创建数据的深拷贝</strong></p><p>就运行时性能而言，任何自动赋值操作都是廉价的</p><h3 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> Clone</h3><p>如果想对 heap 上面的 String 数据进行深度拷贝，而不仅仅是 stack 上的数据，可以使用 clone 方法</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}, {}&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/rust/rust-string-clone.png" alt="rust-string-clone" tabindex="0" loading="lazy"><figcaption>rust-string-clone</figcaption></figure><h3 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> Copy</h3><ul><li>Copy trait，可以用于整数这样完全存放在 stack 上面的标量类型</li><li>如果一个类型实现了 Copy 这个 trait，那么旧的变量在赋值后仍然可用</li><li>如果一个类型或者该类型的一部分实现了 Drop trait，那么 Rust 不允许让它再去实现 Copy Trait <ul><li>例如<code>(i32, String)</code>就不允许 Copy</li></ul></li></ul><p><code>let x = 5;</code></p><p><code>let y = x;</code></p><p>整数是已知且固定大小的简单的值，这两个 5 被压到了 stack 中</p><h2 id="所有权与函数" tabindex="-1"><a class="header-anchor" href="#所有权与函数" aria-hidden="true">#</a> 所有权与函数</h2><h3 id="值传递方式" tabindex="-1"><a class="header-anchor" href="#值传递方式" aria-hidden="true">#</a> 值传递方式</h3><p>在语义上，将值传递给函数和把值传递给变量是类似的，将值传递给函数将发生 Move 或 Copy</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// s所有权Move</span>
  <span class="token function">take_ownership</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// s失效</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token comment">// x所有权Copy</span>
  <span class="token function">makes_copy</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// x所有权Copy后仍可用</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;x: {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">take_ownership</span><span class="token punctuation">(</span>some_string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> some_string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">makes_copy</span><span class="token punctuation">(</span>some_number<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> some_number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回值与作用域" tabindex="-1"><a class="header-anchor" href="#返回值与作用域" aria-hidden="true">#</a> 返回值与作用域</h3><p>函数在返回值的过程中同样也会发生所有权转移</p><ul><li>一个变量的所有权总是遵循同样的模式 <ul><li>把一个值赋给其他变量时就会发生移动</li><li>当一个包含 heap 数据的变量离开作用域时，它的值会被 drop 函数清理，除非数据的所有权移动到另一个变量上了</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// s1接收从gives_ownership移交的String所有权</span>
  <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">gives_ownership</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// s2所有权移动至takes_and_gives_back</span>
  <span class="token comment">// s3接收从takes_and_gives_back移交的String所有权</span>
  <span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">takes_and_gives_back</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// s1、s3销毁</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">gives_ownership</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> some_string <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// some_string所有权移动至s1</span>
  some_string
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">takes_and_gives_back</span><span class="token punctuation">(</span>a_string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
  <span class="token comment">// a_string所有权移动至s3</span>
  a_string
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用和借用" tabindex="-1"><a class="header-anchor" href="#引用和借用" aria-hidden="true">#</a> 引用和借用</h2><p>参数的类型是<code>&amp;String</code>而不是<code>String</code></p><p><code>&amp;</code>符号就表示引用：允许你引用某些值而不取得其所有权</p><p>我们把引用作为函数参数这个行为叫做借用</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// s1向calculate_length借用所有权，而非所有权move</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The length of &#39;{}&#39; is {}.&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// s借用s1的所有权</span>
<span class="token keyword">fn</span> <span class="token function-definition function">calculate_length</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
  <span class="token comment">// 会报错，引用变量不可变</span>
  <span class="token comment">// s.push_str(&quot;, world&quot;);</span>
  s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 销毁s的所有权，但s引用的s1不受影响，因为s并不拥有s1的所有权</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/rust/rust-string-reference.png" alt="rust-string-reference" tabindex="0" loading="lazy"><figcaption>rust-string-reference</figcaption></figure><h3 id="不可变引用" tabindex="-1"><a class="header-anchor" href="#不可变引用" aria-hidden="true">#</a> 不可变引用</h3><p><strong>引用变量不可修改，默认不可变</strong></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// s1向calculate_length借用所有权，而非所有权move</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The length of &#39;{}&#39; is {}.&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// s借用s1的所有权</span>
<span class="token keyword">fn</span> <span class="token function-definition function">calculate_length</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
  <span class="token comment">// 会报错，引用变量不可变</span>
  s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">&quot;, world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 销毁s的所有权，但s引用的s1不受影响，因为s并不拥有s1的所有权</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可变引用" tabindex="-1"><a class="header-anchor" href="#可变引用" aria-hidden="true">#</a> 可变引用</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// s1向calculate_length借用所有权，而非所有权move</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The length of &#39;{}&#39; is {}.&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// s借用s1的所有权</span>
<span class="token keyword">fn</span> <span class="token function-definition function">calculate_length</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
  s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">&quot;, world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 销毁s的所有权，但s引用的s1不受影响，因为s并不拥有s1的所有权</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可变引用有一个重要限制：在特定作用域内，对某一块数据，只能有一个可变的引用</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span>
  <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The length of &#39;{}&#39; is {}.&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><code>error[E0499]: cannot borrow s as mutable more than once at a time</code></p><p>这样做的好处是可在编译时防止数据竞争</p><p>以下三种行为会发生数据竞争：</p><ul><li>两个或多个指针同时访问同一个数据</li><li>至少有一个指针用于写入数据</li><li>没有使用任何机制来同步对数据的访问</li></ul><p>可以通过创建新的作用域，来避开同时的创建多个可变引用的禁用规则</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="另一重限制" tabindex="-1"><a class="header-anchor" href="#另一重限制" aria-hidden="true">#</a> 另一重限制</h3><ul><li>不可以同时拥有一个可变引用和一个不可变引用</li><li>多个不变的引用是允许的</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> r1 <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>
  <span class="token keyword">let</span> r2 <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>
  <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{} {} {}&quot;</span><span class="token punctuation">,</span> r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><code>error[E0502]: cannot borrow s as mutable because it is also borrowed as immutable</code></p><h3 id="悬空引用" tabindex="-1"><a class="header-anchor" href="#悬空引用" aria-hidden="true">#</a> 悬空引用</h3><p>别名：Dangling References</p><p>指一个指针引用了内存中的某个地址，而这块内存可能已经释放并分配给其他人使用了</p><p>在 Rust 里，编译器可保证<strong>引用永远都不是悬空引用</strong></p><p>如果你引用了某些数据，编译器将保证在引用离开作用域之前数据不会离开作用域</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">dangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">dangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>s
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>error[E0106]: missing lifetime specifier</code></p><h3 id="引用规则" tabindex="-1"><a class="header-anchor" href="#引用规则" aria-hidden="true">#</a> 引用规则</h3><ul><li>在任何给定的时刻，只能满足下列条件之一： <ul><li><strong>一个</strong>可变的引用</li><li><strong>任意数量</strong>不可变的引用</li></ul></li><li>引用必须一直有效</li></ul><h2 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h2><p>切片支持多种类型：数组、元组、向量、字符串等，也就是说支持对集合中连续元素的访问进行切片，这里仅以String作为例子</p><p>demo 示例：编写一个函数，它接收字符串作为参数，返回它在这个字符串里找到的第一个单词，如果函数没找到任何空格，那么整个字符串就被返回</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> word_index <span class="token operator">=</span> <span class="token function">first_world</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 即使调用了clear，word_index也仍然为5</span>
    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> word_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">first_world</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            len <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    len
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个 demo，虽然确实能提供正确索引，但是当目标 String 可变并且被修改之后，索引无法正确同步，仍存在一定同步风险。</p><p>因此，Rust 另外提供了一种不持有所有权的数据类型：切片（slice）</p><ul><li>字符串切片是指向字符串中一部分内容的引用</li><li><code>[0..5]</code>表示从 0 开始，到 5 结束，左闭右开</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 从零开始可简写[..5]</span>
  <span class="token keyword">let</span> world <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">..</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 到末尾结束可简写[6..]</span>
  <span class="token keyword">let</span> whole <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>字符串切片的范围索引必须发生在有效的 UTF-8 字符边界内</li><li>如果尝试从一个多字节的字符中创建字符串切片，程序会报错并退出</li></ul><p>重写最开始的例子</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s<span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> word_index <span class="token operator">=</span> <span class="token function">first_world</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 即使调用了clear，word_index也仍然为5</span>
    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> word_index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 改为返回字符串切片</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s<span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token function">first_world</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// clear调用会报错，因为在上一行已经返回了不可变引用slice</span>
    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> slice<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">first_world</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    slice
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串字面量" tabindex="-1"><a class="header-anchor" href="#字符串字面量" aria-hidden="true">#</a> 字符串字面量</h3><p>再次重申，字符串字面值就是<code>&amp;str</code>切片</p><p><code>let s = &quot;Hello, World!&quot;;</code></p><p>变量 s 的类型是<code>&amp;str</code>，它是一个指向二进制程序特定位置的切片，字面值不可变</p><h3 id="传递字符串切片" tabindex="-1"><a class="header-anchor" href="#传递字符串切片" aria-hidden="true">#</a> 传递字符串切片</h3><p><code>fn first_word(s: &amp;String) -&gt; &amp;str {</code></p><p>有经验的 Rust 开发者会采用<code>&amp;str</code>作为参数类型，因为这样就可以同时接收 String 和<code>&amp;str</code>类型的参数了</p><p><code>fn first_word(s: &amp;str) -&gt; &amp;str {</code></p><p>定义函数时使用字符串切片来代替字符串引用，会使我们的API更加通用，且不会损失任何功能</p>`,107),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","2-ownership.html.vue"]]);export{r as default};
