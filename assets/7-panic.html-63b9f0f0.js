import{_ as n,Y as s,Z as a,a1 as p}from"./framework-bb209140.js";const e={},t=p(`<h2 id="错误处理概述" tabindex="-1"><a class="header-anchor" href="#错误处理概述" aria-hidden="true">#</a> 错误处理概述</h2><p>在大部分情况下，在编译时支持提示错误，并处理</p><p>错误分类：</p><ul><li>可恢复，例如文件未找到，可再次尝试</li><li>不可恢复，例如访问的索引超出范围</li></ul><p><strong>注意</strong></p><p>Rust 没有类似的异常机制，取而代之的是：</p><ul><li>可恢复错误使用：<code>Result&lt;T,E&gt;</code></li><li>不可恢复：<code>panic!</code>宏</li></ul><h2 id="panic" tabindex="-1"><a class="header-anchor" href="#panic" aria-hidden="true">#</a> <code>panic!</code></h2><p>当<code>panic!</code>宏执行：</p><ul><li>你的程序会打印一个错误信息</li><li>展开（unwind）、清理调用栈（stack）</li><li>退出程序</li><li>为应对 panic，Rust 也支持展开 or 中止（abort）调用栈</li></ul><p>默认情况下，当 panic 发生时：</p><ul><li>程序展开调用栈（工作量大），Rust 沿着调用栈往回走，并清理每个遇到的函数中的数据</li><li>或立即中止调用栈，此时不进行清理，直接停止程序，而内存需要操作系统 OS 进行清理</li></ul><p>若是想让构建产物的二进制文件尽可能小，我们需要把设置从“展开”改为“中止”操作</p><h3 id="cargo-toml设置" tabindex="-1"><a class="header-anchor" href="#cargo-toml设置" aria-hidden="true">#</a> <code>Cargo.toml设置</code></h3><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span>
<span class="token comment"># 内容略</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token comment"># 内容略</span>

<span class="token punctuation">[</span><span class="token table class-name">profile.release</span><span class="token punctuation">]</span>
<span class="token key property">panic</span> <span class="token punctuation">=</span> <span class="token string">&#39;abort&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回溯信息" tabindex="-1"><a class="header-anchor" href="#回溯信息" aria-hidden="true">#</a> 回溯信息</h3><p><code>panic!</code>可能出现在：</p><ul><li>我们写的代码中</li><li>我们所依赖的代码中</li></ul><p>可通过调用<code>panic!</code>的函数的回溯信息来定位引起问题的代码。通常是设置环境变量<code>RUST_BACKTRACE</code>来得到回溯信息</p><p>为了获取带有调试信息的回溯，必须启用调试符号（不带<code>--release</code>），开发环境下（cargo run）默认不携带该信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 简要回溯细节</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cargo</span> run
<span class="token comment"># 完整回溯细节</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">RUST_BACKTRACE</span><span class="token operator">=</span>full <span class="token operator">&amp;&amp;</span> <span class="token function">cargo</span> run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="result枚举错误" tabindex="-1"><a class="header-anchor" href="#result枚举错误" aria-hidden="true">#</a> <code>Result</code>枚举错误</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>T：操作成功情况下，Ok 变体里返回的数据类型 E：操作失败情况下，Err 变体里返回的错误类型</p><h3 id="match处理" tabindex="-1"><a class="header-anchor" href="#match处理" aria-hidden="true">#</a> <code>match处理</code></h3><p>以 fs 的 open 方法为例，搭配 match 来处理错误（和 Option 枚举一样，Result 及其变体也是由 prelude 带入作用域）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> error<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">NotFound</span> <span class="token operator">=&gt;</span> <span class="token keyword">match</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ok</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fc<span class="token punctuation">,</span>
        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Error creating file {:?}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      other_error <span class="token operator">=&gt;</span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Error opening file {:?}&quot;</span><span class="token punctuation">,</span> other_error<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个匹配不同错误的例子，使用了很多 match。match 很有用，但是也非常原始</p><p><code>Result&lt;T, E&gt;</code>的另一种用法是闭包（closure）：</p><ul><li>它们接收闭包作为参数</li><li>使用 match 实现</li><li>使用这些方法会让代码更简洁</li></ul><h3 id="unwrap处理" tabindex="-1"><a class="header-anchor" href="#unwrap处理" aria-hidden="true">#</a> <code>unwrap处理</code></h3><p>unwrap 是 match 表达式的一个快捷方法</p><ul><li>如果 Result 结果是 Ok，返回 Ok 里面的值</li><li>如果 Result 结果是 Err，调用<code>panic!</code>宏</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="expect处理" tabindex="-1"><a class="header-anchor" href="#expect处理" aria-hidden="true">#</a> <code>expect处理</code></h3><p>和 unwrap 类似，但可指定错误信息</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;无法打开文件 hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="传播错误" tabindex="-1"><a class="header-anchor" href="#传播错误" aria-hidden="true">#</a> 传播错误</h2><p>将错误返回给调用者</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">match</span> f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> <code>?</code>运算符</h3><p>传播错误的快捷方式</p><ul><li>如果 Result 是 Ok：Ok 中的值就是表达式的结果，然后继续执行程序</li><li>如果 Result 是 Err：Err 就是整个函数的返回值，就像使用了 return</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>?</code>还支持链式调用</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Read</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">read_username_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong><code>?</code>运算符只能用于返回 Result 的函数</p><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from" aria-hidden="true">#</a> <code>?&amp;from</code></h3><p><code>Trait std::convert::From</code>上的 from 函数</p><ul><li>用于错误之间的转换</li><li>被<code>?</code>所应用的错误，会隐式地被 from 函数处理</li></ul><p>当<code>?</code>调用 from 函数时：它所接收的错误类型会被转化为当前函数返回类型所定义的数据类型</p><p>主要用于针对不同错误原因，返回同一种错误类型，只要每个错误类型实现了转换为所返回的错误类型的 from 函数即可</p><h3 id="main错误类型" tabindex="-1"><a class="header-anchor" href="#main错误类型" aria-hidden="true">#</a> <code>main</code>错误类型</h3><p>通常情况下，main 函数的返回类型是：<code>()</code></p><p>但是 main 函数的返回类型也可以是：<code>Result&lt;(), Box&lt;dyn Error&gt;&gt;</code></p><p>其中<code>Box&lt;dyn Error&gt;</code>是 trait 对象</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误使用原则" tabindex="-1"><a class="header-anchor" href="#错误使用原则" aria-hidden="true">#</a> 错误使用原则</h2><ul><li>在定义一个可能失败的函数时，优先考虑返回 Result，其次才是<code>panic!</code></li></ul><ol><li>编写示例：主要通过使用 unwrap 来控制</li><li>原型代码：unwrap、expect</li><li>测试：unwrap、expect</li></ol><ul><li>当你比编译器掌握更多的信息</li></ul><p>你可以确定 Result 就是 Ok：unwrap</p><h3 id="指导性建议" tabindex="-1"><a class="header-anchor" href="#指导性建议" aria-hidden="true">#</a> 指导性建议</h3><p>当代码最终可能处于损坏状态时：最好使用<code>panic!</code></p><p>损坏状态：某些假设、保证、约定或不可变性被打破</p><ul><li>例如非法的值、矛盾的值或空缺的值被传入代码</li><li>以及下列中的一条： <ol><li>这种损坏状态并不是预期能否偶尔发生的事情</li><li>在此之后，您的代码如果处于这种损坏状态就无法运行</li><li>在您使用的类型中没有一个好的方法来将这些信息（处于损坏状态）进行编码</li></ol></li></ul><h3 id="场景建议" tabindex="-1"><a class="header-anchor" href="#场景建议" aria-hidden="true">#</a> 场景建议</h3><ul><li>调用你的代码，传入无意义的参数值：使用<code>panic!</code></li><li>调用外部不可控代码，返回非法状态，你无法修复：使用<code>panic!</code></li><li>如果失败是可预期的：Result</li><li>当你的代码对值进行操作，首先应该验证这些值：使用<code>panic!</code></li></ul>`,68),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","7-panic.html.vue"]]);export{r as default};
