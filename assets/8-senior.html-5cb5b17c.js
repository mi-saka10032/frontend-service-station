import{_ as t,C as p,Y as e,Z as o,$ as c,a0 as n,a2 as l,a3 as i,a1 as s}from"./framework-bb209140.js";const u={},r=s(`<h2 id="函数提取封装" tabindex="-1"><a class="header-anchor" href="#函数提取封装" aria-hidden="true">#</a> 函数提取封装</h2><p>Rust 函数提取的目的是为了消除重复代码，其步骤为：</p><ol><li>识别重复代码</li><li>提取重复代码到函数体中，并在函数签名中指定函数的输入和返回值</li><li>将重复的代码使用函数调用进行替代</li></ol><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">largest</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// &amp;item：将item结构为i32</span>
  <span class="token keyword">for</span> <span class="token operator">&amp;</span>item <span class="token keyword">in</span> list <span class="token punctuation">{</span>
    <span class="token keyword">if</span> item <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span>
      largest <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  largest
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> number_list <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> number_list <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">largest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest number is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>泛型能提高代码复用能力，是具体类型或其它属性的抽象代替：</p><ul><li>你编写的代码不是最终的代码，而是一种模板，里面有一些“占位符”</li><li>编译器在编译时将“占位符”替换为具体的类型</li><li>类型参数很短，通常是一个字母，遵守 CamelCase 规范，最常用的是 T（type 的缩写）</li></ul><h3 id="函数泛型" tabindex="-1"><a class="header-anchor" href="#函数泛型" aria-hidden="true">#</a> 函数泛型</h3><p>函数中的泛型包含参数类型和返回类型两种</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">largest</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token operator">&amp;</span>item <span class="token keyword">in</span> list <span class="token punctuation">{</span>
    <span class="token comment">// 如果不对T进行约束，这里比较判断会报错，后面会提到泛型约束</span>
    <span class="token keyword">if</span> item <span class="token operator">&gt;</span> largest <span class="token punctuation">{</span>
      largest <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  largest
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体泛型" tabindex="-1"><a class="header-anchor" href="#结构体泛型" aria-hidden="true">#</a> 结构体泛型</h3><p>struct 可以使用多个泛型的类型参数。但是如果类型参数太多，就意味着你的代码需要重组为多个更小的单元</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
  y<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> integer <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> x<span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>enum 支持变体持有泛型数据类型，例如：<code>Option&lt;T&gt;</code>、<code>Result&lt;T, E&gt;</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">None</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为 struct 或 enum 实现方法的时候，可以在定义中使用泛型</p><p>注意：</p><ul><li>把 T 放在 impl 关键字后，表示在类型 T 上实现方法：<code>impl&lt;T&gt; Point&lt;T&gt;</code></li><li>只针对具体类型实现方法，而其他类型不实现则应该是：<code>impl Point&lt;i32&gt;</code></li><li>struct 里的泛型类型参数可以和方法的泛型类型参数不同：<code>fn mixup&lt;V, W&gt;(self, other: Point&lt;V, W&gt;) -&gt; Point&lt;T, W&gt;</code></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
  y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">x</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>
    <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">mixup</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Point</span> <span class="token punctuation">{</span>
      x<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>
      y<span class="token punctuation">:</span> other<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 仅当Point的T为i32时才适用x1方法</span>
<span class="token keyword">impl</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">x1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">i32</span> <span class="token punctuation">{</span>
    <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型性能" tabindex="-1"><a class="header-anchor" href="#泛型性能" aria-hidden="true">#</a> 泛型性能</h3><p>使用泛型的代码和使用具体类型的代码运行速度是相同的，其原因是 Rust 编译时处理泛型采用的是<strong>单态化（monomorphization）</strong>：在编译时将泛型替换为具体类型的过程</p><h2 id="trait" tabindex="-1"><a class="header-anchor" href="#trait" aria-hidden="true">#</a> trait</h2><p>trait：抽象的定义共享行为</p><p>trait bounds（约束）：泛型类型参数指定为实现了特定行为的类型</p><p>trait 告诉 Rust 编译器：某种类型具有哪些并且可以与其它类型共享的功能</p><p>trait 与其它语言的接口（interface）类似，但有些区别</p><h3 id="定义trait" tabindex="-1"><a class="header-anchor" href="#定义trait" aria-hidden="true">#</a> <code>定义trait</code></h3><p>trait 的定义：把方法签名放在一起，来定义实现某种目的所必需的一组行为</p><ul><li>关键字：trait</li><li>只有方法签名，没有具体实现</li><li>trait 可以有多个方法：每个方法签名占一行，以<code>;</code>结尾</li><li>实现该 trait 的类型必须提供具体的方法实现</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现trait" tabindex="-1"><a class="header-anchor" href="#实现trait" aria-hidden="true">#</a> <code>实现trait</code></h3><p>与为类型实现方法类似，不同之处为：</p><ul><li><code>impl Xxxx fro Tweet { ... }</code></li><li>在 impl 的块里，需要对 trait 里的方法签名进行具体的实现</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">NewsArticle</span> <span class="token punctuation">{</span>
  <span class="token keyword">pub</span> headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> location<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}, by {} （{}）&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>headline<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>location<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Tweet</span> <span class="token punctuation">{</span>
  <span class="token keyword">pub</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> reply<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> retweet<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">Tweet</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="约束trait" tabindex="-1"><a class="header-anchor" href="#约束trait" aria-hidden="true">#</a> <code>约束trait</code></h3><p>可以在某个类型上实现某个 trait 的前提条件是：这个类型或这个 trait 是在本地 crate 里定义的</p><p>无法为外部类型来实现外部的 trait：</p><ul><li>这个限制是程序属性的一部分（也就是一致性）</li><li>更具体地说是孤儿规则：之所以这样命名是因为父类型不存在</li><li>此规则确保其他人的代码不能破坏您的代码，反之亦然</li><li>如果没有这个规则，两个 crate 可以为同一类型实现同一个 trait，Rust 就不知道应该使用哪个实现了</li></ul><h3 id="默认实现" tabindex="-1"><a class="header-anchor" href="#默认实现" aria-hidden="true">#</a> 默认实现</h3><p>默认实现的方法可以调用 trait 中其它的方法，即使这些方法没有默认实现</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">summarize_author</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>

  <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;(Read more...)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">summarize_author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">NewsArticle</span> <span class="token punctuation">{</span>
  <span class="token keyword">pub</span> headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> location<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">summarize_author</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;@{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trait作为参数" tabindex="-1"><a class="header-anchor" href="#trait作为参数" aria-hidden="true">#</a> <code>trait作为参数</code></h3><p>impl trait 语法：适用于简单情况</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Summary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>trait bound 语法：适用于复杂情况。</p><p>impl trait 语法是 trait bound 的语法糖</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数组合继承可以使用<code>+</code>指定多个 trait bound</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify1</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>trait bound 使用 where 子句</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify2</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span>
<span class="token keyword">where</span>
    <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">,</span>
    <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">Clone</span> <span class="token operator">+</span> <span class="token class-name">Debug</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>
  <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trait作为返回类型" tabindex="-1"><a class="header-anchor" href="#trait作为返回类型" aria-hidden="true">#</a> <code>trait作为返回类型</code></h3><p>Rust 对于 trait 作为返回类型时，仅支持静态分发类型，也就是返回类型是固定的</p><p>注意：impl trait 只能返回确定的同一种类型，返回可能不同类型代码会报错</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify1</span><span class="token punctuation">(</span>flag<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> flag <span class="token punctuation">{</span>
    <span class="token class-name">NewsArticle</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不支持该实现。因为Tweet和NewsArticle具体实现可能还存在差异，Rust无法识别</span>
    <span class="token class-name">Tweet</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特定trait类型" tabindex="-1"><a class="header-anchor" href="#特定trait类型" aria-hidden="true">#</a> 特定<code>trait</code>类型</h3><p>在使用泛型类型参数的 impl 块上使用 trait bound，我们可以有条件地为实现了特定 trait 的类型来实现方法</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
  y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token keyword">Self</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token operator">+</span> <span class="token class-name">PartialOrd</span><span class="token operator">&gt;</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">cmp_display</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">&gt;=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y <span class="token punctuation">{</span>
      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest member is x = {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The largest member is y = {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以为实现了其它 trait 的任意类型有条件地实现某个 trait</p><p>为满足 trait bound 的所有类型上实现 trait 叫做覆盖实现（blanket implementations）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以这个<code>to_string()</code>方法为例，这是因为 i32 的<code>trait Display</code>对<code>trait ToString</code>做了覆盖实现</p><p>截取部分源码：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">ToString</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token operator">&gt;</span> <span class="token class-name">ToString</span> <span class="token keyword">for</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>
  default <span class="token keyword">fn</span> <span class="token function-definition function">to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关联类型" tabindex="-1"><a class="header-anchor" href="#关联类型" aria-hidden="true">#</a> 关联类型</h3><p>关联类型（associated type）是 trait 中的类型占位符，它可以用于 trait 的方法签名中，可以定义出包含某些类型的 trait，而在实现前无需知道这些类型是什么</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Iterator</span> <span class="token punctuation">{</span>
  <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span>

  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Iterator2</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">Counter</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
  <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token keyword">u32</span><span class="token punctuation">;</span>

  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Options</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token class-name">None</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Iterator2</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Options</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token class-name">None</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Iterator2</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Options</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token class-name">None</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关联类型和泛型区别：</p><table><thead><tr><th style="text-align:left;">泛型</th><th style="text-align:left;">关联类型</th></tr></thead><tbody><tr><td style="text-align:left;">每次实现 trait 时标注类型</td><td style="text-align:left;">无需标注类型</td></tr><tr><td style="text-align:left;">可以为一个类型多次实现某个 trait</td><td style="text-align:left;">无法为单个类型多次实现某个 trait</td></tr></tbody></table><h3 id="supertrait" tabindex="-1"><a class="header-anchor" href="#supertrait" aria-hidden="true">#</a> supertrait</h3><p>需要在一个 trait 中使用其它 trait 的功能：</p><ul><li>需要被依赖的 trait 也被实现</li><li>那个被间接依赖的 trait 就是当前 trait 的 supertrait（类似 trait 继承）</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fmt<span class="token punctuation">;</span>

<span class="token keyword">trait</span> <span class="token type-definition class-name">OutlinePrint</span><span class="token punctuation">:</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span> <span class="token punctuation">{</span>
  <span class="token comment">// self可使用.to_string()方法了</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p>Rust 的每个引用都有自己的生命周期</p><p>生命周期指的是引用保持有效的作用域</p><p>大多数情况下，生命周期是隐式的、可被推断的</p><p>当引用的生命周期可能以不同的形式互相关联时，需手动标注生命周期</p><h3 id="避免悬垂引用" tabindex="-1"><a class="header-anchor" href="#避免悬垂引用" aria-hidden="true">#</a> 避免悬垂引用</h3><p>生命周期的主要目标：避免悬垂引用（dangling reference）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">let</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
      <span class="token comment">// 报错原因：x生命周期仅存在于代码块中，下面的print无法正确打印r借用的x值</span>
      r <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;r:{}&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rust 实现借用判断的功能是编译器中的借用检查器：比较作用域来判断所有的借用是否合法</p><p>比较简单的判断方法：查看变量 r 的作用域从哪一行开始哪一行结束，x 的作用域从哪一行开始哪一行结束。如果 x 的作用域不能覆盖 r 的作用域，那么 r 对 x 的借用就不合法</p><h3 id="泛型生命周期" tabindex="-1"><a class="header-anchor" href="#泛型生命周期" aria-hidden="true">#</a> 泛型生命周期</h3><ul><li>生命周期的标注不会改变引用的生命周期长度</li><li>当指定了泛型生命周期参数，函数可以接收带有任何生命周期的引用</li><li>生命周期的标注：描述了多个引用的生命周期间的关系，但不影响生命周期</li></ul><p>生命周期参数名：</p><ul><li>以<code>&#39;</code>开头</li><li>通常全小写且非常短</li><li>很多人使用<code>&#39;a</code></li></ul><p>生命周期标注位置：</p><ul><li>在引用的<code>&amp;</code>符号后</li><li>使用空格将标注和引用类型分开</li><li>函数名和参数列表之间的<code>&lt; &gt;</code>里</li></ul><p><code>&amp;i32</code> —— 一个引用</p><p><code>&amp;&#39;a i32</code> ——带有显式生命周期的引用</p><p><code>&amp;&#39;a mut i32</code> ——带有显式生命周期的可变引用</p><p><strong>单个生命周期标注本身没有意义</strong></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> string1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token string">&quot;xyz&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">longest</span><span class="token punctuation">(</span>string1<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The longest string is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 生命周期&#39;a 的实际生命周期是：x和y两个生命周期中较小的那个</span>
<span class="token keyword">fn</span> <span class="token function-definition function">longest</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    y
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深入理解生命周期" tabindex="-1"><a class="header-anchor" href="#深入理解生命周期" aria-hidden="true">#</a> 深入理解生命周期</h3><p>指定生命周期参数的方式依赖于函数所做的事情</p><p>从函数返回引用时，返回类型的生命周期参数需要与其中一个参数的生命周期匹配</p><p>如果返回的引用没有指向任何参数，那么它只能引用函数内创建的值：这就是悬垂引用，该值在函数结束时就走出了作用域</p><p>来看一个报错的例子</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> string1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token string">&quot;xyz&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">longest1</span><span class="token punctuation">(</span>string1<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// let result = longest2(string1.as_str(), string2);</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The longest string is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">longest1</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 非常经典的报错，借用转移但是result生命周期仅存于函数内部，所以必定报错</span>
  result<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解决方法</span>
<span class="token keyword">fn</span> <span class="token function-definition function">longest2</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="struct生命周期" tabindex="-1"><a class="header-anchor" href="#struct生命周期" aria-hidden="true">#</a> <code>Struct</code>生命周期</h3><p>Struct 可包括：</p><ul><li>自持有的类型</li><li>引用：需要在每个引用上添加生命周期标注</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">ImportantExcerpt</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  part<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> novel <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Call me Ishmael. Some years age ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> first_sentence <span class="token operator">=</span> novel<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Could not found a &#39;.&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token class-name">ImportantExcerpt</span><span class="token punctuation">{</span>
    part<span class="token punctuation">:</span> first_sentence
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生命周期省略规则" tabindex="-1"><a class="header-anchor" href="#生命周期省略规则" aria-hidden="true">#</a> 生命周期省略规则</h3><p>我们知道：</p><ul><li>每个引用都有生命周期</li><li>需要为使用生命周期的函数或 struct 指定生命周期参数</li></ul><p><strong>省略规则前置概述</strong></p><p>在 Rust 引用分析中所编入的模式称为生命周期省略规则</p><ul><li>这些规则无需开发者来遵守</li><li>它们是一些特殊情况，由编译器来考虑</li><li>如果你的代码符合这些情况，那么就无需显式标注生命周期</li></ul><p><strong>生命周期省略规则不会提供完整的推断</strong></p><ul><li>如果应用规则后，引用的生命周期仍然模糊不清，会触发编译错误</li><li>解决办法：添加生命周期标注，表明引用间的相互关系</li></ul><p><strong>生命周期的 IO</strong></p><ul><li>函数/方法的参数：输入生命周期</li><li>函数/方法的返回值：输出生命周期</li></ul><ol><li>规则 1：每个引用类型的参数都有自己的生命周期</li><li>规则 2：如果只有 1 个输入生命周期参数，那么该生命周期被赋给所有的输出生命周期参数</li><li>规则 3：如果有多个输入生命周期参数，但其中一个是<code>&amp;self</code>或<code>&amp;mut self</code>（是方法），那么 self 的生命周期会被赋给所有的输出生命周期参数</li></ol><p>编译器使用以上 3 个规则，在没有显式标注生命周期的情况下，确定引用的生命周期：</p><ul><li>规则 1 应用于输入生命周期</li><li>规则 2、3 应用于输出生命周期</li><li>如果编译器应用完 3 个规则之后，仍然有无法确定生命周期的引用，会报错</li><li>这些规则适用于 fn 定义和 impl 块</li></ul><p>例子：</p><p>假设我们是编译器：</p><p><code>fn first_word(s: &amp;str) -&gt; &amp;str</code> -&gt;</p><p><code>fn first_word&lt;&#39;a&gt;(s: &amp;&#39;a str) -&gt; &amp;str</code> -&gt;</p><p><code>fn first_word&lt;&#39;a&gt;(s: &amp;&#39;a str) -&gt; &amp;&#39;a str</code></p><p><code>fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str</code> -&gt;</p><p><code>fn longest&lt;&#39;a, &#39;b&gt;(x: &amp;&#39;a str, y: &amp;&#39;b str) -&gt; &amp;str</code></p><p>第一条<code>fn first_word</code>，经过 3 条规则判断，编译器会正确转换出正确的生命周期</p><p>第二条<code>fn longest</code>，经过 3 条规则判断，因为有多个输入生命周期参数，但是 fn 是纯函数而不是方法，所以无法判断输出生命周期参数，会报错</p><h3 id="方法生命周期标注" tabindex="-1"><a class="header-anchor" href="#方法生命周期标注" aria-hidden="true">#</a> 方法生命周期标注</h3><p>在 struct 上使用生命周期实现方法，语法和泛型参数的语法一样</p><p>在哪声明和使用生命周期参数，依赖于：</p><ul><li>生命周期参数是否和字段、方法的参数或返回值有关</li></ul><p>struct 字段的生命周期名可以是：</p><ul><li>在 impl 后声明</li><li>在 struct 名后使用</li><li>这些生命周期是 struct 类型的一部分</li></ul><p>impl 块内的方法签名是：</p><ul><li>引用必须绑定于 struct 字段引用的生命周期，或者引用是独立的也可以</li><li>生命周期省略规则经常使得方法中的生命周期标注不是必须的</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">ImportantExcerpt</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  part<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token class-name">ImportantExcerpt</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">level</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
    <span class="token number">3</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">fn</span> <span class="token function-definition function">announce_and_return_part</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> announcement<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Attention please: {}&quot;</span><span class="token punctuation">,</span> announcement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>part
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态生命周期" tabindex="-1"><a class="header-anchor" href="#静态生命周期" aria-hidden="true">#</a> 静态生命周期</h3><p><code>&#39;static</code>是一个特殊的生命周期：它表示整个程序的持续时间。</p><ul><li>所有的字符串字面值都拥有<code>&#39;static</code>生命周期</li></ul><p>为引用指定的<code>&#39;static</code>生命周期前要三思：<strong>是否需要引用在程序整个生命周期内都存活</strong></p><h3 id="综合示例" tabindex="-1"><a class="header-anchor" href="#综合示例" aria-hidden="true">#</a> 综合示例</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">longest_with_an_announcement</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
  <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> ann<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">str</span>
<span class="token keyword">where</span>
  <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span>
<span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Announcement! {}&quot;</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    y
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unsaferust" tabindex="-1"><a class="header-anchor" href="#unsaferust" aria-hidden="true">#</a> UnsafeRust</h2><p>Rust 隐藏着第二个语言，它没有强制内存安全保证：Unsafe Rust</p><p>和普通的 Rust 一样，但提供了额外的能力</p><p>Unsafe Rust 存在的原因：</p><ol><li>静态分析是保守的。使用 Unsafe Rust：我知道我自己在做什么，并愿意承担相应风险</li><li>计算机硬件本身就是不安全的，Rust 需要能够进行底层系统变成</li></ol><h3 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h3><p>使用 unsafe 关键字切换到 unsafe Rust，将开启一个块，里面放着 unsafe 代码，并允许以下四种 unsafe 操作：</p><ol><li>解引用原始指针</li><li>调用 unsafe 函数或方法</li><li>访问或修改可变的静态变量</li><li>实现 unsafe trait</li></ol><p>注意：</p><ol><li>unsafe 并没有关闭借用检查或停用其它安全检查</li><li>任何内存安全相关的错误必须留在 unsafe 块里</li><li>尽可能隔离 unsafe 代码，最好将其封装在安全的抽象里，提供安全的 API</li></ol><h3 id="解引用原始指针" tabindex="-1"><a class="header-anchor" href="#解引用原始指针" aria-hidden="true">#</a> 解引用原始指针</h3><p>原始指针：</p><ul><li>可变的：<code>*mut T</code></li><li>不可变的：<code>*const T</code>。意味着指针在解引用后不能直接对其进行赋值</li><li>注意：主力的<code>*</code>不是解引用符号，它是类型名的一部分</li></ul><p>与引用不同，原始指针具备以下特性：</p><ul><li>允许通过同时具有不可变和可变指针或多个指向同一位置的可变指针来忽略借用规则</li><li>无法保证能指向合理的内存</li><li>允许为 null</li><li>不实现任何自动清理</li></ul><p>通过放弃保证的安全，解引用原始指针来换取更好的性能/与其它语言或硬件接口的能力</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> r1 <span class="token operator">=</span> <span class="token operator">&amp;</span>num <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> r2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> num <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;r1: {}&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;r2: {}&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> address <span class="token operator">=</span> <span class="token number">0x012345usize</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> r <span class="token operator">=</span> address <span class="token keyword">as</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;r: {}&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建安全抽象" tabindex="-1"><a class="header-anchor" href="#创建安全抽象" aria-hidden="true">#</a> 创建安全抽象</h3><p>函数包含 unsafe 代码并不意味着需要将整个函数标记为 unsafe</p><p>将 unsafe 代码包裹在安全函数中是一个常见的抽象</p><h3 id="extern" tabindex="-1"><a class="header-anchor" href="#extern" aria-hidden="true">#</a> extern</h3><p>extern 关键字：简化创建和使用外部函数接口(FFI)的过程</p><p>外部函数接口（FFI，Foreign Function Interface）：它允许一种编程语言定义函数，并让其它变成语言能调用这些函数</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">abs</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Absolute value of -3 according to C: {}&quot;</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用二进制接口（ABI，Application Binary Interface）：定义函数在汇编层的调用方式</p><p>&quot;C&quot; ABI 是最常见的 ABI，它遵循 C 语言的 ABI</p><p>可以使用 extern 创建接口，其它语言通过它们可以调用 Rust 的函数</p><p>在 fn 前添加 extern 关键字，并指定 ABI</p><p>还需添加<code>#[no_mangle]</code>注解：避免 Rust 在编译时改变它的名称</p><h3 id="访问或修改可变静态变量" tabindex="-1"><a class="header-anchor" href="#访问或修改可变静态变量" aria-hidden="true">#</a> 访问或修改可变静态变量</h3><p>Rust 支持全局变量，但因为所有权机制可能产生某些问题，例如数据竞争</p><p>静态变量：</p><ul><li>静态变量与常量类似</li><li>命名：SCREAMING_SNAKE_CASE</li><li>必须标注类型</li><li>静态变量只能存储<code>&#39;static</code>生命周期的引用，无需显式标注</li><li>访问不可变静态变量是安全的</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">static</span> <span class="token keyword">mut</span> <span class="token constant">COUNTER</span><span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">add_to_count</span><span class="token punctuation">(</span>inc<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token constant">COUNTER</span> <span class="token operator">+=</span> inc<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">add_to_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;COUNTER: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">COUNTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现不安全trait" tabindex="-1"><a class="header-anchor" href="#实现不安全trait" aria-hidden="true">#</a> 实现不安全<code>trait</code></h3><p>当某个 trait 中存在至少一个方法拥有编译器无法校验的不安全因素时，就称这个 trait 是不安全的</p><p>声明 unsafe trait：在定义前添加 unsafe 关键字。该 trait 只能在 unsafe 代码块中实现</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">unsafe</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">unsafe</span> <span class="token keyword">impl</span> <span class="token class-name">Foo</span> <span class="token keyword">for</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="何时使用unsafe" tabindex="-1"><a class="header-anchor" href="#何时使用unsafe" aria-hidden="true">#</a> 何时使用<code>unsafe</code></h3><ol><li>编译器无法保证内存安全，保证 unsafe 代码正确并不简单</li><li>有充足理由使用 unsafe 代码时，就可以这样做</li><li>通过显式标记 unsafe，可以在出现问题时轻松定位</li></ol><h2 id="高级类型" tabindex="-1"><a class="header-anchor" href="#高级类型" aria-hidden="true">#</a> 高级类型</h2><h3 id="newtype" tabindex="-1"><a class="header-anchor" href="#newtype" aria-hidden="true">#</a> newtype</h3><p>newtype 模式：</p><ul><li>用来静态地保证各种值之间不会混淆并表明值的单位</li><li>为类型的某些细节提供抽象能力</li><li>通过轻量级的封装来隐藏内部实现细节</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">type</span> <span class="token type-definition class-name">Thunk</span> <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Send</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">&#39;static</span>&#39;<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">takes_long_type</span><span class="token punctuation">(</span>f<span class="token punctuation">:</span> <span class="token class-name">Thunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">returns_long_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Thunk</span> <span class="token punctuation">{</span>
  <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> f<span class="token punctuation">:</span> <span class="token class-name">Thunk</span> <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="never" tabindex="-1"><a class="header-anchor" href="#never" aria-hidden="true">#</a> never</h3><p>有一个名为<code>!</code>的特殊类型：它没有任何值，行话成为空类型（empty type）</p><p>我们倾向于叫它 never 类型，因为它在不返回的函数中充当返回类型</p><p>不返回值的函数也被称作发散函数（diverging function）</p>`,190),k=s(`<h3 id="dst" tabindex="-1"><a class="header-anchor" href="#dst" aria-hidden="true">#</a> DST</h3><p>Rust 需要在编译时确定为一个特定类型的值分配多少空间</p><p>动态大小的类型（Dynamically Sized Types DST）概念：</p><p>编写代码时使用只有在运行时才能确定大小的值</p><p>str 是动态大小的类型（注意不是<code>&amp;str</code>）：只有运行时才能确定字符串的长度</p><p><code>&amp;str</code>：存储 str 的地址和 str 的长度</p><p>另一种动态大小的类型是 trait</p><p>每个 trait 都是一个动态大小的类型，可以通过名称对其进行引用</p><p>为了将 trait 用作 trait 对象，必须将它放置在某种指针之后</p><p>如：<code>&amp;dyn Trait</code>或<code>Box&lt;dyn Trait&gt;</code>（<code>Rc&lt;dyn Trait&gt;</code>）之后</p><p>为了处理动态大小的类型，Rust 提供了一个 SizedTrait 来确定一个类型的大小在编译时是否已知：</p><ul><li>编译时可计算出大小的类型会自动实现这一 trait</li><li>Rust 还会为每一个泛型函数隐式地添加 Sized 约束</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">generic</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// fn generic&lt;T: Sized&gt;(t: T) {</span>
<span class="token comment">// }</span>

<span class="token comment">// fn generic&lt;T: ？Sized&gt;(t: &amp;T) {</span>
<span class="token comment">// }</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，泛型函数只能被用于编译时已经知道大小的类型，可以通过特殊语法<code>?Sized</code>解除这一限制</p><h2 id="函数指针" tabindex="-1"><a class="header-anchor" href="#函数指针" aria-hidden="true">#</a> 函数指针</h2><p>可以将函数传递给其它函数</p><p>函数在传递过程中会被强制转换成 fn 类型</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">add_one</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">{</span>
  x <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">do_twice</span><span class="token punctuation">(</span>f<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> arg<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
  <span class="token function">f</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token function">do_twice</span><span class="token punctuation">(</span>add_one<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The answer is: {}&quot;</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数指针与闭包的区别" tabindex="-1"><a class="header-anchor" href="#函数指针与闭包的区别" aria-hidden="true">#</a> 函数指针与闭包的区别</h3><ul><li>fn 是一个类型，不是一个 trait</li><li>可以直接指定 fn 为参数类型，不用声明一个以 Fn trait 为约束的泛型参数</li><li>函数指针实现了全部 3 中闭包 trait（Fn, FnMut, FnOnce）</li></ul><p>因为总是可以把函数指针用作参数传递给一个接收闭包的函数，所以我们更倾向于搭配闭包 trait 的泛型来编写函数：可以同时接收闭包和普通函数</p><h3 id="返回闭包" tabindex="-1"><a class="header-anchor" href="#返回闭包" aria-hidden="true">#</a> 返回闭包</h3><p>闭包使用 trait 进行表达，无法在函数中直接返回一个闭包，可以将一个实现了该 trait 的具体类型作为返回值</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// 编译失败</span>
<span class="token comment">// fn returns_closure() -&gt; Fn(i32) -&gt; i32 {</span>
<span class="token comment">//   |x| x + 1</span>
<span class="token comment">// }</span>

<span class="token keyword">fn</span> <span class="token function-definition function">returns_closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> closure <span class="token operator">=</span> <span class="token function">returns_closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;res: {}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="macro" tabindex="-1"><a class="header-anchor" href="#macro" aria-hidden="true">#</a> macro</h2><p>宏在 Rust 里指的是一组相关特性的集合称谓：</p><ul><li>使用<code>macro_rules!</code>构建的声明宏（declarative macro）</li><li>3 种过程宏 <ol><li>自定义<code>#[derive]</code>宏，用于 struct 或 enum，可以为其指定随 derive 属性添加的代码</li><li>类似属性的宏，在任何条目上添加自定义属性</li><li>类似函数的宏，看起来像函数调用，对其指定为参数的 token 进行操作</li></ol></li></ul><h3 id="函数与宏的差别" tabindex="-1"><a class="header-anchor" href="#函数与宏的差别" aria-hidden="true">#</a> 函数与宏的差别</h3><p>本质上，宏是用来编写可以生成其它代码的代码（元编程，meta programming）</p><p>函数在定义签名时，必须声明参数的个数和类型，宏可处理可变的参数</p><p>编译器会在解释代码前展开宏</p><p>宏的定义比函数复杂得多，难以阅读、理解、维护</p><p>在某个文件调用宏时，必须提前定义宏或将宏引入当前作用域。</p><p>函数可以在任何位置定义并在任何位置使用</p><h3 id="声明宏" tabindex="-1"><a class="header-anchor" href="#声明宏" aria-hidden="true">#</a> 声明宏</h3><p><code>macro_rules!</code>声明宏现在可能已弃用，需注意</p><p>声明宏类似 match 的模式匹配，需要使用<code>macro_rules!</code>关键字</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// let v: Vec&lt;u32&gt; = vec![1, 2, 3];</span>

<span class="token comment">// 这是vec!宏的简化定义</span>
<span class="token attribute attr-name">#[macro_export]</span>
<span class="token macro property">macro_rules!</span> vec <span class="token punctuation">{</span>
<span class="token punctuation">(</span> $<span class="token punctuation">(</span> <span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">let</span> <span class="token keyword">mut</span> temp_vec <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      $<span class="token punctuation">(</span>
        temp_vec<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">)</span><span class="token operator">*</span>
      temp_vec
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="过程宏" tabindex="-1"><a class="header-anchor" href="#过程宏" aria-hidden="true">#</a> 过程宏</h3><p>过程宏一般指的是基于属性来生成代码的过程宏，这种形式更像函数</p><ul><li>接收并操作输入的 Rust 代码</li><li>生成另外一些 Rust 代码作为结果</li></ul><p>一般有三种过程宏：</p><ol><li>自定义派生</li><li>属性宏</li><li>函数宏</li></ol><p>创建过程宏时，注意宏定义必须单独放在它们自己的包中，并使用特殊的包类型</p><h4 id="自定义派生" tabindex="-1"><a class="header-anchor" href="#自定义派生" aria-hidden="true">#</a> 自定义派生</h4><p>例子：自定义 derive 宏<code>#[derive(Hellomacro)]</code>，得到 hello_macro 的默认实现</p><p>先新建一个 Cargo 项目</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;hello_macro_derive&quot;</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.0&quot;</span>
<span class="token key property">edition</span> <span class="token punctuation">=</span> <span class="token string">&quot;2018&quot;</span>

<span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span>
<span class="token key property">proc-macro</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">syn</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.14.4&quot;</span>
<span class="token key property">quote</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.6.3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// lib.rs</span>
<span class="token keyword">extern</span> <span class="token keyword">crate</span> <span class="token module-declaration namespace">proc_macro</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>proc_macro<span class="token punctuation">::</span></span><span class="token class-name">TokenStream</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quote<span class="token punctuation">::</span></span>quote<span class="token punctuation">;</span>
<span class="token keyword">use</span> syn<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[proc_macro_derive(HelloMacro)]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">hello_macro_derive</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token class-name">TokenStream</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">TokenStream</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ast <span class="token operator">=</span> <span class="token namespace">syn<span class="token punctuation">::</span></span><span class="token function">parse</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">impl_hello_macro</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ast<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">impl_hello_macro</span><span class="token punctuation">(</span>ast<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token namespace">syn<span class="token punctuation">::</span></span><span class="token class-name">DeriveInput</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">TokenStream</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token operator">&amp;</span>ast<span class="token punctuation">.</span>ident<span class="token punctuation">;</span>
  <span class="token keyword">let</span> gen <span class="token operator">=</span> <span class="token macro property">quote!</span> <span class="token punctuation">{</span>
    <span class="token keyword">impl</span> <span class="token class-name">HelloMacro</span> <span class="token keyword">for</span> #name <span class="token punctuation">{</span>
      <span class="token keyword">fn</span> <span class="token function-definition function">hello_macro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Macro! My name is {}&quot;</span><span class="token punctuation">,</span> <span class="token macro property">stringify!</span><span class="token punctuation">(</span>#name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  gen<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="属性宏" tabindex="-1"><a class="header-anchor" href="#属性宏" aria-hidden="true">#</a> 属性宏</h4><p>属性宏与自定义 derive 宏类似，允许创建新的属性，但不是为 derive 属性生成代码</p><p>属性宏更加灵活：derive 只能用于 struct 和 enum，属性宏可以用于任意条目，例如函数</p><p>如：MVC 框架常用的路由宏<code>#[route(GET, &quot;/&quot;)]</code></p><h4 id="函数宏" tabindex="-1"><a class="header-anchor" href="#函数宏" aria-hidden="true">#</a> 函数宏</h4><p>函数宏定义类似于函数调用的宏，但比普通函数更加灵活</p><p>函数宏可以接收 TokenStream 作为参数</p><p>与另外两种过程宏一样，在定义中使用 Rust 代码来操作 TokenStream</p><p>如：SQL 查询宏<code>sql!(SELECT * FROM posts WHERE id=1);</code></p>`,58);function d(m,v){const a=p("RouterLink");return e(),o("div",null,[r,c("p",null,[n("类似 typescript 的 "),l(a,{to:"/typescript/base.html#never"},{default:i(()=>[n("never")]),_:1}),n(" 类型，表示函数不可达，如必定发生错误的函数、死循环函数")]),k])}const f=t(u,[["render",d],["__file","8-senior.html.vue"]]);export{f as default};
