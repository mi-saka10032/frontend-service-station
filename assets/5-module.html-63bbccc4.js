import{_ as n,Y as s,Z as a,a1 as e}from"./framework-bb209140.js";const t={},p=e(`<h2 id="代码组织与模块系统" tabindex="-1"><a class="header-anchor" href="#代码组织与模块系统" aria-hidden="true">#</a> 代码组织与模块系统</h2><p>代码组织主要包括：</p><ul><li>哪些细节可以暴露，哪些细节是私有的</li><li>作用域内哪些名称有效</li></ul><p>模块系统：</p><ul><li>Package（包）：Cargo 的特性，支持构建、测试、共享 crate</li><li>Crate（单元包）：一个模块树，可产生一个 library 或可执行文件</li><li>Module（模块）、use：控制代码的组织、作用域、私有路径</li><li>Path（路径）：为 struct、function 或 module 等项命名的方式</li></ul><h2 id="package-crate" tabindex="-1"><a class="header-anchor" href="#package-crate" aria-hidden="true">#</a> Package&amp;Crate</h2><p>Crate 有两种类型：</p><ol><li>binary，可理解为<strong>入口文件</strong></li><li>library，可理解为<strong>库文件</strong></li></ol><p>CrateRoot：</p><ul><li>源代码文件</li><li>Rust 编译器从这里开始，组成你的 crate 的根 module</li></ul><p>Package：</p><ul><li>包含一个 Cargo.toml，描述了如何构建这些 crates</li><li>只能包含 0-1 个 library crate</li><li>可以包含任意数量的 binary crate</li><li>但必须至少包含一个 crate（library 或 binary）</li></ul><h3 id="cargo约定" tabindex="-1"><a class="header-anchor" href="#cargo约定" aria-hidden="true">#</a> <code>Cargo</code>约定</h3><p>Cargo 的惯例约定：</p><p><code>src/main.rs</code>：</p><ul><li>binary crate 的 crate root</li><li>crate 名字与 package 名字相同</li></ul><p><code>src/lib.rs</code>：</p><ul><li>package 包含一个 library crate</li><li>library create 的 crate root</li><li>crate 名字与 package 名字相同</li></ul><p><strong>一个 Package 可以同时包含<code>src/main.rs</code>和<code>src/lib.rs</code></strong></p><p>这表示它包含了一个 binary crate 和一个 library crate，且它们名称都与 package 名称相同</p><p><strong>这两个文件（任意一个）的内容形成了名为 crate 的模块，位于整个模块树的根部</strong></p><p>这表示如果这个项目对外暴露 lib，那么它可被定义为功能 lib 库；如果对外暴露 main，那么它可被定义为 project 库</p><p><strong>一个 Package 可以有多个 binary crate</strong></p><p>这些 binary 入口文件放在 src/bin 下面，每个文件是单独的 binary crate</p><h3 id="crate作用" tabindex="-1"><a class="header-anchor" href="#crate作用" aria-hidden="true">#</a> <code>Crate</code>作用</h3><p>主要作用是将相关功能组合到一个作用域内，便于在项目间进行共享，以防冲突</p><p>例如：<code>rand crate</code>，访问它的功能需要通过它的名字：rand</p><h3 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> dependencies</h3><ol><li>在<code>cargo.toml</code>中添加依赖的包(package)。可以在 toml 文件中输入依赖，保存文件后依赖 vscode 的插件自动安装，也可以使用<code>cargo add rand</code>命令实现</li><li>使用 use 将特定条目引入作用域</li></ol><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;my-project&quot;</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.0&quot;</span>
<span class="token key property">authors</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>abc@qq<span class="token punctuation">.</span>com<span class="token punctuation">]</span>
<span class="token key property">edition</span> <span class="token punctuation">=</span> <span class="token string">&quot;2021&quot;</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.5.5&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>标准库（std）也被当作外部包，但是不需要修改 toml 文件来包含 std，rust 自带 std</p><h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> Module</h2><p>在一个 crate 内，将代码进行分组，可理解为<strong>命名空间</strong>或<strong>代码目录</strong></p><ul><li>增加可读性，易于复用</li><li>控制项目（item）的私有性。public、private 区分</li></ul><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h3><ul><li>通过 mod 关键字</li><li>可嵌套</li><li>可包含其他项（struct、enum、常量、trait、函数等）的定义</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// lib.rs</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span>
  <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">seat_at_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">mod</span> <span class="token module-declaration namespace">serving</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">take_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">take_payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="移动" tabindex="-1"><a class="header-anchor" href="#移动" aria-hidden="true">#</a> 移动</h3><p>模块定义时，如果模块名后面是<code>;</code>而不是代码块：</p><ul><li>Rust 会从与模块同名的文件中加载内容</li><li>模块树的结构不会变化</li></ul><p>简单来说就是：声明一个模块，但在 src 目录下与模块同名的文件中定义</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// src/front_of_house.rs</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span>
  <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">seat_at_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">mod</span> <span class="token module-declaration namespace">serving</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">take_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">take_payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// src/lib.rs</span>
<span class="token comment">// 不会报错</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token namespace">front_of_house<span class="token punctuation">::</span>hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随着模块逐渐变大，该技术可以让你把模块的内容移动到其他与模块同名的文件夹中</p><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> Path</h2><p>为了在 Rust 的模块中找到某个条目，需要使用路径 Path</p><p>路径有两种形式：</p><ul><li>绝对路径：从 crate root 开始，使用 crate 名字或字面值 crate</li><li>相对路径：从当前模块开始，使用 self，super 或当前模块的标识符</li></ul><p>路径至少由一个标识符组成，标识符之间使用<code>::</code></p><h3 id="私有边界" tabindex="-1"><a class="header-anchor" href="#私有边界" aria-hidden="true">#</a> 私有边界</h3><p>模块不仅可以组织代码，还可以定义私有边界</p><p>如果想把函数或 struct 设为私有，可以将它放到某个模块中</p><p>Rust 中所有的条目（函数、方法、struct、enum、模块、常量等）默认是私有的</p><p>父级模块无法访问子模块的私有条目</p><p>子模块里可以使用所有祖先模块的条目</p><h3 id="pub-关键字" tabindex="-1"><a class="header-anchor" href="#pub-关键字" aria-hidden="true">#</a> pub 关键字</h3><p>使用 pub 关键字来将某些条目标记为公共的，以此来避免父模块访问子模块的条目时发生错误</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// src/lib.rs</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注意需加pub</span>
  <span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意需加pub</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 绝对路径</span>
  <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>front_of_house<span class="token punctuation">::</span>hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 相对路径</span>
  <span class="token namespace">front_of_house<span class="token punctuation">::</span>hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="super-关键字" tabindex="-1"><a class="header-anchor" href="#super-关键字" aria-hidden="true">#</a> super 关键字</h3><p>用来访问父级模块路径中的内容，类似文件系统中的<code>../</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">mod</span> <span class="token module-declaration namespace">back_of_house</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">fix_incorrect_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">cook_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用绝对路径</span>
    <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">cook_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pub-struct" tabindex="-1"><a class="header-anchor" href="#pub-struct" aria-hidden="true">#</a> pub+struct</h3><p>pub 放在 struct 前面：</p><ul><li>struct 是公共的</li><li>struct 的字段默认私有</li><li>struct 的字段需要单独设置 pub 来变成公有</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">back_of_house</span> <span class="token punctuation">{</span>
  <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Breakfast</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> toast<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    seasonal_fruit<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">impl</span> <span class="token class-name">Breakfast</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">summer</span><span class="token punctuation">(</span>toast<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Breakfast</span> <span class="token punctuation">{</span>
      <span class="token class-name">Breakfast</span> <span class="token punctuation">{</span>
        toast<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>toast<span class="token punctuation">)</span><span class="token punctuation">,</span>
        seasonal_fruit<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;peaches&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> meal <span class="token operator">=</span> <span class="token namespace">back_of_house<span class="token punctuation">::</span></span><span class="token class-name">Breakfast</span><span class="token punctuation">::</span><span class="token function">summer</span><span class="token punctuation">(</span><span class="token string">&quot;Rye&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  meal<span class="token punctuation">.</span>toast <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Wheat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;d like {} toast please&quot;</span><span class="token punctuation">,</span> meal<span class="token punctuation">.</span>toast<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 上面的seasonal_fruit如果不设为pub，这里会报错</span>
  meal<span class="token punctuation">.</span>seasonal_fruit <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;blueberries&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pub-enum" tabindex="-1"><a class="header-anchor" href="#pub-enum" aria-hidden="true">#</a> pub+enum</h3><p>pub 放在 enum 前面：</p><ul><li>enum 是公共的</li><li>enum 的变体也是公共的</li></ul><h2 id="use" tabindex="-1"><a class="header-anchor" href="#use" aria-hidden="true">#</a> use</h2><p>可以使用 use 关键字将路径导入到作用域内。此时，仍遵循私有原则</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注意需加pub</span>
  <span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意需加pub</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>front_of_house<span class="token punctuation">::</span></span>hosting<span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token namespace">hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token namespace">hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>use 的习惯用法有：</p><ol><li>函数：将函数的父级模块引入作用域（指定到父级）</li><li>对于 struct、enum、其他，指定完整路径（指定到本身）</li><li>同名条目：指定到父级</li></ol><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>collections<span class="token punctuation">:</span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> map <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pub-use" tabindex="-1"><a class="header-anchor" href="#pub-use" aria-hidden="true">#</a> pub+use</h3><p>使用 use 将路径（名称）导入到作用域内后，该名称在此作用域内是私有的</p><p>使用 pub use，可实现重导出：</p><ul><li>将条目引入作用域</li><li>该条目可以被外部代码引入到它们的作用域</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span>
  <span class="token comment">// 注意需加pub</span>
  <span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意需加pub</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 此处如果use前面不加pub，则外部代码即使use该子模块，也无法访问hosting模块</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>front_of_house<span class="token punctuation">::</span></span>hosting<span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token namespace">hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token namespace">hosting<span class="token punctuation">::</span></span><span class="token function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套路径" tabindex="-1"><a class="header-anchor" href="#嵌套路径" aria-hidden="true">#</a> 嵌套路径</h3><p>如果使用同一个包或模块下的多个条目，可使用嵌套路径在同一行内将上述条目进行引入：</p><p><strong>路径相同的部分::{路径差异的部分}</strong></p><p>如果两个 use 路径之一是另一个的子路径，则需使用 self</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h3><p>使用<code>*</code>可以把路径中所有的公共条目都引入到作用域</p><p>注意：谨慎使用</p><p>应用场景：</p><ul><li>测试。将所有被测试代码引入到 test 模块</li><li>有时被用于预导入（prelude）模块</li></ul><h2 id="as" tabindex="-1"><a class="header-anchor" href="#as" aria-hidden="true">#</a> as</h2><p>as 关键字可以为引入的路径指定本地的别名</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token keyword">as</span> <span class="token class-name">IoResult</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">IoResult</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,94),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","5-module.html.vue"]]);export{d as default};
