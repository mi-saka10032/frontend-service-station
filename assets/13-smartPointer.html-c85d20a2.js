import{_ as n,Y as s,Z as a,a1 as t}from"./framework-bb209140.js";const p={},e=t(`<h2 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针" aria-hidden="true">#</a> 智能指针</h2><p><strong>智能指针扩展了 Rust 的语言功能，使其可以完成一些不安全操作</strong></p><p>指针：一个变量在内存中包含的一个地址（指向其它数据）</p><p>引用：使用<code>&amp;</code>表示，表示借用它指向的值。没有其余开销，是最常见的指针类型</p><p>智能指针是这样的数据结构：</p><ul><li>行为和指针相似</li><li>有额外的元数据和功能</li></ul><p>通过记录所有者的数量，使一份数据被多个所有者同时持有</p><p><strong>两者区别</strong></p><p>引用：只借用数据 智能指针：很多时候都拥有它所指向的数据</p><p>智能指针的例子：</p><p><code>String</code>和<code>Vec&lt;T&gt;</code>：</p><ul><li>都拥有一片内存区域</li><li>允许用户对其操作</li><li>还拥有元数据（例如容量等）</li><li>提供额外的功能或保障（String 保障其数据是合法的 UTF-8 编码）</li></ul><p>智能指针通常使用 struct 实现，并且实现了：Deref 和 Drop 这两个 trait</p><p>Deref trait：允许智能指针 struct 的实例像引用一样使用 Drop trait：允许你自定义当智能指针实例走出作用域时的代码</p><h2 id="box-t" tabindex="-1"><a class="header-anchor" href="#box-t" aria-hidden="true">#</a> <code>Box&lt;T&gt;</code></h2><p><code>Box&lt;T&gt;</code>是最简单的智能指针：</p><ul><li>允许你在 heap 上存储数据而不是 stack。而 stack 上是指向 heap 数据的指针</li><li>没有性能开销，没有其它额外功能</li><li>实现了 Deref trait 和 Drop trait</li></ul><p>常用场景：</p><ol><li>在编译时，某类型的大小无法确定，但使用该类型时，上下文却需要知道它的确切大小</li><li>当你有大量数据，想移交所有权，但需要确保在操作时数据不会被复制</li><li>使用某个值时，你只关心它是否实现了特定的 trait，而不关心它的具体类型</li></ol><p>使用 Box 赋能递归类型</p><p>在编译时，Rust 需要知道一个类型所占的空间大小，而递归类型的大小无法在编译时确定</p><p>Box 类型的大小确定，在递归类型中使用 Box 就可解决上述问题</p><h2 id="conslist" tabindex="-1"><a class="header-anchor" href="#conslist" aria-hidden="true">#</a> ConsList</h2><p>ConsList 是来自 Lisp 语言的一种数据结构（俗称：链表）</p><p>ConsList 里每个成员由两个成员组成：当前项的值和下一个元素</p><p>ConsList 里最后一个成员只包含一个 Nil 值，没有下一个元素</p><p>要注意的时，ConsList 并不是 Rust 的常用集合，通常情况下<code>Vec&lt;T&gt;</code>是更好的选择</p><p>按照普通写法实现的 ConsList 无法正常编译</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// error[E0072]: recursive type \`List\` has infinite size</span>
  <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">List</span> <span class="token punctuation">{</span>
  <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">Nil</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决这个错误，需要使用 Box 来获得确定大小的递归类型，因为<code>Box&lt;T&gt;</code>是一个指针，Rust 知道它需要多少空间，指针的大小不会基于它指向的数据的大小变化而变化</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>
              <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">List</span> <span class="token punctuation">{</span>
  <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">Nil</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dereftrait" tabindex="-1"><a class="header-anchor" href="#dereftrait" aria-hidden="true">#</a> DerefTrait</h2><p>实现 Deref Trait 使我们可以自定义解引用运算符<code>*</code>的行为</p><p>通常实现 Deref，智能指针可以像常规引用一样来处理</p><p>解引用运算符：</p><ul><li>常规引用是一种指针</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>

  <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果不加*会报错：error[E0277]: can&#39;t compare \`{integer}\` with \`\${integer}\`</span>
  <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Box&lt;T&gt;</code>可以代替上例中的引用：<code>let y = Box::new(x);</code></p><h3 id="定义自己的智能指针" tabindex="-1"><a class="header-anchor" href="#定义自己的智能指针" aria-hidden="true">#</a> 定义自己的智能指针</h3><p><code>Box&lt;T&gt;</code>被定义成拥有一个元素的 tuple struct（需要实现 DerefTrait）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Deref</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token type-definition class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">new</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">MyBox</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Deref</span> <span class="token keyword">for</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">type</span> <span class="token type-definition class-name">Target</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>

  <span class="token keyword">fn</span> <span class="token function-definition function">deref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>
    <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token class-name">MyBox</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// *y 将隐式展开为 *(y.deref())</span>
  <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="隐式解引用转化" tabindex="-1"><a class="header-anchor" href="#隐式解引用转化" aria-hidden="true">#</a> 隐式解引用转化</h3><p>隐式解引用转化（Deref Coercion）是为函数和方法提供的一种便捷特性</p><p>假设 T 实现了 Deref Trait：Deref Coercion 可以把 T 的引用转化为 T 经过 Deref 操作后生成的引用</p><p>当把某类型的引用传递给函数或方法时，但它的类型与定义的参数类型不匹配：</p><ol><li>Deref Coercion 会自动发生</li><li>编译器会对 deref 进行一系列调用，来把它转为所需的参数类型。这一步会在编译时完成，没有额外性能开销</li></ol><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Deref</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">MyBox</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// &amp;m &amp;MyBox&lt;String&gt;</span>
  <span class="token comment">// deref &amp;String</span>
  <span class="token comment">// deref &amp;str</span>
  <span class="token function">hello</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">hello</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&quot;Rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解引用与可变性" tabindex="-1"><a class="header-anchor" href="#解引用与可变性" aria-hidden="true">#</a> 解引用与可变性</h3><p>可使用 DerefMut trait 重载可变引用的<code>*</code>运算符</p><p>在类型和 trait 在下列三种情况发生时，Rust 会执行 deref coercion:</p><ol><li>当 T：<code>Deref&lt;Target = U&gt;</code>，允许<code>&amp;T</code>转换为<code>&amp;U</code></li><li>当 T：<code>DerefMut&lt;Target = U&gt;</code>，允许<code>&amp;mut T</code>转换为<code>&amp;mut U</code></li><li>当 T：<code>Deref&lt;Target = U&gt;</code>，允许<code>&amp;mut T</code>换换位<code>&amp;U</code></li></ol><h2 id="droptrait" tabindex="-1"><a class="header-anchor" href="#droptrait" aria-hidden="true">#</a> DropTrait</h2><p>实现 Drop Trait，可以让我们自定义当值将要离开作用域时发生的动作，如：文件、网络资源释放等。任何类型都可以实现 Drop trait</p><p>Drop Trait 只要求你实现 drop 方法。参数：对 self 的可变引用</p><p>Drop Trait 在预导入模块里（prelude）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">CustomSmartPointer</span> <span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">CustomSmartPointer</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Dropping CustomSmartPointer with data \`{}\`!&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">CustomSmartPointer</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;my stuff&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token class-name">CustomSmartPointer</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;other stuff&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;CustomSmartPointer created.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提前释放" tabindex="-1"><a class="header-anchor" href="#提前释放" aria-hidden="true">#</a> 提前释放</h3><p>很难直接禁用自动的 drop 功能，也没必要。因为 Drop Trait 的目的就是进行自动的释放处理逻辑</p><p>Rust 不允许手动调用 Drop Trait 的 drop 方法</p><p>但可以调用标准库的<code>std::mem:drop</code>函数，来提前 drop 值（prelude 模块）</p><h2 id="rc" tabindex="-1"><a class="header-anchor" href="#rc" aria-hidden="true">#</a> Rc</h2><p><code>Rc&lt;T&gt;</code>是引用计数智能指针</p><p>有时，一个值会有多个所有者</p><p>为了支持多重所有权，Rust 引入了<code>Rc&lt;T&gt;</code>：</p><ul><li>reference counting（引用计数）</li><li>追踪所有到值的引用</li><li>0 个引用：该值可以被清理掉</li></ul><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景：</h3><p>需要在 heap 上分配数据，这些数据被程序的多个部分读取（只读），但在编译时无法确定哪个部分最后使用完这些数据</p><p><code>Rc&lt;T&gt;</code>通过不可变引用，使你可以在程序不同部分之间共享只读数据</p><p><code>Rc&lt;T&gt;</code>只能用于单线程场景</p><p>注意：<code>Rc&lt;T&gt;</code>不在预导入模块中（prelude）</p><p><code>Rc::clone(&amp;a)</code>函数：增加引用计数</p><p><code>Rc::strong_count(&amp;a)</code>：获得引用计数</p><p><code>Rc::weak_count(&amp;a)</code>：获得弱引用计数</p><p>以 ConsList 为例，来查看 Rc 的使用</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">List</span> <span class="token punctuation">{</span>
  <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">Nil</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>
      <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>
          <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// error[E0382]: use of moved value: \`a\`</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Rc 解决</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token type-definition class-name">List</span> <span class="token punctuation">{</span>
  <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">Nil</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rc-clone" tabindex="-1"><a class="header-anchor" href="#rc-clone" aria-hidden="true">#</a> Rc::clone</h3><p><code>Rc::clone()</code>：增加引用，不会执行数据的深度拷贝操作</p><p>类型的<code>clone()</code>：很多会执行数据的深度拷贝操作</p><h2 id="refcell" tabindex="-1"><a class="header-anchor" href="#refcell" aria-hidden="true">#</a> RefCell</h2><p>内部可变性（interior mutability）是 Rust 的设计模式之一</p><p>它允许你在只持有不可变引用的前提下对数据进行修改</p><p>数据结构中使用了 unsafe 代码来绕过 Rust 正常的可变性和借用规则</p><p>与<code>Rc&lt;T&gt;</code>不同，<code>RefCell&lt;T&gt;</code>类型代表了其持有数据的唯一所有权</p><h3 id="记录借用信息" tabindex="-1"><a class="header-anchor" href="#记录借用信息" aria-hidden="true">#</a> 记录借用信息</h3><p>两个方法（安全接口）：</p><ul><li>borrow 方法：返回智能指针<code>Ref&lt;T&gt;</code>，它实现了 Deref</li><li>borrow_mut 方法：返回智能指针<code>RefMut&lt;T&gt;</code>，它实现了 Deref</li></ul><p><code>RefCell&lt;T&gt;</code>会记录当前存在多少个活跃的<code>Ref&lt;T&gt;</code>和<code>RefMut&lt;T&gt;</code>智能指针：</p><ul><li>每次调用 borrow：不可变借用计数加 1</li><li>任何一个<code>Ref&lt;T&gt;</code>的值离开作用域被释放时，不可变借用计数减 1</li><li>每次调用 borrow_mut：可变借用计数加 1</li><li>任何一个<code>RefMut&lt;T&gt;</code>的值离开作用域被释放时，可变借用计数减 1</li></ul><p>以此计数来维护借用检查规则：</p><ul><li>任何一个给定时间里，只允许拥有多个不可变借用或一个可变借用</li></ul><h3 id="拥有多重所有权的可变数据示例" tabindex="-1"><a class="header-anchor" href="#拥有多重所有权的可变数据示例" aria-hidden="true">#</a> 拥有多重所有权的可变数据示例</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">,</span> <span class="token namespace">rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">List</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Nil</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>
    <span class="token comment">// 修改当前Cons的元素</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">set_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token class-name">Cons</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token operator">*</span>count<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>
                <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Nil</span> <span class="token operator">=&gt;</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> _ <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">set_tail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a after = {:?}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;b after = {:?}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;c after = {:?}&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其它可实现内部可变性的类型" tabindex="-1"><a class="header-anchor" href="#其它可实现内部可变性的类型" aria-hidden="true">#</a> 其它可实现内部可变性的类型</h3><p><code>Cell&lt;T&gt;</code>：通过复制来访问数据</p><p><code>Mutex&lt;T&gt;</code>：用于实现跨线程情形下的内部可变性模式</p><h2 id="智能指针比较" tabindex="-1"><a class="header-anchor" href="#智能指针比较" aria-hidden="true">#</a> 智能指针比较</h2><p>比较<code>RefCell&lt;T&gt;</code>和<code>Box&lt;T&gt;</code></p><table><thead><tr><th style="text-align:left;"><code>Box&lt;T&gt;</code></th><th style="text-align:left;"><code>RefCell&lt;T&gt;</code></th></tr></thead><tbody><tr><td style="text-align:left;">编译阶段强制代码遵守借用规则</td><td style="text-align:left;">只会在运行时检查借用规则</td></tr><tr><td style="text-align:left;">否则出现错误</td><td style="text-align:left;">否则触发 panic</td></tr></tbody></table><p>借用规则在不同阶段进行检查的比较</p><table><thead><tr><th style="text-align:left;">编译阶段</th><th style="text-align:left;">运行时</th></tr></thead><tbody><tr><td style="text-align:left;">尽早暴露问题</td><td style="text-align:left;">问题暴露延后，甚至到生产环境</td></tr><tr><td style="text-align:left;">没有任何运行时开销</td><td style="text-align:left;">因为借用计数产生些许性能损失</td></tr><tr><td style="text-align:left;">对大多数场景是最佳选择</td><td style="text-align:left;">实现某些特定的内存安全场景（不可变环境中修改自身数据）</td></tr></tbody></table><p>与<code>Rc&lt;T&gt;</code>相似，<code>RefCell&lt;T&gt;</code>也只能用于单线程场景</p><p>选择依据</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"><code>Box&lt;T&gt;</code></th><th style="text-align:left;"><code>Rc&lt;T&gt;</code></th><th style="text-align:left;"><code>RefCell&lt;T&gt;</code></th></tr></thead><tbody><tr><td style="text-align:left;">同一数据的所有者</td><td style="text-align:left;">一个</td><td style="text-align:left;">多个</td><td style="text-align:left;">一个</td></tr><tr><td style="text-align:left;">可变性、借用检查</td><td style="text-align:left;">可变、不可变借用（编译时检查）</td><td style="text-align:left;">不可变借用（编译时检查）</td><td style="text-align:left;">可变、不可变借用（运行时检查）</td></tr></tbody></table><p>其中：即便<code>RefCell&lt;T&gt;</code>本身不可变，但仍能修改其中存储的值</p><h2 id="内存泄漏问题" tabindex="-1"><a class="header-anchor" href="#内存泄漏问题" aria-hidden="true">#</a> 内存泄漏问题</h2><p>Rust 的内存安全机制可以保证很难发生内存泄漏，但不是不可能</p><p>例如使用<code>Rc&lt;T&gt;</code>和<code>RefCell&lt;T&gt;</code>就可能创造出循环引用，从而发生内存泄漏：每个项的引用数量不会变成 0，值也不会被处理掉</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token class-name">Cons</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">,</span> <span class="token namespace">rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">List</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Nil</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token class-name">Cons</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Nil</span> <span class="token operator">=&gt;</span> <span class="token class-name">None</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a initial rc count = {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">strong_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a next item = {:?}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a rc count after b creation = {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">strong_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;b initial rc count = {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">strong_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;b next item = {:?}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>link<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;b rc count after changing a = {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">strong_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a rc count after changing a = {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">strong_count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Uncomment the next line to see that we have a cycle;</span>
    <span class="token comment">// it will overflow the stack.</span>
    <span class="token comment">// println!(&quot;a next item = {:?}&quot;, a.tail());</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取消注释最后一行打印函数，将发生堆栈溢出</p><figure><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/rust/rc-overflowStack.png" alt="Rc-StackOverflow" tabindex="0" loading="lazy"><figcaption>Rc-StackOverflow</figcaption></figure><h3 id="防止内存泄漏的解决办法" tabindex="-1"><a class="header-anchor" href="#防止内存泄漏的解决办法" aria-hidden="true">#</a> 防止内存泄漏的解决办法</h3><ol><li>依靠开发者来保证，不依靠 Rust</li><li>重新组织数据结构：一些引用来表达所有权，一些引用不表达所有权：循环引用中的一部分具有所有权关系，另一部分不涉及所有权关系。而只有所有权关系才影响值的清理</li><li>防止循环引用，还可以把<code>Rc&lt;T&gt;</code>换成<code>Weak&lt;T&gt;</code></li></ol><p><code>Rc::clone</code>为<code>Rc&lt;T&gt;</code>实例的 strong_count 加 1，<code>Rc&lt;T&gt;</code>的实例只有在 strong_count 为 0 的时候才会被清理</p><p><code>Rc&lt;T&gt;</code>实例通过调用<code>Rc::downgrade</code>方法可以创建值的 Weak Reference（弱引用）：</p><ul><li>返回类型是<code>Weak&lt;T&gt;</code>（智能指针）</li><li>调用<code>Rc::downgrade</code>会为 weak_count 加 1</li><li><code>Rc&lt;T&gt;</code>使用 weak_count 来追踪存在多少<code>Weak&lt;T&gt;</code></li><li>weak_count 不为 0 并不影响<code>Rc&lt;T&gt;</code>实例的清理</li></ul><h3 id="strongvsweak" tabindex="-1"><a class="header-anchor" href="#strongvsweak" aria-hidden="true">#</a> StrongVsWeak</h3><p>Strong Reference（强引用）是关于如何分享<code>Rc&lt;T&gt;</code>实例的所有权</p><p>Weak Reference（弱引用）并不表达上述意思</p><p>使用 Weak Reference 并不会创建循环引用：并且当 Strong Reference 数量为 0 的时候，Weak Reference 会自动断开</p><p>使用注意：在使用<code>Weak&lt;T&gt;</code>之前，需要保证它指向的值仍然存在</p><p>返回值：在<code>Weak&lt;T&gt;</code>实例上调用 upgrade 方法，返回<code>Option&lt;Rc&lt;T&gt;&gt;</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">,</span>
    <span class="token namespace">rc<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Rc</span><span class="token punctuation">,</span> <span class="token class-name">Weak</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Node</span> <span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    parent<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Weak</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    children<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> leaf <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token punctuation">{</span>
        value<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        parent<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Weak</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;leaf parent = {:?}&quot;</span><span class="token punctuation">,</span> leaf<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> branch <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token punctuation">{</span>
        value<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        parent<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Weak</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        children<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>leaf<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">*</span>leaf<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>branch<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;leaf parent = {:?}&quot;</span><span class="token punctuation">,</span> leaf<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,124),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","13-smartPointer.html.vue"]]);export{k as default};
