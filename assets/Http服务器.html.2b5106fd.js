import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as t}from"./app.fa980ca0.js";const p={},e=t(`<h2 id="web-服务器" tabindex="-1"><a class="header-anchor" href="#web-服务器" aria-hidden="true">#</a> web 服务器</h2><p>当应用程序（客户端）需要某一个资源时，可以向一台服务器，通过 Http 请求获取到这个资源，提供服务器的这个服务器就是一个 Web 服务器。</p><p>开源的 Web 服务器：Nginx、Apache（静态）、Apache Tomcat（静态、动态）、Node.js</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/09-http/image-20211013152727709.png" alt="web服务器" loading="lazy"></p><h2 id="创建服务器" tabindex="-1"><a class="header-anchor" href="#创建服务器" aria-hidden="true">#</a> 创建服务器</h2><p>通过 createServer 完成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>底层其实直接使用 new Server 对象</p><p>等同于</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">http<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监听主机和端口号" tabindex="-1"><a class="header-anchor" href="#监听主机和端口号" aria-hidden="true">#</a> 监听主机和端口号</h2><p>Server 通过 listen 方法开启服务器，并且在某一个主机和端口上监听网络请求</p><p>listen 三个参数：</p><ul><li><p>端口 port：可以不传，系统默认分配端，后续项目写到环境变量中。</p></li><li><p>主机 host：通常可以传入 localhost、ip 地址 127.0.0.1、或者 0.0.0.0，默认 0.0.0.0。</p><p>​ localhost：本质上是一个域名，通常被解析为 127.0.0.1；</p><p>​ 127.0.0.1：回环地址(Loop Back Address)，表达的意思是我们主机自己发出去的包，直接被自己接收；</p><p>​ 正常的数据库包为 应用层——传输层——网络层——数据链路层——物理层；</p><p>​ 而回环地址，是在网络层直接就被获取到了，不会进入数据链路层和物理层；</p><p>​ 比如我们监听 127.0.0.1 时，在同一个网段下的主机中，通过 ip 地址是不能访问的。</p><p>​ 0.0.0.0：监听 IPV4 上所有的地址，再根据端口找到不同的应用程序；</p><p>​ 监听 0.0.0.0 时，在同一个网段下的主机中，通过 ip 地址是可以访问的。</p></li><li><p>回调函数：服务器启动成功时的回调函数。</p></li></ul><h2 id="request-对象" tabindex="-1"><a class="header-anchor" href="#request-对象" aria-hidden="true">#</a> request 对象</h2><p>服务器发送请求携带信息：</p><p>URL、请求方式、headers 请求头</p><p>Node 将其封装到一个 request 的对象中，我们可以直接来处理这个 request 对象。</p><h3 id="url-处理" tabindex="-1"><a class="header-anchor" href="#url-处理" aria-hidden="true">#</a> URL 处理</h3><p>url 携带额外参数处理，使用内置模块 url</p><p>const parseInfo = url.parse(req,url);</p><h3 id="method-处理" tabindex="-1"><a class="header-anchor" href="#method-处理" aria-hidden="true">#</a> method 处理</h3><p>Restful 规范中，对于数据的增删改查应通过不同请求方式，应通过判断不同的请求方式进行不同的处理</p><p>GET POST PATCH DELETE ......</p><h3 id="headers-属性" tabindex="-1"><a class="header-anchor" href="#headers-属性" aria-hidden="true">#</a> headers 属性</h3><h4 id="_1-content-type" tabindex="-1"><a class="header-anchor" href="#_1-content-type" aria-hidden="true">#</a> 1.content-type</h4><p>请求携带的数据类型</p><p>application/json json 类型</p><p>text/plain 文本类型</p><p>application/xml xml 类型</p><p>multipart/form-data 上传文件（即使如此，服务器解析起来也很麻烦）</p><h4 id="_2-content-length" tabindex="-1"><a class="header-anchor" href="#_2-content-length" aria-hidden="true">#</a> 2.content-length</h4><p>文件大小和长度</p><h4 id="_3-keep-alive" tabindex="-1"><a class="header-anchor" href="#_3-keep-alive" aria-hidden="true">#</a> 3.keep-alive</h4><p>http 是基于 TCP 协议的，但是通常在进行一次请求和响应结束后会立刻中断</p><p>在 http1.0 中，如果想要继续保持连接：</p><p>​- 浏览器需要在请求头中添加 connection: keep-alive</p><ul><li>服务器需要在响应头中添加 connection:keey-alive</li></ul><p>​- 当客户端再次放请求时，就会使用同一个连接，直接一方中断连接</p><p>在 http1.1 中，所有连接默认是 connection: keep-alive 的不同的 Web 服务器会有不同的保持 keep-alive 的时间。Node 中默认是<strong>5s</strong></p><h4 id="_4-accept-encoding" tabindex="-1"><a class="header-anchor" href="#_4-accept-encoding" aria-hidden="true">#</a> 4.accept-encoding</h4><p>告知服务器，客户端支持的文件压缩格式，比如 js 文件可以使用 gzip 编码，对应.gz 文件；</p><h5 id="_5-accept" tabindex="-1"><a class="header-anchor" href="#_5-accept" aria-hidden="true">#</a> 5.accept</h5><p>告知服务器，客户端可接受文件的格式类型；</p><h4 id="_6-user-agent" tabindex="-1"><a class="header-anchor" href="#_6-user-agent" aria-hidden="true">#</a> 6.user-agent</h4><p>客户端相关的信息</p><h2 id="response-对象" tabindex="-1"><a class="header-anchor" href="#response-对象" aria-hidden="true">#</a> response 对象</h2><p>write 方法：直接写出数据，但是并没有关闭流；</p><p>end 方法：这种方式是写出最后的数据，并且写出后关闭流。</p><p>如果没有调用 end 和 close，客户端将会一直等待结果：所以客户端在发送网络请求时，都会设置超时时间。</p><h3 id="返回状态码" tabindex="-1"><a class="header-anchor" href="#返回状态码" aria-hidden="true">#</a> 返回状态码</h3><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/09-http/image-20211013163310423.png" alt="返回状态码" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置状态码的两种常见方式</span>
res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="响应头文件" tabindex="-1"><a class="header-anchor" href="#响应头文件" aria-hidden="true">#</a> 响应头文件</h3><p>返回头部信息，主要有两种方式：</p><p>res.setHeader：一次写入一个头部信息</p><p>res.writeHead：同时写入 header 和 status</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json;charset=utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json;charset=utf8&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Header 设置 Content-Type 的作用：默认客户端接收到的是字符串，客户端会按照自己默认的方式进行处理</p><h2 id="http-原生请求" tabindex="-1"><a class="header-anchor" href="#http-原生请求" aria-hidden="true">#</a> http 原生请求</h2><p>以 GET &amp; POST 为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8000&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> req <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hostname</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8000</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h2><p>请求数据设为二进制，上传的文件 req 请求数据，需要做字符串正则切割</p><p>要点：</p><p>1、req 设置 encoding，fs.write 是设置 encoding，均为 binary</p><p>2、字符串正则切割，图片二进制数据必定位于 Content-Type: image/jpg 之后，截取出来后清除头部多余空格，清除尾部 --boundary--</p><p>3、boundary 通过请求头来确定。</p><p>4、该方法仅适用于 content-type 为 form-data 时使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;querystring&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/upload&#39;</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        req<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> boundary <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> fileSize <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-length&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> curSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            body <span class="token operator">+=</span> data<span class="token punctuation">;</span>
            curSize <span class="token operator">+=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">文件上传进度：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>curSize <span class="token operator">/</span> fileSize <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> payLoad <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">&#39;\\r\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//获取image/jpg的位置</span>
            <span class="token keyword">const</span> type <span class="token operator">=</span> payLoad<span class="token punctuation">[</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token comment">//从image/jpg开始位置截取</span>
            <span class="token keyword">const</span> typeIndex <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> typeLength <span class="token operator">=</span> type<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token keyword">let</span> imageData <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>typeIndex <span class="token operator">+</span> typeLength<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//将中间的两个空格去掉</span>
            imageData <span class="token operator">=</span> imageData<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>boundary<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> fw <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&quot;./boo.jpg&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
                <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;binary&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>imageData<span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">服务器在</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">端口启动</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71),o=[e];function c(i,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Http服务器.html.vue"]]);export{k as default};
