import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as i,d as r}from"./app.a28e6ae2.js";const s={},t=r(`<p>Web 页面的性能好坏直观判断可以通过性能监测工具来实现，现在以 Chrome 提供的 Lighthouse 为例，分析构成一个页面的各项性能指标参数</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p><strong>Lighthouse 是什么</strong></p><p>Lighthouse 是一个开源的自动化工具，用来测试页面性能</p><p><strong>为什么要用 Lighthouse</strong></p><p>Web 性能可以直接影响业务指标，例如转化率和用户满意度</p><p>通过使用 Lighthouse，分析收集各种应用页面性能指标，并进行评估，以此我们可以根据评估结果进行针对性优化，不断提升用户体验</p><p><strong>使用方法</strong></p><p>官方提供了 4 种使用方式：</p><p>Chrome 开发者工具</p><p>Node CLi</p><p>Node Module</p><p>Chrome 扩展</p><h3 id="开发者工具" tabindex="-1"><a class="header-anchor" href="#开发者工具" aria-hidden="true">#</a> 开发者工具</h3><ol><li>在 chrome 浏览器中打开你需要测试的网站，按 f12 进入开发者调试模式</li><li>找到 Lighthouse-点击 generate report,它会对页面进行相关性能的检查，最终生成报告</li></ol><h3 id="使用-node-cli" tabindex="-1"><a class="header-anchor" href="#使用-node-cli" aria-hidden="true">#</a> 使用 Node-Cli</h3><ol><li>安装 node 8 或更高版本</li><li>全局安装 lighthouse <code>npm install -g lighthouse</code></li><li>使用终端输入命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx lighthouse 你需要测试的url地址 <span class="token parameter variable">--locale</span> zh <span class="token parameter variable">--quiet</span> --chrome-flags<span class="token operator">=</span><span class="token string">&quot;--headless&quot;</span>  --only-categories<span class="token operator">=</span>performance  <span class="token parameter variable">--preset</span><span class="token operator">=</span>desktop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>等待一段时间后会在当前目录生成报告</li></ol><h3 id="性能报告图例" tabindex="-1"><a class="header-anchor" href="#性能报告图例" aria-hidden="true">#</a> 性能报告图例</h3><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/performance/1676600558440.jpg" alt="性能报告图" loading="lazy"></p><h2 id="指标详解" tabindex="-1"><a class="header-anchor" href="#指标详解" aria-hidden="true">#</a> 指标详解</h2><p>用户最关注、影响最大的是 FCP、FID，影响用户体验的是 CLS。这三个指标很重要</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/performance/performance-flux.png" alt="性能指标进程图" loading="lazy"></p><h3 id="fp" tabindex="-1"><a class="header-anchor" href="#fp" aria-hidden="true">#</a> FP</h3><p>FP（First Paint）：首次渲染</p><p>表示浏览器从开始请求网站到屏幕渲染第一个像素点的时间</p><h3 id="fcp" tabindex="-1"><a class="header-anchor" href="#fcp" aria-hidden="true">#</a> FCP</h3><p>FCP（First Contentful Paint）：首次内容渲染</p><p>表示浏览器渲染出第一个内容的时间</p><p>这个内容可以是文本、图片或 SVG 等，不包括 iframe 和白色背景的 canvas</p><h3 id="si" tabindex="-1"><a class="header-anchor" href="#si" aria-hidden="true">#</a> SI</h3><p>SP（Speed Index）：速度指数</p><p>表明网页内容的可见填充速度</p><p>SI 衡量页面加载期间内容的视觉显示速度</p><h3 id="lcp" tabindex="-1"><a class="header-anchor" href="#lcp" aria-hidden="true">#</a> LCP</h3><p>LCP（Largest Contentful Paint）：最大内容绘制</p><p>标记了渲染出最大文本或图片的时间</p><p>LCP 是测量感知加载速度的一个以用户为中心的<strong>重要指标</strong></p><h3 id="tti" tabindex="-1"><a class="header-anchor" href="#tti" aria-hidden="true">#</a> TTI</h3><p>TTI（Time to Interactive）：可交互时间</p><p>指标测量页面从开始加载到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需的时间</p><p>虽然 TTI 可以在实际情况进行测量，但是因为用户交互会影响网页的 TTI，从而导致报告存在误差。如果需要了解页面的实际交互，应该测量 FID</p><h3 id="tbt" tabindex="-1"><a class="header-anchor" href="#tbt" aria-hidden="true">#</a> TBT</h3><p>TBT（Total Blocking Time）：总阻塞时间</p><p>指标测量 FCP 与 TTI 之间的总时间，这期间，主线程被阻塞的时间过长，无法作出输入响应</p><p>因为 TBT 指标涉及到 TTI，所以了解实际交互最好还是测量 FID</p><h3 id="fid" tabindex="-1"><a class="header-anchor" href="#fid" aria-hidden="true">#</a> FID</h3><p>FID（First Input Delay）：首次输入延迟</p><p>首次输入延迟是一个测量加载响应度的以用户为中心的<strong>重要指标</strong></p><p>FID 指标有助于衡量用户对网站交互性和响应度的第一印象，因为该项指标将用户尝试与无响应页面进行交互时的体验进行了量化，低 FID 会有助于让用户确信页面的有效度</p><p>FIC 测量从用户第一次与页面交互（例如当他们单击链接、点按按钮或使用 JS 控件）直到浏览器对交互作出响应，并实际能够开始处理事件处理程序所经过的时间</p><h3 id="cls" tabindex="-1"><a class="header-anchor" href="#cls" aria-hidden="true">#</a> CLS</h3><p>CLS（Cumulative Layout Shift）：累积布局偏移</p><p>CLS 是测量视觉稳定性的一个以用户为中心的<strong>重要指标</strong></p><p>CLS 测量整个页面生命周期内发生的所有意外布局偏移中最大一连串的布局偏移分数，通常指一些嵌入式广告、文本闪烁、动态注入的内容等</p><h2 id="指标优化" tabindex="-1"><a class="header-anchor" href="#指标优化" aria-hidden="true">#</a> 指标优化</h2><p>性能瓶颈和指标参数的优化主要分析几个比较重要的参数，结合实际项目开发</p><h3 id="fcp-优化" tabindex="-1"><a class="header-anchor" href="#fcp-优化" aria-hidden="true">#</a> FCP 优化</h3><p>FP 和 FCP 的优化相似</p><ol><li>所有初始化用不到的 js 文件全部走异步加载（defer 或 async），需要走 cdn 的第三方插件放到页面底部（防止页面对 html 和 css 解析阻塞）</li><li>js 拆包，打包工具将异步代码拆包，保证每个路由只加载当前路由对应的 js 代码</li><li>优化文件大小，打包工具自动执行代码压缩</li><li>优化项目结构，在保证可维护性的基础上，尽量减少初始化组件的加载数量</li><li>网络协议层面的优化，gzip、cdn 等。gzip 可以由打包工具执行压缩，服务器开启配置即可</li><li>应用层协议优化，采用域名分片技术突破 6 个 TCP 连接限制或采用 HTTP2</li></ol><p>提高 FCP 的核心理念：减少初始化视图内容，减少初始化下载资源大小，避免 js 阻塞</p><h3 id="lcp-优化" tabindex="-1"><a class="header-anchor" href="#lcp-优化" aria-hidden="true">#</a> LCP 优化</h3><p>图片、视频以及大量文本绘制完成后就会报告 LCP</p><ol><li>本地图片使用在线压缩工具进行压缩</li><li>压缩图片、视频，转换格式，使用图像 CDN</li><li>资源预加载，给予特定资源<code>&lt;link rel=&quot;preload&quot; href=&quot;img.png&quot;&gt;</code>的标签来预先获取资源。注意这些资源优先级不能高于关键的 css、js 等资源</li><li>图片懒加载</li></ol><h3 id="si-优化" tabindex="-1"><a class="header-anchor" href="#si-优化" aria-hidden="true">#</a> SI 优化</h3><p>只要提高 LCP 和 FCP，SI 的时间就会有显著提高</p><ol><li>压缩减小 js 的执行</li><li>降低样式计算复杂度、避免复杂布局和扰动</li><li>使用 web workers</li></ol><p>其他指标参数的优化基本相似，都是围绕减小体积、减少执行时间、降低复杂度、减少请求数量等手段展开的</p>`,69),n=[t];function p(h,l){return e(),i("div",null,n)}const c=a(s,[["render",p],["__file","3-target.html.vue"]]);export{c as default};
