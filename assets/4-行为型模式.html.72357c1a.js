const t=JSON.parse('{"key":"v-12cc802e","path":"/design/4-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html","title":"行为型模式","lang":"zh-CN","frontmatter":{"title":"行为型模式","order":4,"category":[],"tag":["策略模式","观察者模式","迭代器模式","状态模式"],"description":"策略模式 策略模式是一种简单却常用的设计模式，它的应用场景非常广泛 策略模式由两部分构成：一部分是封装不同策略的策略组，另一部分是 Context 上下文。通过组合和委托来让 Context 拥有执行策略的能力，从而实现可复用、可扩展和可维护，避免大量复制粘贴的工作 注意：策略模式跟抽象工厂模式 (./2-创建型模式.html#抽象工厂模式)概念比较类...","head":[["meta",{"property":"og:url","content":"http://localhost:8080/frontend-service-station/design/4-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"前端加油站"}],["meta",{"property":"og:title","content":"行为型模式"}],["meta",{"property":"og:description","content":"策略模式 策略模式是一种简单却常用的设计模式，它的应用场景非常广泛 策略模式由两部分构成：一部分是封装不同策略的策略组，另一部分是 Context 上下文。通过组合和委托来让 Context 拥有执行策略的能力，从而实现可复用、可扩展和可维护，避免大量复制粘贴的工作 注意：策略模式跟抽象工厂模式 (./2-创建型模式.html#抽象工厂模式)概念比较类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-02-18T16:34:37.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"策略模式"}],["meta",{"property":"article:tag","content":"观察者模式"}],["meta",{"property":"article:tag","content":"迭代器模式"}],["meta",{"property":"article:tag","content":"状态模式"}],["meta",{"property":"article:modified_time","content":"2023-02-18T16:34:37.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":2,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":2,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]}],"git":{"createdTime":1676738077000,"updatedTime":1676738077000,"contributors":[{"name":"yuzhihang","email":"misaka10032@aliyun.com","commits":1}]},"readingTime":{"minutes":4.18,"words":1255},"autoDesc":true,"filePathRelative":"design/4-行为型模式.md","localizedDate":"2023年2月18日"}');export{t as data};
