import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as o,d as e,w as l,a as n,r as c,b as t,e as a}from"./app.9cc78ce3.js";const d={},r=n('<p>网页布局过程：</p><ol><li><p>先准备好相关的网页元素，网页元素基本都是盒子 Box。</p></li><li><p>利用 CSS 设置好盒子样式，然后摆放到相应位置。</p></li><li><p>往盒子里面装内容。</p></li></ol><p><strong>网页布局的核心本质：利用 CSS 摆盒子。</strong></p><h2 id="盒子模型" tabindex="-1"><a class="header-anchor" href="#盒子模型" aria-hidden="true">#</a> 盒子模型</h2><p>所谓盒子模型：就是把 HTML 页面中的布局元素看作是一个矩形盒子，盛装内容的容器。</p><p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，包括：border 边框、margin 外边距、padding 内边距和 content 实际内容。</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/CSS/box-model" alt="盒子模型" loading="lazy"></p><h3 id="内边距-padding" tabindex="-1"><a class="header-anchor" href="#内边距-padding" aria-hidden="true">#</a> 内边距 padding</h3><p>设置内边距，即边框与内容之间的距离。</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">padding-top</td><td style="text-align:left;">上内边距</td></tr><tr><td style="text-align:left;">padding-right</td><td style="text-align:left;">右内边距</td></tr><tr><td style="text-align:left;">padding-bottom</td><td style="text-align:left;">下内边距</td></tr><tr><td style="text-align:left;">padding-left</td><td style="text-align:left;">左内边距</td></tr></tbody></table><p><strong>复合写法</strong></p><table><thead><tr><th style="text-align:left;">值的个数</th><th style="text-align:left;">表达意思</th></tr></thead><tbody><tr><td style="text-align:left;">padding: 5px;</td><td style="text-align:left;">1 个值，代表上下左右都有 5px 内边距</td></tr><tr><td style="text-align:left;">padding: 5px 10px;</td><td style="text-align:left;">2 个值，代表上下内边距 5px，左右内边距 10px</td></tr><tr><td style="text-align:left;">padding: 5px 10px 20px;</td><td style="text-align:left;">3 个值，代表上内边距 5px，左右内边距 10px，下内边距 20px</td></tr><tr><td style="text-align:left;">padding: 5px 10px 20px 30px;</td><td style="text-align:left;">4 个值，上是 5 像索 右 10 像素下 20 像素左是 30 像素顺时针</td></tr></tbody></table><p><strong>padding 同样影响盒子实际大小</strong></p><ol><li><p>内容和边框有了距离，添加了内边距。</p></li><li><p>padding 影响了盒子实际大小。</p></li><li><p>盒子若已有宽高，此时再指定内边框，会撑大盒子。解决方案：如果保证盒子跟效果图大小保持一致，让宽高减去多出来的内边距大小。</p></li><li><p>内边距撑开盒子，当导航栏字数不一样多使用 padding 最合适。</p></li><li><p>如果盒子本身没有指定 width/height 属性，则此时 padding 不会撑开盒子大小</p></li></ol><h3 id="外边距-margin" tabindex="-1"><a class="header-anchor" href="#外边距-margin" aria-hidden="true">#</a> 外边距 margin</h3><p>设置外边距，即控制盒子和盒子之间的距离。</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">margin-top</td><td style="text-align:left;">上外边距</td></tr><tr><td style="text-align:left;">margin-right</td><td style="text-align:left;">右外边距</td></tr><tr><td style="text-align:left;">margin-bottom</td><td style="text-align:left;">下外边距</td></tr><tr><td style="text-align:left;">margin-left</td><td style="text-align:left;">左外边距</td></tr></tbody></table><p><strong>复合写法与 padding 完全一致。</strong></p><p>外边距可以让块级盒子水平居中，但是必须满足两个条件：</p><p>1.盒子必须指定了 width.</p><p>2.盒子左右的外边距都设置为 auto.</p><p><strong>margin: 0 auto;</strong> 上下 0 外边距，左右居中。</p><p><strong>注意</strong>：以上方法是让块级元素水平居中，行内元素或行内块元素给其父元素添加 text-align:center 即可。</p><h3 id="外边距合并与塌陷-重要" tabindex="-1"><a class="header-anchor" href="#外边距合并与塌陷-重要" aria-hidden="true">#</a> 外边距合并与塌陷（重要）</h3><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距合并或塌陷。</p><ul><li><strong>相邻块元素垂直外边距合并</strong></li></ul><p>上下相邻的两个兄弟块元素相遇，上面有 margin-bottom，下面又 margin-top，垂直间距取两个值中的较大者，该现象称为相邻块元素垂直外边距的合并。</p><p><strong>解决方案</strong>：尽量只给一个盒子添加 margin 值。</p><ul><li><strong>嵌套块元素垂直外边距塌陷</strong></li></ul><p>两个嵌套关系的父子块元素，父元素有上外边距同时子元素也有子外边距，此时父元素会塌陷较大的外边距值。</p><p>示例：红色 div 上下外边距均为 0，左右居中。红色 div 内嵌套的黄色 div 上部外边距 50px。由于嵌套块元素垂直外边距塌陷，导致整个 div 全下陷 50px。</p>',31),u=t("div",{class:"language-html line-numbers-mode","data-ext":"html"},[t("pre",{class:"language-html"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("div")]),a(`
  `),t("span",{class:"token special-attr"},[t("span",{class:"token attr-name"},"style"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),t("span",{class:"token value css language-css"},[t("span",{class:"token property"},"width"),t("span",{class:"token punctuation"},":"),a(" 200px"),t("span",{class:"token punctuation"},";"),a(),t("span",{class:"token property"},"height"),t("span",{class:"token punctuation"},":"),a(" 300px"),t("span",{class:"token punctuation"},";"),a(),t("span",{class:"token property"},"margin"),t("span",{class:"token punctuation"},":"),a(" 0 auto"),t("span",{class:"token punctuation"},";"),a(),t("span",{class:"token property"},"background-color"),t("span",{class:"token punctuation"},":"),a(" pink"),t("span",{class:"token punctuation"},";")]),t("span",{class:"token punctuation"},'"')])]),a(`
`),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("div")]),a(`
    `),t("span",{class:"token special-attr"},[t("span",{class:"token attr-name"},"style"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),t("span",{class:"token value css language-css"},[t("span",{class:"token property"},"width"),t("span",{class:"token punctuation"},":"),a(" 200px"),t("span",{class:"token punctuation"},";"),a(),t("span",{class:"token property"},"height"),t("span",{class:"token punctuation"},":"),a(" 300px"),t("span",{class:"token punctuation"},";"),a(),t("span",{class:"token property"},"margin"),t("span",{class:"token punctuation"},":"),a(" 0 auto"),t("span",{class:"token punctuation"},";"),a(),t("span",{class:"token property"},"background-color"),t("span",{class:"token punctuation"},":"),a(" red"),t("span",{class:"token punctuation"},";")]),t("span",{class:"token punctuation"},'"')])]),a(`
  `),t("span",{class:"token punctuation"},">")]),a(`
    `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("div")]),a(`
      `),t("span",{class:"token special-attr"},[t("span",{class:"token attr-name"},"style"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),t("span",{class:"token value css language-css"},[t("span",{class:"token property"},"width"),t("span",{class:"token punctuation"},":"),a(" 100px"),t("span",{class:"token punctuation"},";"),a(),t("span",{class:"token property"},"height"),t("span",{class:"token punctuation"},":"),a(" 150px"),t("span",{class:"token punctuation"},";"),a(),t("span",{class:"token property"},"margin"),t("span",{class:"token punctuation"},":"),a(" 50px auto"),t("span",{class:"token punctuation"},";"),a(),t("span",{class:"token property"},"background-color"),t("span",{class:"token punctuation"},":"),a(" yellow"),t("span",{class:"token punctuation"},";")]),t("span",{class:"token punctuation"},'"')])]),a(`
    `),t("span",{class:"token punctuation"},">")]),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("div")]),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("div")]),t("span",{class:"token punctuation"},">")]),a(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("div")]),t("span",{class:"token punctuation"},">")]),a(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),h=n(`<p><strong>解决方案</strong>：</p><ul><li><p>为父元素定义上边框；</p></li><li><p>为父元素定义上内边距；</p></li><li><p>为父元素添加 overflow:hidden。</p></li></ul><h3 id="清除内外边距" tabindex="-1"><a class="header-anchor" href="#清除内外边距" aria-hidden="true">#</a> 清除内外边距</h3><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此布局前首先要清除网页元素的内外边距。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了。</p><h3 id="怪异盒模型-border-box" tabindex="-1"><a class="header-anchor" href="#怪异盒模型-border-box" aria-hidden="true">#</a> 怪异盒模型 border-box</h3><p>CSS 两种通过 box-sizing 来指定盒模型，content-box / border-box（CSS3 新属性），计算盒子大小的方式因此改变。</p><p>浏览器默认使用 content-box 盒模型。</p><ul><li><p>box-sizing:content-box 盒子大小为 width/height + padding + border（默认）</p></li><li><p>box-sizing:border-box 盒子大小为 width/height</p></li></ul><p>如果盒子模型我们改为 box-sizing: border-box，那么 padding 和 border 就不会撑大盒子，将不会再影响盒子实际大小（前提 padding 和 border 不会超过 width/height）</p><p>现开发已经普遍大量使用 border-box 盒模型。</p><h2 id="浮动" tabindex="-1"><a class="header-anchor" href="#浮动" aria-hidden="true">#</a> 浮动</h2><p>CSS 提供了三种传统布局方式：普通流（标准流）、浮动、定位。</p><h3 id="标准流" tabindex="-1"><a class="header-anchor" href="#标准流" aria-hidden="true">#</a> 标准流</h3><p>标签按照规定好默认方式排列。</p><ul><li><p>块级元素独占一行，从上向下顺序排列。</p></li><li><p>行内元素按照顺序，从左到右顺序排列，碰到父元素边缘自动换行。</p></li></ul><p>我们前面学习的就是标准流，标准流是最基本的布局方式。</p><p><strong>注意</strong>：实际开发中，一个页面基本都包含了这三种布局方式（移动端会学习新的布局方式）。</p><h3 id="浮动-1" tabindex="-1"><a class="header-anchor" href="#浮动-1" aria-hidden="true">#</a> 浮动</h3><p>很多布局效果，标准流没办法完成，可利用浮动完成。浮动可以改变元素标签默认的排列方式。</p><p>浮动最典型的应用：让多个块级元素一行内排列显示。</p><br><p><strong>网页布局第一准则</strong></p><p>多个块元素纵向排列找标准流，多个块级元素横向排列找浮动。</p><br><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h4><p>float 用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><p>语法：选择器 <code>{ float : 属性值; }</code></p><p>属性值：none（默认值，元素不浮动）; left 向左浮动; right 向右浮动。</p><h4 id="浮动特性-重难点" tabindex="-1"><a class="header-anchor" href="#浮动特性-重难点" aria-hidden="true">#</a> 浮动特性（重难点）</h4><ol><li><p>浮动元素脱离标准普通流的控制(浮)移动到指定位置(动)(脱标)，浮动的盒子不再保留原先的位置</p></li><li><p>如果多个盒子都设置了浮动，则他们会按照属性值一行内显示并且顶端对齐排列。</p></li></ol><p>浮动的元素是互相贴靠在一起的(不会有缝隙)，如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p><ol start="3"><li>浮动元素会具有行内块元素特性。</li></ol><p>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。</p><p><strong>如果行内元素有了浮动，不需要转换元素显示就可以直接给宽度和高度</strong></p><p><strong>块级盒子如果没有设置宽度，默认宽度和父级一样宽，添加浮动后，大小根据内容决定。行内元素同理</strong></p><h4 id="浮动元素应用场景" tabindex="-1"><a class="header-anchor" href="#浮动元素应用场景" aria-hidden="true">#</a> 浮动元素应用场景</h4><p>为了约束浮动元素位置，我们网页布局一般采取的策略是：</p><p>先用表主流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置.符合网页布局第一准则。</p><h4 id="浮动布局注意点" tabindex="-1"><a class="header-anchor" href="#浮动布局注意点" aria-hidden="true">#</a> 浮动布局注意点</h4><ol><li>浮动和标准流的父盒子搭配</li></ol><p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。</p><ol start="2"><li>一个元素浮动，理论上其余的兄弟元素也要浮动</li></ol><p>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流。理想中的状态，让子盒子撑开父盒子。</p><br><p><strong>网页布局第二准则</strong></p><p>先设置盒子大小，之后设置盒子的位置。</p><br><p>常见网页布局示例：</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/CSS/layout1" alt="layout1" width="350" height="350" loading="lazy"></p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/CSS/layout2" alt="layout2" width="350" height="350" loading="lazy"></p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/CSS/layout3" alt="layout3" width="350" height="350" loading="lazy"></p><h3 id="清除浮动" tabindex="-1"><a class="header-anchor" href="#清除浮动" aria-hidden="true">#</a> 清除浮动</h3><h4 id="为什么需要清除浮动" tabindex="-1"><a class="header-anchor" href="#为什么需要清除浮动" aria-hidden="true">#</a> 为什么需要清除浮动</h4><p>父盒子不方便给高度，子盒子浮动不占有位置，父级盒子高度为 0，影响下面的标准流盒子。</p><p>由于浮动元素不再占有原文档流的位置，所以它会对后面的元素排版产生影响。</p><h4 id="本质" tabindex="-1"><a class="header-anchor" href="#本质" aria-hidden="true">#</a> 本质</h4><p>清除浮动的本质是清除浮动元素造成的影响。</p><p>如果父盒子本身有高度，则不需要清除浮动。</p><p>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度就不会影响下面的标准流。</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><p>选择器 <code>{ clear: 属性值; }</code></p><p>left: 不允许左侧有浮动元素（清除左侧浮动）</p><p>right: 不允许右侧有浮动元素（清除右侧浮动）</p><p>both: 同时清除左右两侧浮动的影响</p><p>实际工作中，几乎只用 clear: both;</p><p><strong>清除浮动的策略是：闭合浮动。只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子</strong></p><h3 id="清除浮动四方法" tabindex="-1"><a class="header-anchor" href="#清除浮动四方法" aria-hidden="true">#</a> 清除浮动四方法</h3><ul><li>额外标签法（隔墙法），W3C 推荐做法。</li></ul><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p><p>额外标签法在浮动元素末尾添加一个空的标签。clear: both;</p><p>优点：通俗易懂，书写方便。</p><p>缺点：添加许多无意义的标签，结构化较差。</p><p><strong>注意</strong>：要求这个新的空标签必须是块级元素。</p><br><ul><li>父级添加 overflow 属性。</li></ul><p>可以给父级添加 overflow 属性，将其属性设置为 hidden、auto 或 scroll。</p><p>优点：代码简洁。</p><p>缺点：无法显示溢出的部分。</p><br><ul><li>父级添加 after 伪元素。</li></ul><p>:after 方式是额外标签法升级版，也是给父元素添加。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* IE6、7专有 */</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：没有增加标签，结构更简单。</p><p>缺点：照顾低版本浏览器。</p><p>代表网站：百度、淘宝、网易等。</p><br><ul><li>父级添加双伪元素。</li></ul><p>给父元素添加</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix:before,
.clearfix:after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优缺点同上。</p><h2 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h2><h3 id="为什么需要定位" tabindex="-1"><a class="header-anchor" href="#为什么需要定位" aria-hidden="true">#</a> 为什么需要定位</h3><ul><li><p>某个元素可以自由地在一个盒子内移动位置，并且压住其他盒子。</p></li><li><p>滚动窗口的时候，盒子是固定在屏幕某个位置的。</p></li></ul><p>以上效果，标准流或浮动都无法快速实现，需要定位来实现。</p><p><strong>定位与浮动的区别</strong></p><ol><li><p>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子。</p></li><li><p>定位则是可以让盒子自由地在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p></li></ol><h3 id="定位组成" tabindex="-1"><a class="header-anchor" href="#定位组成" aria-hidden="true">#</a> 定位组成</h3><p>将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。</p><p>定位=定位模式+边偏移。</p><h4 id="定位模式-position" tabindex="-1"><a class="header-anchor" href="#定位模式-position" aria-hidden="true">#</a> 定位模式 position</h4><p>用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。</p><table><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">语义</th></tr></thead><tbody><tr><td style="text-align:left;">static</td><td style="text-align:left;">静态定位</td></tr><tr><td style="text-align:left;">relative</td><td style="text-align:left;">相对定位</td></tr><tr><td style="text-align:left;">absolute</td><td style="text-align:left;">绝对定位</td></tr><tr><td style="text-align:left;">fixed</td><td style="text-align:left;">固定定位</td></tr><tr><td style="text-align:left;">sticky</td><td style="text-align:left;">粘性定位</td></tr></tbody></table><h4 id="位置属性" tabindex="-1"><a class="header-anchor" href="#位置属性" aria-hidden="true">#</a> 位置属性</h4><p>盒子移动到的最终位置，有 top bottom left right 四个属性。</p><h3 id="静态定位-statics" tabindex="-1"><a class="header-anchor" href="#静态定位-statics" aria-hidden="true">#</a> 静态定位 statics</h3><p>元素的默认定位方式，无定位的意思。</p><p>属性 position: static;</p><p>特点：</p><ol><li>静态定位按照标准流特性摆放位置，它没有边偏移。</li></ol><p>2.布局时很少使用。</p><h3 id="相对定位-relative-重要" tabindex="-1"><a class="header-anchor" href="#相对定位-relative-重要" aria-hidden="true">#</a> 相对定位 relative（重要）</h3><p>元素在移动位置的时候，相对于它原来的位置来说的。</p><p>属性 position: relative;</p><p>特点：</p><ol><li><p>相对于自己原来的位置来移动（移动位置的时候参照点是自己原来的位置）</p></li><li><p>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。（不脱标，继续保留原来位置）</p></li></ol><h3 id="绝对定位-absolute-重要" tabindex="-1"><a class="header-anchor" href="#绝对定位-absolute-重要" aria-hidden="true">#</a> 绝对定位 absolute（重要）</h3><p>绝对定位是元素在移动位置的时候，相对于它祖先元素而言的。</p><p>属性 position: absolute;</p><p>特点：</p><ol><li><p>如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document 文档）。</p></li><li><p>如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。</p></li><li><p>绝对定位不再占有原先的位置（脱标）。</p></li></ol><h3 id="固定定位-fixed-重要" tabindex="-1"><a class="header-anchor" href="#固定定位-fixed-重要" aria-hidden="true">#</a> 固定定位 fixed（重要）</h3><p>固定定位是元素固定于浏览器可视区的位置。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变。</p><p>属性 position: fixed;</p><p>特点：</p><ol><li><p>以浏览器的可视窗口为参照点移动元素。</p></li><li><p>跟父元素没有任何关系。</p></li><li><p>不随滚动条滚动。</p></li><li><p>固定定位不再占有原先的位置。</p></li><li><p>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</p></li></ol><p><strong>小技巧（固定在版心右侧位置）</strong></p><p>1.让固定定位的盒子 left:50%，走到浏览器可视区一半位置。</p><p>2.让固定定位的盒子 margin-left:版心宽度一半距离，再移动版心宽度一半的位置。</p><h3 id="粘性定位-sticky-了解" tabindex="-1"><a class="header-anchor" href="#粘性定位-sticky-了解" aria-hidden="true">#</a> 粘性定位 sticky（了解）</h3><p>sticky 跟前面四个属性值都不一样，它会产生动态效果，很像 relative 和 fixed 的结合：一些时候是 relative 定位（定位基点是自身默认位置），另一些时候自动变成 fixed 定位（定位基点是视口）。</p><p>属性 <code>选择器 { position: sticky; top: 10px; }</code></p><p>sticky 能够形成&quot;动态固定&quot;的效果。比如，百度新闻首页的导航栏，初始加载时在自己的默认位置（relative 定位）</p><p>滚动条下滑变成固定定位，页面滚回去又会变成相对定位</p><p>特点：</p><ol><li><p>以浏览器的可视窗口为参照点移动元素（固定定位特点）</p></li><li><p>粘性定位占有原先的位置（相对定位特点）</p></li><li><p>必须添加 top 、left、right、bottom 其中一个才有效</p></li><li><p>跟页面滚动搭配使用。兼容性较差，IE 不支持。</p></li></ol><h3 id="叠放次序-z-index" tabindex="-1"><a class="header-anchor" href="#叠放次序-z-index" aria-hidden="true">#</a> 叠放次序 z-index</h3><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z-index 来控制盒子的前后次序（z 轴）</p><p>属性 z-index: 1;</p><p>特点：</p><ol><li><p>数值可以是正整数、负整数或 0，默认 auto，数值越大，盒子越靠上。</p></li><li><p>如果属性值相同，则按照书写顺序，后来者居上。</p></li><li><p>数字后面不能加单位。</p></li><li><p>只有开启定位的盒子 z-index 属性才能生效。</p></li></ol><h3 id="子绝父相" tabindex="-1"><a class="header-anchor" href="#子绝父相" aria-hidden="true">#</a> 子绝父相</h3><p>子级或内部的元素是绝对定位的话，父级或外部元素要使用相对定位。</p><p>子级绝对定位，不会占有位置，可以放到父盒子里面任何一个地方，不会影响其他的兄弟盒子。</p><p>父盒子需要加定位限制子盒子在外部的父盒子内部显示。</p><p>父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p><p>总结：因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，所以是绝对定位。</p><h3 id="定位特殊性" tabindex="-1"><a class="header-anchor" href="#定位特殊性" aria-hidden="true">#</a> 定位特殊性</h3><ul><li><p>行内元素添加绝对或固定定位，可以直接设置高度和宽度。</p></li><li><p>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p></li><li><p>脱标的盒子不会触发外边距塌陷（外边距合并）。浮动元素、绝对定位（固定定位）元素都不会触发外边距合并问题。</p></li><li><p>绝对定位（固定定位）会完全压住盒子。</p></li><li><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片。）下图文字为<code>&lt;p&gt;</code>内文字。</p></li></ul><p>效果演示：</p>`,151),k=t("div",{class:"language-html line-numbers-mode","data-ext":"html"},[t("pre",{class:"language-html"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("div")]),a(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("d1"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("div")]),a(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("fl"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("div")]),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("p")]),t("span",{class:"token punctuation"},">")]),a("阁下何不乘风起，扶摇直上九万里"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("p")]),t("span",{class:"token punctuation"},">")]),a(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("div")]),t("span",{class:"token punctuation"},">")]),a(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("div")]),a(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("d1"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("div")]),a(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("pa"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("div")]),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("p")]),t("span",{class:"token punctuation"},">")]),a("阁下何不乘风起，扶摇直上九万里"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("p")]),t("span",{class:"token punctuation"},">")]),a(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("div")]),t("span",{class:"token punctuation"},">")]),a(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),g=t("div",{class:"language-css line-numbers-mode","data-ext":"css"},[t("pre",{class:"language-css"},[t("code",null,[t("span",{class:"token selector"},".d1"),a(),t("span",{class:"token punctuation"},"{"),a(`
  `),t("span",{class:"token property"},"width"),t("span",{class:"token punctuation"},":"),a(" 300px"),t("span",{class:"token punctuation"},";"),a(`
  `),t("span",{class:"token property"},"height"),t("span",{class:"token punctuation"},":"),a(" 50px"),t("span",{class:"token punctuation"},";"),a(`
  `),t("span",{class:"token property"},"background-color"),t("span",{class:"token punctuation"},":"),a(" #e5e5e5"),t("span",{class:"token punctuation"},";"),a(`
`),t("span",{class:"token punctuation"},"}"),a(`
`),t("span",{class:"token selector"},".fl"),a(),t("span",{class:"token punctuation"},"{"),a(`
  `),t("span",{class:"token property"},"float"),t("span",{class:"token punctuation"},":"),a(" left"),t("span",{class:"token punctuation"},";"),a(`
  `),t("span",{class:"token property"},"width"),t("span",{class:"token punctuation"},":"),a(" 100px"),t("span",{class:"token punctuation"},";"),a(`
  `),t("span",{class:"token property"},"height"),t("span",{class:"token punctuation"},":"),a(" 25px"),t("span",{class:"token punctuation"},";"),a(`
  `),t("span",{class:"token property"},"background-color"),t("span",{class:"token punctuation"},":"),a(" #fff"),t("span",{class:"token punctuation"},";"),a(`
`),t("span",{class:"token punctuation"},"}"),a(`
`),t("span",{class:"token selector"},".pa"),a(),t("span",{class:"token punctuation"},"{"),a(`
  `),t("span",{class:"token property"},"position"),t("span",{class:"token punctuation"},":"),a(" absolute"),t("span",{class:"token punctuation"},";"),a(`
  `),t("span",{class:"token property"},"width"),t("span",{class:"token punctuation"},":"),a(" 100px"),t("span",{class:"token punctuation"},";"),a(`
  `),t("span",{class:"token property"},"height"),t("span",{class:"token punctuation"},":"),a(" 25px"),t("span",{class:"token punctuation"},";"),a(`
  `),t("span",{class:"token property"},"background-color"),t("span",{class:"token punctuation"},":"),a(" #fff"),t("span",{class:"token punctuation"},";"),a(`
`),t("span",{class:"token punctuation"},"}"),a(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),b=n('<h3 id="定位总结" tabindex="-1"><a class="header-anchor" href="#定位总结" aria-hidden="true">#</a> 定位总结</h3><ul><li><p>相对定位、固定定位、绝对定位两大特点：</p><p>1.是否占有位置（脱标）；2.以谁为基准点移动位置。</p></li><li><p>定位终点：子绝父相。</p></li></ul><table><thead><tr><th style="text-align:left;">定位模式</th><th style="text-align:left;">是否脱标</th><th style="text-align:left;">移动位置</th><th style="text-align:left;">是否常用</th></tr></thead><tbody><tr><td style="text-align:left;">static 静态定位</td><td style="text-align:left;">否</td><td style="text-align:left;">不能使用边偏移</td><td style="text-align:left;">很少</td></tr><tr><td style="text-align:left;">relative 相对定位</td><td style="text-align:left;">否（占有位置）</td><td style="text-align:left;">相对于自身位置移动</td><td style="text-align:left;">常用</td></tr><tr><td style="text-align:left;">absolute 绝对定位</td><td style="text-align:left;">是（不占有位置）</td><td style="text-align:left;">带有定位的父级</td><td style="text-align:left;">常用</td></tr><tr><td style="text-align:left;">fixed 固定定位</td><td style="text-align:left;">是（不占有位置）</td><td style="text-align:left;">浏览器可视区</td><td style="text-align:left;">常用</td></tr><tr><td style="text-align:left;">sticky 粘性定位</td><td style="text-align:left;">否（占有位置）</td><td style="text-align:left;">浏览器可视区</td><td style="text-align:left;">当前阶段少</td></tr></tbody></table><h2 id="css-属性书写顺序-重要" tabindex="-1"><a class="header-anchor" href="#css-属性书写顺序-重要" aria-hidden="true">#</a> CSS 属性书写顺序（重要）</h2><p>建议遵循顺序：</p><ol><li><p>布局定位属性： display / position / float / clear / visibility / overflow（建议 display 第一个写，关系到显示模式）</p></li><li><p>自身属性：width / height / margin / padding / border / background</p></li><li><p>文本属性：color / font / text-decoration / text-align / vertical-align / white-space / break-word</p></li><li><p>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background: linear-gradient</p></li></ol><h2 id="页面布局整体思路" tabindex="-1"><a class="header-anchor" href="#页面布局整体思路" aria-hidden="true">#</a> 页面布局整体思路</h2><ol><li><p>确定页面的版心（可视区域）。</p></li><li><p>分析页面中的行模块，以及每个行模块中的列模块。页面布局第一准则。</p></li><li><p>一行中的列模块经常浮动布局，先确定每个列的大小之后确定列的位置。页面布局第二准则。</p></li><li><p>制作 HTML 结构，遵循现有结构、后有样式的原则。结构永远最重要。</p></li><li><p>先理清楚布局结构，再写代码尤为重要。</p></li></ol><h2 id="网页布局总结" tabindex="-1"><a class="header-anchor" href="#网页布局总结" aria-hidden="true">#</a> 网页布局总结</h2><ol><li>标准流</li></ol><p>可以让盒子上下排列或左右排列，垂直的块级盒子显示用标准流布局。</p><ol start="2"><li>浮动</li></ol><p>可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子水平显示就用浮动布局。</p><ol start="3"><li>定位</li></ol><p>定位最大的特点是有层叠的概念，可以让多个盒子前后叠压来显示。如果元素自由在某个盒子内移动就用定位布局。</p>',15);function x(f,m){const s=c("CodeDemo");return i(),o("div",null,[r,e(s,{id:"code-demo-268",type:"normal",title:"%E5%A4%96%E8%BE%B9%E8%B7%9D%E5%A1%8C%E9%99%B7",code:"eJytz0sOwiAQgOGrTGZvpBo3UD0JGywESCk0SK2N8e72mdiY7rqamc3/Zd5oUuWQYi7tk3uAR+qcunJsrUyGwomQ+sXAKKtNonCezkpEbT0FAqJJgcFdFKWOofHyUAQXIoXa+pJx5P42RJf4bvmo5FgHGPu/wp+RrY3ssjKGa5PplHOhnaXeyo89M300b8vEzxd0g2re"},{default:l(()=>[u]),_:1}),h,e(s,{id:"code-demo-955",type:"normal",title:"%E6%B5%AE%E5%8A%A8%E4%B8%8E%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%8E%8B%E7%9B%92%E5%AD%90%E6%BC%94%E7%A4%BA",code:"eJyrVsooyc1RslKyScksU0jOSSwuto1RSjGMUbKLyVNQQBFNywGK2ugDhSByBXYvZzQ+2dH9ZO/UJzt6n+yc8XJx34ut29/v6XnWue3ZxPbns7c82dH1ZOfcJzvaX7b32OgXAPXB9BNhX0EiFe1T0lFKLi4GelQvxVChGmReeWZKSYaVgrGBQUGFNUggIzUzPaPESsEUJpCUmJydXpRfmpeim5yfk19kpaCcagqCQNnamDy9tByISWk5+YlAfTmpaSVgfVCTDTFMNjLFbXJaWhrU2IJEiLEF+cWZJZn5eVYKiUnF+TmlJalUMF2pFgC77MXQ"},{default:l(()=>[k,g]),_:1}),b])}const S=p(d,[["render",x],["__file","页面布局核心.html.vue"]]);export{S as default};
