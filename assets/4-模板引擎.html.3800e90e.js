import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as p,b as n,e,d as o,a as c,r as l}from"./app.d2f4db47.js";const i={},u=c(`<p>本章节不是对 Vue 源码的解读，而是对模板引擎的鼻祖 mustache 库的源码解读。熟悉了模板引擎的真正运作机制之后，对 Vue 的模板渲染方法才能有更深刻的认知</p><h2 id="模板引擎历史" tabindex="-1"><a class="header-anchor" href="#模板引擎历史" aria-hidden="true">#</a> 模板引擎历史</h2><p>模板引擎的出现是为了更优雅地将数据转化为视图</p><p>历史上曾经出现的数据转视图的方法</p><ol><li>纯 DOM 法：非常笨拙，没有实战价值</li><li>数组 join 法：曾经非常流行</li><li>ES6 的反引号法：ES6 新增语法糖</li><li>模板引擎：解决数据变为视图的最优雅的方法</li></ol><p>现在以 mustache 为例讲解模板引擎的使用和源码实现</p><h2 id="mustache-基本使用" tabindex="-1"><a class="header-anchor" href="#mustache-基本使用" aria-hidden="true">#</a> mustache 基本使用</h2><ul><li><p>mustache 是“胡子”的意思，因为它的嵌入标记<code>{{ }}</code>非常像胡子</p></li><li><p><code>{{ }}</code>的语法也被 Vue 沿用，这就是我们学习 mustache 的原因</p></li><li><p>mustache 是最早的模板引擎库，比 Vue 诞生更早，它的底层实现机理在当时是非常有创造性、轰动性的，为后续模板引擎的发展提供了崭新思路</p></li></ul><p>注意，mustache 的 <code>{{ }}</code> 内是不能像 vue 里那样写表达式</p><p>使用 mustache 需要引入 mustache 库，可以直接通过 cdn 方式引入</p><p>然后通过 <code>Mustache.render(templateStr, data)</code> 方式生成 dom 模板</p><h3 id="循环模式" tabindex="-1"><a class="header-anchor" href="#循环模式" aria-hidden="true">#</a> 循环模式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Mustache <span class="token keyword">from</span> <span class="token string">&quot;mustache/mustache.mjs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;ul&gt;
    {{#arr}}
        &lt;li&gt;
            &lt;div class=&quot;hd&quot;&gt;{{name}}的基本信息&lt;/div&gt;
            &lt;div class=&quot;bd&quot;&gt;
                &lt;p&gt;姓名：{{name}}&lt;/p&gt;
                &lt;p&gt;性别：{{sex}}&lt;/p&gt;
                &lt;p&gt;年龄：{{age}}&lt;/p&gt;
            &lt;/div&gt;
        &lt;/li&gt;
    {{/arr}}
&lt;/ul&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小红&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;女&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小强&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;男&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> res <span class="token operator">=</span> Mustache<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673867114410.jpg" alt="mustache使用" loading="lazy"></p><h3 id="数组嵌套" tabindex="-1"><a class="header-anchor" href="#数组嵌套" aria-hidden="true">#</a> 数组嵌套</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Mustache <span class="token keyword">from</span> <span class="token string">&quot;mustache/mustache.mjs&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;ul&gt;
    {{#arr}}
        &lt;li&gt;
            &lt;div class=&quot;hd&quot;&gt;{{name}}的基本信息&lt;/div&gt;
            &lt;div class=&quot;bd&quot;&gt;
                &lt;p&gt;{{name}}的爱好是：&lt;/p&gt;
                &lt;ol&gt;
                    {{#hobbies}}
                        &lt;li&gt;{{.}}&lt;/li&gt;
                    {{/hobbies}}
                &lt;/ol&gt;
            &lt;/div&gt;
        &lt;/li&gt;
    {{/arr}}
&lt;/ul&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;游泳&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小红&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;编程&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;写作文&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;看报纸&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小强&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;打台球&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> res <span class="token operator">=</span> Mustache<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> con <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
con<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> res<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673867690809.jpg" alt="数组嵌套mustache结果" loading="lazy"></p><h3 id="不循环" tabindex="-1"><a class="header-anchor" href="#不循环" aria-hidden="true">#</a> 不循环</h3><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673867298030.jpg" alt="mustache不循环" loading="lazy"></p><h3 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h3><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673867856996.jpg" alt="mustache布尔值" loading="lazy"></p><h2 id="mustache-底层核心机理" tabindex="-1"><a class="header-anchor" href="#mustache-底层核心机理" aria-hidden="true">#</a> mustache 底层核心机理</h2><p>在较为简单的示例情况下， 可以用正则表达式实现</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>我买了一个{{thing}}，好{{mood}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;thing&quot;</span><span class="token operator">:</span> <span class="token string">&quot;华为手机&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;mood&quot;</span><span class="token operator">:</span> <span class="token string">&quot;开心&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是复杂情况下，正则表达式就行不通了</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    {{#arr}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{.}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    {{/arr}}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mustache 模板引擎的作用是将字符串模板变为 dom 模板，最后结合数据挂载到 dom 树上，在页面渲染呈现。这个过程中，mustache 引入了一个名为 tokens 的概念，用来作为“中间人”</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673869124001.jpg" alt="mustache核心思想" loading="lazy"></p><p>简而言之， tokens 是模板字符串的 js 嵌套数组表示，说白了就是模板字符串的 js 表示。它是一个数组，里面包含了很多个 token，每个 token 又是基于规则生成的一个数组。</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673869580100.jpg" alt="模板解析原理" loading="lazy"></p><p>当模板字符串中有循环存在时，它将被编译为嵌套更深的 tokens</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673869816522.jpg" alt="循环tokens" loading="lazy"></p><p>当循环是双重的，那么 tokens 会更深一层</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673869923025.jpg" alt="双重tokens" loading="lazy"></p><p>我们可以通过修改 mustache 源码的方式直接在浏览器控制台打印输出 tokens： 在源码中找到 parseTemplate 函数，然后在该函数的函数体末尾处， return 的 <code>nestTokens(squashTokens(tokens))</code> 其实就是 tokens。 做如下的稍加修改，以便在浏览器中打印查看</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myTokens <span class="token operator">=</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span><span class="token function">squashTokens</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> myTokens<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如有这样一个模板字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;{{name}}的基本信息&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则最终打印输出的 tokens 将如下图所示</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/3ad3c18690da458094f34612962d9e5f_tplv-k3u1fbpfcp-zoom-in-crop-mark_4536_0_0_0.awebp" alt="tokens打印输出效果" loading="lazy"></p><h2 id="手写实现-mustache" tabindex="-1"><a class="header-anchor" href="#手写实现-mustache" aria-hidden="true">#</a> 手写实现 mustache</h2><p>mustache 库底层重点做两个事情：</p><ol><li>将模板字符串编译为 tokens 形式</li><li>将 tokens 结合数据，解析为 dom 字符串</li></ol><h3 id="实现扫描器类-scanner" tabindex="-1"><a class="header-anchor" href="#实现扫描器类-scanner" aria-hidden="true">#</a> 实现扫描器类 Scanner</h3><p>Scanner 类需要实现的功能是：扫描模板字符串，将 <code>{{</code> <code>}}</code> 之外的字符串分割开并返回分割字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// scanner.js</span>
<span class="token doc-comment comment">/**
 * 扫描器类
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Scanner</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">templateStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr <span class="token operator">=</span> templateStr<span class="token punctuation">;</span>
    <span class="token comment">// position 指针位置</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// tail 尾巴 初始化时就是模板字符串原文</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> templateStr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 内容遍历，没有返回值</span>
  <span class="token function">scan</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// tag有多长，就让指针后移多少位</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 指针遍历内容进行扫描，直到遇见指定内容结束，并且能够返回结束之前路过的文字</span>
  <span class="token function">scanUtil</span><span class="token punctuation">(</span><span class="token parameter">stopTag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 记录执行本方法开始时的pos值</span>
    <span class="token keyword">const</span> pos_backup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>
    <span class="token comment">// 尾巴的开头不是stopTag，说明没有扫描到stopTag，pos指针继续右移</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>stopTag<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 改变尾巴为从当前指针这个字符开始，到最后的全部字符</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos_backup<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// end of string</span>
  <span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成-tokens" tabindex="-1"><a class="header-anchor" href="#生成-tokens" aria-hidden="true">#</a> 生成 tokens</h3><p>有了 Scanner 类后，就可以着手去根据传入的模板字符串生成一个 tokens 数组了。最终想要生成的 tokens 里的每一条 token 数组的第一项用 name(数据) 或 text(非数据文本) 或 #(循环开始) 或 /(循环结束) 作为标识符。 新建一个 parseTemplateToTokens.js 文件来实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parseTemplateToTokens.js</span>
<span class="token keyword">import</span> Scanner <span class="token keyword">from</span> <span class="token string">&quot;./scanner.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span><span class="token parameter">templateStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 实例化一个扫描器，用于扫描模板字符串</span>
  <span class="token keyword">const</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> words<span class="token punctuation">;</span>
  <span class="token comment">// 遍历寻找开始标记{{与结束标记}}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>scanner<span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUtil</span><span class="token punctuation">(</span><span class="token string">&quot;{{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 收集开始标记出现之前的文字</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>words <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">&quot;{{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUtil</span><span class="token punctuation">(</span><span class="token string">&quot;}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     *  判断从 <span class="token punctuation">{</span><span class="token punctuation">{</span> 和 <span class="token punctuation">}</span><span class="token punctuation">}</span> 之间收集到的 word 的开头是不是特殊字符 # 或 /,
     *  如果是则这个 token 的第一个元素相应的为 # 或 /, 否则为 name
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>words <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">&quot;}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> tokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过 parseTemplateToTokens 处理之后的 tokens 如下</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673884224938.jpg" alt="生成初步tokens" loading="lazy"></p><p>接下来，需要实现 tokens 内部的数组嵌套</p><h3 id="实现-tokens-嵌套" tabindex="-1"><a class="header-anchor" href="#实现-tokens-嵌套" aria-hidden="true">#</a> 实现 tokens 嵌套</h3><p>这里我们新建一个 nestTokens.js 文件，定义 nestTokens 函数来做 tokens 嵌套功能，将传入的 tokens 处理成包含嵌套的 nestTokens 数组返回</p><p>**实现思路：**在 nestTokens 中，我们遍历传入的 tokens 的每一个 token，遇到第一项是 # 和 / 的分别做处理，其余的做一个默认处理。大致思路是当遍历到的 token 的第一项为 # 时，就把直至遇到配套的 / 之前，遍历到的每一个 token 都放入一个容器（collector）中，把这个容器放入当前 token 里作为第 3 项（下标 2）元素。</p><p>但这里有个问题：在遇到匹配的 / 之前又遇到 # 了怎么办？也就是如何解决循环里面嵌套循环的情况？</p><p>解决的思路是新建一个 栈数据类型 的数组（stack），遇到一个 #，就把当前 token 放入这个栈中，让 collector 指向这个 token 的第三个元素。遇到下一个 # 就把新的 token 放入栈中，collector 指向新的 token 的第三个元素。遇到 / 就把栈顶的 token 移出栈，collector 指向移出完后的栈顶 token。这就利用了栈的先进后出的特点，保证了遍历的每个 token 都能放在正确的地方，也就是 collector 都能指向正确的地址。</p><p>重要思想：</p><ol><li>深层的嵌套结构拉平为栈结构</li><li>位于栈顶的数组永远是循环过程中正处于<code>#</code>和<code>/</code>之间的待嵌套包裹的数组，在遇到下一个<code>/</code>结束符之前，其内容都会让收集器推入内部子项</li><li>收集器永远都指向栈顶数组的内部子项(下标 2)数组，负责收集嵌套内容。一旦结束嵌套，栈顶数组出栈，收集器指向当前栈顶数组的内部子项(下标 2)数组</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parseTemplateToTokens.js</span>
<span class="token keyword">import</span> Scanner <span class="token keyword">from</span> <span class="token string">&quot;./scanner.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> nestTokens <span class="token keyword">from</span> <span class="token string">&quot;./nestTokens.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span><span class="token parameter">templateStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// nestTokens.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nestTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> collector <span class="token operator">=</span> nestTokens<span class="token punctuation">;</span> <span class="token comment">// 一开始让收集器 collector 指向最终返回的数组 nestTokens</span>
  tokens<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&quot;#&quot;</span><span class="token operator">:</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        collector <span class="token operator">=</span> token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 连等赋值</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;/&quot;</span><span class="token operator">:</span>
        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        collector <span class="token operator">=</span> stack<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> nestTokens<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> nestTokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解析-dom-字符串" tabindex="-1"><a class="header-anchor" href="#解析-dom-字符串" aria-hidden="true">#</a> 解析 DOM 字符串</h3><p>通过 Scanner 和嵌套生成函数 parseTemplateToTokens，模板字符串已经成功编译为 tokens，接下来我们需要将 tokens 结合数据解析成 dom 字符串</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673945803257.jpg" alt="解析DOM字符串" loading="lazy"></p><p>大致思路是遍历 tokens 数组，根据每条 token 的第一项的值来做不同的处理，为 text 就直接把 token[1] 加入到最终输出的 dom 字符串，为 name 则根据 token[1] 去 data 里获取数据，结合进来。</p><p>先声明一个简单的 renderTemplate 函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// renderTemplate.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> domString <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  tokens<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&quot;text&quot;</span><span class="token operator">:</span>
        domString <span class="token operator">+=</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;name&quot;</span><span class="token operator">:</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;#&quot;</span><span class="token operator">:</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> domString<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>但是！<code>name</code>和<code>#</code>内部的数据结构存在两种复杂情况待处理</strong></p><h4 id="定义-lookup-函数" tabindex="-1"><a class="header-anchor" href="#定义-lookup-函数" aria-hidden="true">#</a> 定义 lookup 函数</h4><p>当 data 里存在多重对象嵌套时，如果需要链式调用对象内部 value，比如 <code>data = { test: { a: { b: 10 } } }</code>，这时如果某个 token 为 <code>[&quot;name&quot;, &quot;test.a.b&quot;]</code>，即代表数据的 token 的第 2 项元素是 <code>test.a.b</code> 这样的有多个点符号的值，就需要一个函数来解析其属性路径，获取正确数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lookup.js</span>
<span class="token comment">// 思路就是先获取 test.a 的值, 比如说是 temp, 再获取 temp.b 的值, 一步步获取</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果传入的 key 里有点符号而且不是仅仅只是点符号</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">!==</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> keys <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 key 用 . 分割成一个数组</span>
    <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> acc<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 一步步获取</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 如果传入的 key 没有点符号，直接返回</span>
  <span class="token keyword">return</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义-parsearray-函数" tabindex="-1"><a class="header-anchor" href="#定义-parsearray-函数" aria-hidden="true">#</a> 定义 parseArray 函数</h4><p>另一种情况是数组多重嵌套，也就是当某个 token 的第一项为 &quot;#&quot; 时，要再次递归调用 renderTemplate 函数。这里我们新定义了一个 parseArray 函数来处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parseArray.js</span>
<span class="token keyword">import</span> renderTemplate <span class="token keyword">from</span> <span class="token string">&quot;./renderTemplate.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> domString <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">itemData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    domString <span class="token operator">+=</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>itemData<span class="token punctuation">,</span>
      <span class="token string-property property">&quot;.&quot;</span><span class="token operator">:</span> itemData<span class="token punctuation">,</span> <span class="token comment">// 针对简单数组的情况，即模板字符串里的 {{.}}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> domString<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，完善一开始的 renderTemplate 函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// renderTemplate.js</span>
<span class="token keyword">import</span> lookup <span class="token keyword">from</span> <span class="token string">&quot;./lookup.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> parseArray <span class="token keyword">from</span> <span class="token string">&quot;./parseArray.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> domString <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  tokens<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&quot;text&quot;</span><span class="token operator">:</span>
        domString <span class="token operator">+=</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;name&quot;</span><span class="token operator">:</span>
        domString <span class="token operator">+=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;#&quot;</span><span class="token operator">:</span>
        domString <span class="token operator">+=</span> <span class="token function">parseArray</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> domString<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最终完整源码" tabindex="-1"><a class="header-anchor" href="#最终完整源码" aria-hidden="true">#</a> 最终完整源码</h2><h3 id="index-js" tabindex="-1"><a class="header-anchor" href="#index-js" aria-hidden="true">#</a> index.js</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// import &#39;./source-code.js&#39;</span>
<span class="token keyword">import</span> parseTemplateToTokens <span class="token keyword">from</span> <span class="token string">&quot;./parseTemplateToTokens.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> renderTemplate <span class="token keyword">from</span> <span class="token string">&quot;./renderTemplate.js&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// const templateStr = &quot;我买了一个{{thing}}，好{{mood}}啊&quot;;</span>
<span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;ul&gt;
    {{#students}}
        &lt;li&gt;
            &lt;div class=&quot;hd&quot;&gt;{{name}}的基本信息&lt;/div&gt;
            &lt;div class=&quot;bd&quot;&gt;
                &lt;p&gt;{{name}}的爱好是：&lt;/p&gt;
                &lt;ol&gt;
                    {{#hobbies}}
                        &lt;li&gt;{{.}}&lt;/li&gt;
                    {{/hobbies}}
                &lt;/ol&gt;
            &lt;/div&gt;
        &lt;/li&gt;
    {{/students}}
&lt;/ul&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">students</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;游泳&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小红&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;编程&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;写作文&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;看报纸&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小强&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;打台球&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 全局提供SSG_TemplateEngine对象</span>
window<span class="token punctuation">.</span>SSG_TemplateEngine <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 渲染方法</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">templateStr<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用parseTemplateToTokens函数，让模板字符串变为tokens数组</span>
    <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用renderTemplate函数，让tokens数组变为dom字符串</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 调用渲染</span>
SSG_TemplateEngine<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parsetemplatetotokens-js" tabindex="-1"><a class="header-anchor" href="#parsetemplatetotokens-js" aria-hidden="true">#</a> parseTemplateToTokens.js</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Scanner <span class="token keyword">from</span> <span class="token string">&quot;./scanner.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> nestTokens <span class="token keyword">from</span> <span class="token string">&quot;./nestTokens.js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">parseTemplateToTokens</span><span class="token punctuation">(</span><span class="token parameter">templateStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 实例化一个扫描器，用于扫描模板字符串</span>
  <span class="token keyword">const</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> words<span class="token punctuation">;</span>
  <span class="token comment">// 遍历寻找开始标记{{与结束标记}}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>scanner<span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUtil</span><span class="token punctuation">(</span><span class="token string">&quot;{{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 收集开始标记出现之前的文字</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>words <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">&quot;{{&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    words <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">scanUtil</span><span class="token punctuation">(</span><span class="token string">&quot;}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     *  判断从 <span class="token punctuation">{</span><span class="token punctuation">{</span> 和 <span class="token punctuation">}</span><span class="token punctuation">}</span> 之间收集到的 word 的开头是不是特殊字符 # 或 /,
     *  如果是则这个 token 的第一个元素相应的为 # 或 /, 否则为 name
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>words <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">&quot;}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scanner-js" tabindex="-1"><a class="header-anchor" href="#scanner-js" aria-hidden="true">#</a> scanner.js</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 扫描器类
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Scanner</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">templateStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr <span class="token operator">=</span> templateStr<span class="token punctuation">;</span>
    <span class="token comment">// position 指针位置</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// tail 尾巴 初始化时就是模板字符串原文</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> templateStr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 内容遍历，没有返回值</span>
  <span class="token function">scan</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// tag有多长，就让指针后移多少位</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">+=</span> tag<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 指针遍历内容进行扫描，直到遇见指定内容结束，并且能够返回结束之前路过的文字</span>
  <span class="token function">scanUtil</span><span class="token punctuation">(</span><span class="token parameter">stopTag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 记录执行本方法开始时的pos值</span>
    <span class="token keyword">const</span> pos_backup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>
    <span class="token comment">// 尾巴的开头不是stopTag，说明没有扫描到stopTag，pos指针继续右移</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>stopTag<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 改变尾巴为从当前指针这个字符开始，到最后的全部字符</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos_backup<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// end of string</span>
  <span class="token function">eos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nesttokens-js" tabindex="-1"><a class="header-anchor" href="#nesttokens-js" aria-hidden="true">#</a> nestTokens.js</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 折叠tokens，将#和/之间的tokens整合起来，作为它下标为3的项
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">nestTokens</span><span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nestedTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 栈结构，存放内部tokens，栈顶（嵌套最里面的）tokens数组中当前操作的tokens小数组</span>
  <span class="token keyword">const</span> sections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 收集器，天生指向nestedTokens结果数组，引用类型值，所以指向同一个数组</span>
  <span class="token comment">// 收集器的指向会变化，当遇见#的时候，收集器指向token下标为2的新数组</span>
  <span class="token keyword">let</span> collector <span class="token operator">=</span> nestedTokens<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&quot;#&quot;</span><span class="token operator">:</span>
        <span class="token comment">// 收集器放入token</span>
        collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 入栈</span>
        sections<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 收集器切换，给token添加下标为2的项并且让收集器指向它</span>
        collector <span class="token operator">=</span> token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;/&quot;</span><span class="token operator">:</span>
        <span class="token comment">// 出栈</span>
        sections<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 改变收集器为栈结构队尾（栈顶）那项的下标为2的数组，如果栈顶不存在即长度为0，指回原结果数组</span>
        collector <span class="token operator">=</span> sections<span class="token punctuation">.</span>length
          <span class="token operator">?</span> sections<span class="token punctuation">[</span>sections<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
          <span class="token operator">:</span> nestedTokens<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        collector<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nestedTokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rendertemplate-js" tabindex="-1"><a class="header-anchor" href="#rendertemplate-js" aria-hidden="true">#</a> renderTemplate.js</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 函数的功能是让tokens数组变为DOM字符串
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> domStr <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  tokens<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&quot;text&quot;</span><span class="token operator">:</span>
        domStr <span class="token operator">+=</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;name&quot;</span><span class="token operator">:</span>
        <span class="token comment">// token[1]指的是data对象中的属性，比如data.students，token[1]就是&quot;students&quot;</span>
        domStr <span class="token operator">+=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;#&quot;</span><span class="token operator">:</span>
        <span class="token comment">// 因为是 # + / 遍历的数组，所以解析值取token[2]，data[token[1]]是data中数组的属性值</span>
        domStr <span class="token operator">+=</span> <span class="token function">parseArray</span><span class="token punctuation">(</span>token<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> domStr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// lookup 对象路径解析函数</span>
<span class="token comment">//取 test.a 的值, 比如说是 temp, 再获取 temp.b 的值, 一步步获取</span>
<span class="token keyword">function</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果传入的 key 里有点符号而且不是仅仅只是点符号</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">!==</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> keys <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 key 用 . 分割成一个数组</span>
    <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> acc<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 一步步获取</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 如果传入的 key 没有点符号，直接返回</span>
  <span class="token keyword">return</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// parseArray 数组解析函数</span>
<span class="token comment">// 遇到数组嵌套的情况，需要递归调用renderTemplate将其内部数组递归殆尽</span>
<span class="token comment">// 由于mustache在模板中默认将 . 点符号作为数组元素本身，因此，递归时需要将 . 代表的item元素传入</span>
<span class="token keyword">function</span> <span class="token function">parseArray</span><span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> domStr <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    domStr <span class="token operator">+=</span> <span class="token function">renderTemplate</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>item<span class="token punctuation">,</span>
      <span class="token string-property property">&quot;.&quot;</span><span class="token operator">:</span> item<span class="token punctuation">,</span> <span class="token comment">// 针对简单数组的情况，即模板字符串里的 {{.}}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> domStr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="太长不看-总结" tabindex="-1"><a class="header-anchor" href="#太长不看-总结" aria-hidden="true">#</a> 太长不看-总结</h2><ol><li>Vue 源码中对于 template 模板的插值语法渲染原理，借鉴于 Mustache 模板引擎</li><li>Mustache 模板引擎的核心原理是先将模板字符串编译为层次分明的 tokens 数组，再结合 js 数据对象，将 tokens 数组中需要插值的内容插入进去，最终解析为 dom 字符串</li><li>tokens 数组的生成依赖扫描器类 Scanner 和 tokens 生成函数</li><li>扫描器负责将字符串中的关键字符区分出来，分割成一维数组</li><li>tokens 生成函数在数组遍历时，需要借助栈结构的特性，将嵌套的数组不断堆叠在栈顶数组，最后一层一层弹出，按照正确的结构拼接在 tokens 数组中</li><li>完整的 tokens 数组生成后，需结合 js 数据对象 data 来插入内容，需要判断内部的解析路径，以及考虑数组的嵌套，合理地使用递归方法，最终生成正确的 DOM 字符串用以渲染页面</li></ol><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Vue/1673869124001.jpg" alt="mustache流程二览" loading="lazy"></p><p>可运行项目 demo 详见：</p>`,92),k={href:"https://github.com/mi-saka10032/mustache-demo",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const s=l("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",k,[e("https://github.com/mi-saka10032/mustache-demo"),o(s)])])])}const g=a(i,[["render",r],["__file","4-模板引擎.html.vue"]]);export{g as default};
