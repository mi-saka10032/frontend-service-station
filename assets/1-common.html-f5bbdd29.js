import{_ as t,C as e,Y as p,Z as i,$ as l,a0 as n,a2 as o,a3 as c,a1 as s}from"./framework-bb209140.js";const u={},r=s(`<h2 id="变量与关键字与常量" tabindex="-1"><a class="header-anchor" href="#变量与关键字与常量" aria-hidden="true">#</a> 变量与关键字与常量</h2><h3 id="变量与可变性" tabindex="-1"><a class="header-anchor" href="#变量与可变性" aria-hidden="true">#</a> 变量与可变性</h3><ul><li>声明变量使用 let 关键字</li><li>默认情况下，变量是不可变的（Immutable）</li><li>声明变量时，在变量前面加上 mut，就可以使变量可变。</li></ul><p>错误示例</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>

  x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>error[E0384]：Cannot assign twice to immutable variable x</code></p><p>正确示例</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>

  x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量与常量" tabindex="-1"><a class="header-anchor" href="#变量与常量" aria-hidden="true">#</a> 变量与常量</h3><ul><li>常量（constant），常量在绑定值以后也是不可变的，但是它与不可变的变量有很多区别： <ul><li>不可以使用 mut，常量永远都是不可变的</li><li>声明常量需要使用 const 关键字，它的类型必须被标注</li><li>常量可以在任何作用域内进行声明，包括全局作用域</li><li>常量只可以绑定到常量表达式，无法绑定到函数的调用结果或只能在运行时才能计算出的值</li></ul></li><li>在程序运行期间，常量在其声明的作用域内一直有效</li><li>命名规范：Rust 里常量使用全大写字母，每个单词之间用下划线分开 <ul><li>例子：<code>const MAX_POINTS:u32 = 100_000</code>;</li></ul></li></ul><h3 id="shadowing" tabindex="-1"><a class="header-anchor" href="#shadowing" aria-hidden="true">#</a> Shadowing</h3><ul><li>变量 shadow 是指在同一个作用域内，使用一个新的变量名来覆盖（隐藏）之前的同名变量。这样做可以在同一个作用域内重新定义一个新的变量，而不会影响之前的同名变量</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token comment">// The value of x is 12</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shadow 和把变量标记为 mut 不一样：</p><ul><li>如果不使用 let 关键字，那么重新给非 mut 的变量赋值会导致编译时错误</li><li>使用 let 声明的同名新变量，也是不可变的</li><li>使用 let 声明的同名新变量，它的类型可以与之前不同</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// √</span>
  <span class="token keyword">let</span> spaces <span class="token operator">=</span> <span class="token string">&quot;     &quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> spaces <span class="token operator">=</span> spaces<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> spaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ×</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> spaces <span class="token operator">=</span> <span class="token string">&quot;     &quot;</span><span class="token punctuation">;</span>
  spaces <span class="token operator">=</span> spaces<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> spaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><ul><li>Rust 数据类型分为：标量和复合类型</li><li>Rust 是静态编译语言，在编译时必须知道所有变量的类型 <ul><li>基于使用的值，编译器通常能够推断出它的具体类型</li><li>但如果可能的类型比较多（例如把 String 转为整数的 parse 方法），就必须添加类型的标准，否则编译出错</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 必须声明guess的类型，因为parse整数的结果多样，可以是i32 u32 i64等</span>
  <span class="token keyword">let</span> guess<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">.</span><span class="token function">prase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Not a number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> guess<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标量类型" tabindex="-1"><a class="header-anchor" href="#标量类型" aria-hidden="true">#</a> 标量类型</h3><ul><li>一个标量类型代表一个单个的值</li><li>Rust 有四个主要的标量类型 <ul><li>整数类型</li><li>浮点类型</li><li>布尔类型</li><li>字符类型</li></ul></li></ul><h4 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型" aria-hidden="true">#</a> 整数类型</h4><ul><li>整数类型没有小数部分</li><li>无符号整数类型以 u 开头</li><li>有符号整数类型以 i 开头</li></ul><table><thead><tr><th style="text-align:left;">Length</th><th style="text-align:left;">Signed</th><th style="text-align:left;">Unsigned</th></tr></thead><tbody><tr><td style="text-align:left;">8-bit</td><td style="text-align:left;">i8</td><td style="text-align:left;">u8</td></tr><tr><td style="text-align:left;">16-bit</td><td style="text-align:left;">i16</td><td style="text-align:left;">u16</td></tr><tr><td style="text-align:left;">32-bit</td><td style="text-align:left;">i32</td><td style="text-align:left;">u32</td></tr><tr><td style="text-align:left;">64-bit</td><td style="text-align:left;">i64</td><td style="text-align:left;">u64</td></tr><tr><td style="text-align:left;">128-bit</td><td style="text-align:left;">i128</td><td style="text-align:left;">u128</td></tr><tr><td style="text-align:left;">arch</td><td style="text-align:left;">isize</td><td style="text-align:left;">usize</td></tr></tbody></table><ul><li>有符号范围：-(2^(n-1)) ~ 2^(n-1) -1</li><li>无符号范围：0 ~ 2^n -1</li><li>isize 和 usize 类型由计算机的结构所决定，如果是 64 位计算机则是 64 位</li><li>使用 isize 或 usize 的主要场景是对某种集合进行索引操作</li></ul><h5 id="整数字面值" tabindex="-1"><a class="header-anchor" href="#整数字面值" aria-hidden="true">#</a> 整数字面值</h5><p>整数可以通过加下划线增强可读性，并不影响整数的值</p><p>除了 byte 类型以外，所有的数值字面值都允许使用类型后缀</p><p>整数的默认类型是 i32</p><table><thead><tr><th style="text-align:left;">Length</th><th style="text-align:left;">Signed</th></tr></thead><tbody><tr><td style="text-align:left;">Decimal</td><td style="text-align:left;">98_222</td></tr><tr><td style="text-align:left;">Hex</td><td style="text-align:left;">0xff</td></tr><tr><td style="text-align:left;">Octal</td><td style="text-align:left;">0o77</td></tr><tr><td style="text-align:left;">Binary</td><td style="text-align:left;">0b1111_0000</td></tr><tr><td style="text-align:left;">Byte(u8 only)</td><td style="text-align:left;">b&#39;A&#39;</td></tr></tbody></table><h5 id="整数溢出" tabindex="-1"><a class="header-anchor" href="#整数溢出" aria-hidden="true">#</a> 整数溢出</h5><p>例如：u8 的范围是 0-255，如果你把一个 u8 变量设为 256</p><ul><li>调试模式：编译会检查溢出，运行时发生 panic</li><li>发布模式（--release）：Rust 不会检查可能导致 panic 的整数溢出 <ul><li>如果溢出，Rust 会执行“环绕”操作：256 变为 0,257 变为 1...</li></ul></li></ul><h4 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型" aria-hidden="true">#</a> 浮点类型</h4><ul><li>f32，32 位，单精度</li><li>f64，64 位，双精度</li></ul><p>Rust 的浮点类型使用了 IEEE-754 标准来表述</p><p>f64 是默认类型，因为在现代 CPU 上 f64 和 f32 速度差不多，且精度更高</p><p>Rust 也支持对浮点类型取余，限制要求：分子分母都是同类型浮点数</p><h4 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型" aria-hidden="true">#</a> 布尔类型</h4><p>一个字节大小，符号是 bool，true or false</p><h4 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型" aria-hidden="true">#</a> 字符类型</h4><p>char 类型用来描述语言中最基础的单个字符。</p><p>字符类型的字面值使用单引号</p><p>占用 4 字节大小</p><p>是 Unicode 标量值，可以表示比 ASCII 多得多的字符内容：拼音、中日韩文、零长度空白字符、emoji 表情等，长度是</p><ul><li>U+0000 到 U+D7FF</li><li>U+E000 到 U+10FFFF</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token keyword">char</span> <span class="token operator">=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> z <span class="token operator">=</span> &#39;😂&#39;<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复合类型" tabindex="-1"><a class="header-anchor" href="#复合类型" aria-hidden="true">#</a> 复合类型</h3><p>Rust 提供了两种基础的复合类型：元组（Tuple）和数组</p><h4 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h4><ul><li>Tuple 可以将多个类型的多个值放在一个类型里</li><li>Tuple 长度固定，一旦声明就无法改变</li><li>声明元组时，在小括号里，各值用逗号分开</li><li>tuple 变量使用点标记法，后接元素索引号</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tup<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}, {}, {}, &quot;</span><span class="token punctuation">,</span> tup<span class="token number">.0</span><span class="token punctuation">,</span> tup<span class="token number">.1</span><span class="token punctuation">,</span> tup<span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用模式匹配来解构（destructure）一个 tuple 来获取元素的值</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tup<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span> tu<span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}, {}, {}, &quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h4><ul><li>数组可以将多个值放在一个类型里</li><li>数组中每个元素的类型必须相同</li><li>数组长度固定</li><li>声明数组时，在中括号里，各值用逗号分开</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="数组的用处" tabindex="-1"><a class="header-anchor" href="#数组的用处" aria-hidden="true">#</a> 数组的用处</h5><p>如果想让你的数据存放在 stack（栈）上而不是 heap（堆）上，或者想保证有固定数量的元素，应使用数组</p><p>但是，数组没有 Vector 灵活</p><ul><li>Vector 和数组类似，它由标准库提供</li><li>Vector 的长度可以改变</li><li>如果你不确定应该用数组还是 Vector，那么你应该使用 Vector</li></ul><h5 id="数组类型声明" tabindex="-1"><a class="header-anchor" href="#数组类型声明" aria-hidden="true">#</a> 数组类型声明</h5><p>数组类型以这种形式表示：<code>[类型； 长度]</code></p><p><code>let a: [i32; 5] = [1, 2, 3, 4, 5];</code></p><p>如果数组中每个元素都相同，那么可以这样简写：</p><p><code>let a = [3; 5];</code></p><p>它相当于</p><p><code>let a = [3, 3, 3, 3, 3];</code></p><h5 id="元素访问" tabindex="-1"><a class="header-anchor" href="#元素访问" aria-hidden="true">#</a> 元素访问</h5><p>数组是 Stack 上分配的单个块内存</p><p>可以使用索引<code>arr[0]</code>来访问数组元素</p><p>如果访问索引超出数组范围，即下标越界，那么</p><ul><li>编译时会报错</li><li>运行时会报错（runtime 时会 panic），Rust 不会允许其继续访问相应地址的内存</li></ul><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h4><ul><li>String 比那些基础标量数据类型更复杂</li><li>字符串字面值：程序里手写的那些字符串值，它们是不可变的</li><li>Rust还有第二种字符串类型：String <ul><li>在heap上分配，能够存储在编译时位置数量的复合文本类型</li></ul></li></ul><p>创建方法：</p><ol><li>使用from函数</li></ol><p><code>let s = String::from(&quot;hello&quot;);</code></p><p>这类字符串是可以被修改的，是真正的String类型</p><ol start="2"><li>直接输入字面值</li></ol><p><code>let s = &quot;hello&quot;;</code></p><p>这类字符串是不可被修改的，也称为<code>&amp;str</code>字符串切片类型</p><p><strong>原因</strong></p><ul><li>字符串字面值，在编译时就知道它的内容了，其文本内容会被直接硬编码到最终的可执行文件里。 <ul><li>特点：不可变性，速度快、高效。</li><li>通常存储在编译时分配的静态存储区域，也称为常量区或静态区。这个区域通常位于程序的可执行文件中，并在程序加载时被加载到内存中。</li></ul></li><li>String类型，为了支持可变性，需要在heap上分配内存来保存编译时未知的文本内容： <ul><li>操作系统必须在运行时请求内存，这步通过调用<code>String::from</code>来实现</li></ul></li></ul>`,85),d=s(`<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><ul><li>声明函数使用 fn 关键字</li><li>依照惯例，针对函数和变量名，Rust 使用 snake case 命名规范：所有字母小写，单词之间使用下划分分开</li></ul><h3 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h3><p>函数签名里，必须声明每个参数的类型</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">another_function</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// argument 实参</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">another_function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// parameter 形参</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="语句与表达式" tabindex="-1"><a class="header-anchor" href="#语句与表达式" aria-hidden="true">#</a> 语句与表达式</h3><ul><li>函数体由一系列语句组成，可选的由一个表达式结束</li><li>Rust 是基于表达式的语言</li><li>语句是执行一些动作的指令</li><li>表达式会计算产生一个值</li><li>函数的定义也是语句</li><li>语句的返回值是空元组类型，也就是<code>()</code></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    x <span class="token operator">+</span> <span class="token number">3</span> <span class="token comment">// 注意这一行是表达式，返回值是4，不能加分号；如果加了分号就变成了语句，返回()</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of y is {}&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数返回值" tabindex="-1"><a class="header-anchor" href="#函数返回值" aria-hidden="true">#</a> 函数返回值</h3><ul><li>在<code>-&gt;</code>符号后边声明函数返回值的类型，但是不可以为返回值命名</li><li>在 Rust 里面，返回值就是函数体里面最后一个表达式的值</li><li>若想提前返回，需使用 return 关键字，并指定一个值</li><li>大多数函数都默认使用最后一个表达式作为返回值</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">five</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
  <span class="token number">5</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">five</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控制流" tabindex="-1"><a class="header-anchor" href="#控制流" aria-hidden="true">#</a> 控制流</h2><h3 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> if</h3><p>if 语句允许您根据条件来执行不同的代码分支</p><ul><li>这个条件必须是 bool 类型</li><li>与条件相关联的代码块叫做分支（arm）</li><li>同样支持 else 语句</li></ul><h3 id="let-if" tabindex="-1"><a class="header-anchor" href="#let-if" aria-hidden="true">#</a> let+if</h3><p>因为 if 是一个表达式，所以可以将它放在 let 语句中等号的右边（替换三元运算符）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> condition <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token keyword">if</span> condition <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of number is {}&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loop-循环" tabindex="-1"><a class="header-anchor" href="#loop-循环" aria-hidden="true">#</a> loop 循环</h3><p>loop 关键字将反复执行一块代码，直到停止（break）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">{</span>
      <span class="token comment">// break跟返回值，result等于20</span>
      <span class="token keyword">break</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The result is {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环" aria-hidden="true">#</a> while 循环</h3><p>另外一种常见的循环模式是每次执行循环体之前都判断一次条件</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}!&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>

    number <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;LIFTOFF!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环" aria-hidden="true">#</a> for 循环</h3><ul><li>使用 while 或 loop 来遍历集合，易错且低效</li><li>使用 for 更简洁紧凑，它可以针对集合中每个元素来执行一些代码</li><li>由于 for 循环的安全、简洁性，它在 Rust 里使用最多</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> element <span class="token keyword">in</span> a<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the value is {}&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> Range</h3><ul><li>标准库提供</li><li>指定一个开始数字和一个结束数字，Range 可以生成它们之间的数字（不含结束）</li><li>rev 方法可以反转 Range</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 左闭右开</span>
  <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}!&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function k(v,m){const a=e("RouterLink");return p(),i("div",null,[r,l("p",null,[n("更详细的内容见："),o(a,{to:"/rust/6-collection.html#string"},{default:c(()=>[n("集合：String")]),_:1})]),d])}const h=t(u,[["render",k],["__file","1-common.html.vue"]]);export{h as default};
