const t=JSON.parse('{"key":"v-1f7bbd48","path":"/design/2-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html","title":"创建型模式","lang":"zh-CN","frontmatter":{"title":"创建型模式","order":2,"category":[],"tag":["单例模式","原型模式","工厂模式","抽象工厂模式"],"description":"顾名思义，这些都是用来创建实例对象的模式 单例模式 单例模式，指的就是创建的总是同一个实例，也就是使用类创建的实例始终是相同的。实现单例模式需要注意两点： 1. 需要使用 return，手动控制创建的对象 2. 使用闭包，保证每次 return 的是同一个对象 原型模式 创建一个共享的原型，并通过拷贝这些原型创建新的对象 最简单的原型创建是使用Obje...","head":[["meta",{"property":"og:url","content":"http://localhost:8080/frontend-service-station/design/2-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"前端加油站"}],["meta",{"property":"og:title","content":"创建型模式"}],["meta",{"property":"og:description","content":"顾名思义，这些都是用来创建实例对象的模式 单例模式 单例模式，指的就是创建的总是同一个实例，也就是使用类创建的实例始终是相同的。实现单例模式需要注意两点： 1. 需要使用 return，手动控制创建的对象 2. 使用闭包，保证每次 return 的是同一个对象 原型模式 创建一个共享的原型，并通过拷贝这些原型创建新的对象 最简单的原型创建是使用Obje..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-02-18T16:34:37.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"单例模式"}],["meta",{"property":"article:tag","content":"原型模式"}],["meta",{"property":"article:tag","content":"工厂模式"}],["meta",{"property":"article:tag","content":"抽象工厂模式"}],["meta",{"property":"article:modified_time","content":"2023-02-18T16:34:37.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":2,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]},{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":2,"title":"抽象工厂模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]}],"git":{"createdTime":1676738077000,"updatedTime":1676738077000,"contributors":[{"name":"yuzhihang","email":"misaka10032@aliyun.com","commits":1}]},"readingTime":{"minutes":5.29,"words":1587},"autoDesc":true,"filePathRelative":"design/2-创建型模式.md","localizedDate":"2023年2月18日"}');export{t as data};
