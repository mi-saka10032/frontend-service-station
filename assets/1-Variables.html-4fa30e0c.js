import{_ as a,Y as n,Z as s,a1 as e}from"./framework-bb209140.js";const t={},p=e(`<h2 id="变量类型关键字" tabindex="-1"><a class="header-anchor" href="#变量类型关键字" aria-hidden="true">#</a> 变量类型关键字</h2><h3 id="var" tabindex="-1"><a class="header-anchor" href="#var" aria-hidden="true">#</a> var</h3><p>在使用变量之前必须先声明变量。Dart 使用 <code>var</code> 关键字来标识一个变量。声明变量的语法如下所示</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Tom&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><code>var</code>标记的变量会在赋予初始值之后确定类型，上面的 name 就会明确为 String 类型。</li><li>Dart 中的所有变量都存储对值的引用，而不是包含该值。name 变量包含对 String 对象的引用，其值为<code>Tom</code>。</li><li>Dart 通过在变量名前加上数据类型前缀来支持类型检查。类型检查确保变量仅包含特定于数据类型的数据。下面给出了相同的语法。</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Object</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Maxsu&#39;</span></span><span class="token punctuation">;</span>
int number <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例会警告，因为分配给变量的值与变量的数据类型不匹配</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Warning: A value of <span class="token builtin class-name">type</span> <span class="token string">&#39;String&#39;</span> cannot be assigned to a variable of <span class="token builtin class-name">type</span> <span class="token string">&#39;int&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dynamic" tabindex="-1"><a class="header-anchor" href="#dynamic" aria-hidden="true">#</a> dynamic</h3><p><code>dynamic</code> 是用来声明动态类型的变量。这意味着变量的类型可以在运行时动态地改变。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">dynamic</span> value <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Tom&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// value 的类型为 String</span>
value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 现在 value 的类型为 int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Tom&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// 推断出 name 的类型为 String</span>
<span class="token keyword">dynamic</span> name1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Tom&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// 推断出 name1 的动态类型为 String</span>
<span class="token class-name">String</span> name2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Tom&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// 显式声明 name2 的类型为 String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，var 和 dynamic 的行为是相同的。但是，使用 var 时，变量的类型会被推断出来，并且不能再改变；而使用 dynamic 时，变量的类型可以在运行时动态地改变。</p><h2 id="空值安全" tabindex="-1"><a class="header-anchor" href="#空值安全" aria-hidden="true">#</a> 空值安全</h2><p>Dart 的空值安全有三个特点：</p><p>1.使用?添加在类型声明末尾表示该变量允许为 null；dynamic 关键字也可做到这点</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span><span class="token operator">?</span> name<span class="token punctuation">;</span>  <span class="token comment">// Nullable type. Can be \`null\` or string.</span>

<span class="token keyword">dynamic</span> name<span class="token punctuation">;</span>  <span class="token comment">// Nullable type. dynamic type or \`null\`.</span>

<span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">// Non-nullable type. Cannot be \`null\` but can be string.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.使用变量之前必须进行初始化</p><p>3.无法访问具有可为 null 类型的表达式的属性或调用方法。例外，null 支持<code>hashCode</code>、<code>toString()</code>这些 Object 顶层方法。</p><h2 id="常量类型关键字" tabindex="-1"><a class="header-anchor" href="#常量类型关键字" aria-hidden="true">#</a> 常量类型关键字</h2><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final" aria-hidden="true">#</a> final</h3><p>final 是运行时常量。final 声明的 object 栈不可被修改，但是可以理解为堆的内容可修改</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Tom&#39;</span></span><span class="token punctuation">;</span>
name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Jerry&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// Error: Can&#39;t assign to the final variable &#39;name&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// √</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> const</h3><p>const 是编译时常量。const 声明的 object 栈和堆均不可被修改</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Tom&#39;</span></span><span class="token punctuation">;</span>
name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Jerry&#39;</span></span><span class="token punctuation">;</span> <span class="token comment">// Error: Can&#39;t assign to the final variable &#39;name&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// Unhandled exception: Unsupported operation: Cannot modify an unmodifiable list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="late关键字" tabindex="-1"><a class="header-anchor" href="#late关键字" aria-hidden="true">#</a> <code>late</code>关键字</h2><p>late 关键字修饰的变量有两个特点：</p><ol><li>声明变量不允许为 null，但是初始化时可以不赋初值。</li><li>可以在运行时调用变量赋值。</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>late <span class="token class-name">String</span> description<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Feijoada!&#39;</span></span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>late 的主要作用是避免无用变量初始化带来的额外开销。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// This is the program&#39;s only call to readThermometer().</span>
late <span class="token class-name">String</span> temperature <span class="token operator">=</span> <span class="token function">readThermometer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Lazily initialized.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,36),l=[p];function i(c,o){return n(),s("div",null,l)}const d=a(t,[["render",i],["__file","1-Variables.html.vue"]]);export{d as default};
