import{_ as n,Y as s,Z as a,a1 as p}from"./framework-bb209140.js";const t={},e=p(`<p>使用 Rust 实现了类似浏览器的下载功能：根据可下载 URL 链接，执行流式下载保存到本地 .tmp 临时文件，下载完成后更新为完整文件。</p><p>用 3 种方法分别进行了实现。</p><h2 id="版本与依赖" tabindex="-1"><a class="header-anchor" href="#版本与依赖" aria-hidden="true">#</a> 版本与依赖</h2><p>rust 版本：rustc 1.80.0 (051478957 2024-07-21)</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">reqwest</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.11&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stream&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>  <span class="token comment"># 必须启用 stream 特性</span>
<span class="token key property">bytes</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.3.0&quot;</span>                   <span class="token comment"># 新增 bytes 依赖</span>
<span class="token key property">tokio</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span> <span class="token key property">features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;full&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rt-multi-thread&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token key property">futures-util</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.3.28&quot;</span>
<span class="token key property">humansize</span> <span class="token punctuation">=</span> <span class="token string">&quot;2.1.3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方案-1-普通流式下载" tabindex="-1"><a class="header-anchor" href="#方案-1-普通流式下载" aria-hidden="true">#</a> 方案 1:普通流式下载</h2><p>这是最简单最直接的方案，通过字节流持续写入临时文件，字节流响应完成后将临时文件更名为最终文件。</p><h3 id="实现代码" tabindex="-1"><a class="header-anchor" href="#实现代码" aria-hidden="true">#</a> 实现代码</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">futures_util<span class="token punctuation">::</span></span><span class="token class-name">StreamExt</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Arc</span><span class="token punctuation">,</span> <span class="token class-name">Mutex</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">AsyncWriteExt</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">URL</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;https://autopatchcn.yuanshen.com/client_app/update/hk4e_cn/audio_zh-cn_5.3.0_5.4.0_hdiff_KVKBwMMBdSYZfIUS.zip&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">FINAL_FILE</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;audio_zh-cn_5.3.0_5.4.0_hdiff_KVKBwMMBdSYZfIUS.zip&quot;</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[tokio::main]</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 共享下载进度计数器</span>
    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0u64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> temp_file <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">FINAL_FILE</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.tmp&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 启动进度显示任务</span>
    <span class="token keyword">let</span> progress_counter <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> progress_task <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> interval <span class="token operator">=</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">loop</span> <span class="token punctuation">{</span>
            interval<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> downloaded <span class="token operator">=</span> <span class="token operator">*</span>progress_counter<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span>
                <span class="token string">&quot;已下载: {}&quot;</span><span class="token punctuation">,</span>
                <span class="token namespace">humansize<span class="token punctuation">::</span></span><span class="token function">format_size</span><span class="token punctuation">(</span>downloaded<span class="token punctuation">,</span> <span class="token namespace">humansize<span class="token punctuation">::</span></span><span class="token constant">DECIMAL</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建 HTTP 客户端</span>
    <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建临时文件</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>temp_file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// 重点：流式下载</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bytes_stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> chunk <span class="token operator">=</span> chunk<span class="token operator">?</span><span class="token punctuation">;</span>
        file<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chunk<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

        <span class="token comment">// 更新下载计数器</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> counter <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>counter <span class="token operator">+=</span> chunk<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 关闭文件确保所有内容写入磁盘</span>
    file<span class="token punctuation">.</span><span class="token function">sync_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// 重命名文件</span>
    <span class="token namespace">tokio<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token function">rename</span><span class="token punctuation">(</span>temp_file<span class="token punctuation">,</span> <span class="token constant">FINAL_FILE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    progress_task<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;下载完成！总耗时:{:.2}s&quot;</span><span class="token punctuation">,</span> timer<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs_f64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方案-2-流式下载-分块写入" tabindex="-1"><a class="header-anchor" href="#方案-2-流式下载-分块写入" aria-hidden="true">#</a> 方案 2:流式下载+分块写入</h2><p>在流式下载方案的基础上增加了一个缓冲线程，当缓存的字节流达到一定体积时再执行写入，直到最后下载完成将剩余的字节流写入。相较于传统方案，降低了磁盘文件的写入频率，对机械硬盘更加友好，而固态硬盘的 IO 效率提升则不会太明显。</p><p>整体功能进一步解耦，分为四线程执行任务：网络下载任务、缓冲处理任务、文件写入任务、进度显示任务，因此引入两条 Channel 用于线程间通信</p><h3 id="方案流程" tabindex="-1"><a class="header-anchor" href="#方案流程" aria-hidden="true">#</a> 方案流程</h3><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code># 简易版时序
[网络流] --&gt; buffer_task --(分块)--&gt; write_task --&gt; 文件
       ↑                    |
       |                    |
       +--[控制信号]---------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code># 完整版
┌──────────────────────────────┐
│          网络下载任务           │
│      (network_task)          │
└──────────────┬───────────────┘
               │ 通过network_tx通道
               ▼ 发送Bytes类型数据块
┌──────────────────────────────┐
│          缓冲处理任务           │
│       (buffer_task)          │
├──────────────────────────────┤
│ 1. 接收网络数据块              │
│ 2. 累积到BytesMut缓冲区        │
│ 3. 当达到CHUNK_SIZE(16MB)时    │
│    执行split_to().freeze()    │
│ 4. 通过buffer_tx发送压缩数据块  │
│ 5. 发送剩余数据(buffer.into()) │
└──────────────┬───────────────┘
               │ 通过buffer_tx通道
               ▼ 发送冻结后的Bytes数据
┌──────────────────────────────┐
│          文件写入任务           │
│       (write_task)           │
├──────────────────────────────┤
│ 1. 持续接收数据块写入临时文件     │
│ 2. 执行fsync确保数据落盘         │
│ 3. 原子重命名为最终文件          │
└──────────────┬───────────────┘
               │ 触发最终校验
               ▼
┌──────────────────────────────┐
│         文件校验逻辑           │
│ 比对下载大小与文件实际大小       │
└──────────────────────────────┘

┌──────────────────────────────┐
│        进度显示任务            │
│     (progress_task)          │
├──────────────────────────────┤
│ 定时读取原子变量：              │
│  - total_size (总大小)         │
│  - downloaded (已下载量)       │
│ 计算下载速度和百分比            │
└──────────────────────────────┘

数据共享关系：
      ▲           ▲
      │           │
      └───┬───┬───┘
          │   │
  ┌───────▼───▼───────┐
  │  原子变量共享区     │
  │ - total_size      │
  │ - downloaded      │
  └───────────────────┘
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现代码-1" tabindex="-1"><a class="header-anchor" href="#实现代码-1" aria-hidden="true">#</a> 实现代码</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">bytes<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Bytes</span><span class="token punctuation">,</span> <span class="token class-name">BytesMut</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">futures_util<span class="token punctuation">::</span></span><span class="token class-name">StreamExt</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">,</span>
    <span class="token namespace">sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
        <span class="token namespace">atomic<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">AtomicU64</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Arc</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">AsyncWriteExt</span><span class="token punctuation">,</span>
    <span class="token namespace">sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">,</span>
    <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token punctuation">{</span>interval<span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 定义统一错误类型</span>
<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Reqwest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Channel</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">SendError</span><span class="token operator">&lt;</span><span class="token class-name">Bytes</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Join</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token class-name">JoinError</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现From trait</span>
<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Reqwest</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">SendError</span><span class="token operator">&lt;</span><span class="token class-name">Bytes</span><span class="token operator">&gt;&gt;</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">SendError</span><span class="token operator">&lt;</span><span class="token class-name">Bytes</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Channel</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token class-name">JoinError</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token class-name">JoinError</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Join</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span>
        <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;IO错误: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Reqwest</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;网络错误: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Channel</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;通道错误: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Join</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;任务错误: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 常量定义</span>
<span class="token keyword">const</span> <span class="token constant">URL</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;https://autopatchcn.yuanshen.com/client_app/update/hk4e_cn/audio_zh-cn_5.3.0_5.4.0_hdiff_KVKBwMMBdSYZfIUS.zip&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">FINAL_FILE</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;audio_zh-cn_5.3.0_5.4.0_hdiff_KVKBwMMBdSYZfIUS.zip&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">CHUNK_SIZE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

<span class="token comment">/// 跨平台原子重命名</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">atomic_rename</span><span class="token punctuation">(</span>temp<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> final_path<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[cfg(target_os = <span class="token string">&quot;windows&quot;</span>)]</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">try_exists</span><span class="token punctuation">(</span>final_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span> <span class="token punctuation">{</span>
            <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">remove_file</span><span class="token punctuation">(</span>final_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">rename</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> final_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[tokio::main]</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp_file <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">FINAL_FILE</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.tmp&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 清理旧临时文件</span>
    <span class="token keyword">if</span> <span class="token class-name">Path</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>temp_file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">remove_file</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>temp_file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 初始化文件系统</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>temp_file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建网络线程与缓冲线程通道</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>network_tx<span class="token punctuation">,</span> <span class="token keyword">mut</span> network_rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Bytes</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建缓冲线程与写入线程通道</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>buffer_tx<span class="token punctuation">,</span> <span class="token keyword">mut</span> buffer_rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Bytes</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 进度监控</span>
    <span class="token keyword">let</span> total_size <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AtomicU64</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> downloaded <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AtomicU64</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> start_time <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 网络任务（增加显式关闭）</span>
    <span class="token keyword">let</span> network_task<span class="token punctuation">:</span> <span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token class-name">JoinHandle</span><span class="token operator">&lt;</span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> total_size <span class="token operator">=</span> total_size<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

            <span class="token comment">// 更新文件总大小计数</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">content_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                total_size<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">let</span> <span class="token keyword">mut</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bytes_stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> chunk <span class="token operator">=</span> chunk<span class="token operator">?</span><span class="token punctuation">;</span>
                network_tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 字节流响应完成后 显式关闭网络通道</span>
            <span class="token function">drop</span><span class="token punctuation">(</span>network_tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;1.网络下载任务完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Ok</span><span class="token punctuation">::</span><span class="token operator">&lt;</span>_<span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 缓冲任务（优化退出逻辑）</span>
    <span class="token keyword">let</span> buffer_task <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> downloaded <span class="token operator">=</span> downloaded<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token class-name">BytesMut</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span><span class="token constant">CHUNK_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 明确退出条件：下载任务完成 网络通道关闭recv接收 退出循环</span>
            <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span> network_rx<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
                <span class="token comment">// 追加新chunk数据到buffer</span>
                buffer<span class="token punctuation">.</span><span class="token function">extend_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 计算已下载chunk总体积</span>
                downloaded<span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 缓冲区数据量达到分块大小时发送数据块</span>
                <span class="token keyword">let</span> cur_len <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> cur_len <span class="token operator">&gt;=</span> <span class="token constant">CHUNK_SIZE</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> data <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">split_to</span><span class="token punctuation">(</span>cur_len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    buffer_tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 发送剩余数据</span>
            <span class="token keyword">if</span> <span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                buffer_tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 关闭缓冲通道</span>
            <span class="token function">drop</span><span class="token punctuation">(</span>buffer_tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;2.缓冲处理任务完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Ok</span><span class="token punctuation">::</span><span class="token operator">&lt;</span>_<span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 写入任务（确保后续执行）</span>
    <span class="token keyword">let</span> write_task <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
        <span class="token comment">// 直到缓冲通道关闭前，持续接收数据流写入文件</span>
        <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span> buffer_rx<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
            file<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        file<span class="token punctuation">.</span><span class="token function">sync_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token function">drop</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 正式重命名文件</span>
        <span class="token function">atomic_rename</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>temp_file<span class="token punctuation">,</span> <span class="token constant">FINAL_FILE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;3.文件写入任务完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Ok</span><span class="token punctuation">::</span><span class="token operator">&lt;</span>_<span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 进度显示任务</span>
    <span class="token keyword">let</span> progress_task <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> total_size <span class="token operator">=</span> total_size<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> downloaded <span class="token operator">=</span> downloaded<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> start_time <span class="token operator">=</span> start_time<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> interval <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">loop</span> <span class="token punctuation">{</span>
                interval<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>

                <span class="token keyword">let</span> downloaded <span class="token operator">=</span> downloaded<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> total <span class="token operator">=</span> total_size<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> total <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;下载中: 等待服务器响应...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">let</span> percent <span class="token operator">=</span> <span class="token punctuation">(</span>downloaded <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> total <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100.0</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> speed <span class="token operator">=</span> downloaded <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> start_time<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs_f64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024.0</span><span class="token punctuation">;</span>

                <span class="token macro property">println!</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;进度: {:.2}% | 速度: {:.2} KB/s | 已下载: {}/{}&quot;</span><span class="token punctuation">,</span>
                    percent<span class="token punctuation">,</span>
                    speed<span class="token punctuation">,</span>
                    <span class="token namespace">humansize<span class="token punctuation">::</span></span><span class="token function">format_size</span><span class="token punctuation">(</span>downloaded<span class="token punctuation">,</span> <span class="token namespace">humansize<span class="token punctuation">::</span></span><span class="token constant">BINARY</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token namespace">humansize<span class="token punctuation">::</span></span><span class="token function">format_size</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> <span class="token namespace">humansize<span class="token punctuation">::</span></span><span class="token constant">BINARY</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 退出条件 下载体积 &gt;= 总体积</span>
                <span class="token keyword">if</span> downloaded <span class="token operator">&gt;=</span> total <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;extra.进度显示任务完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 任务等待顺序调整</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>net_thread<span class="token punctuation">,</span> buffer_thread<span class="token punctuation">,</span> write_thread<span class="token punctuation">,</span> progress_thread<span class="token punctuation">)</span> <span class="token operator">=</span>
        <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token macro property">join!</span><span class="token punctuation">(</span>network_task<span class="token punctuation">,</span> buffer_task<span class="token punctuation">,</span> write_task<span class="token punctuation">,</span> progress_task<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 按依赖顺序处理错误</span>
    net_thread<span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">// 先处理网络错误</span>
    buffer_thread<span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">// 再处理缓冲错误</span>
    write_thread<span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">// 最后处理写入错误</span>
    progress_thread<span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// 最终校验</span>
    <span class="token keyword">let</span> final_size <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token constant">FINAL_FILE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> final_size <span class="token operator">!=</span> total_size<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>
            <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">InvalidData</span><span class="token punctuation">,</span>
            <span class="token macro property">format!</span><span class="token punctuation">(</span>
                <span class="token string">&quot;文件大小不匹配: 预期 {}，实际 {}&quot;</span><span class="token punctuation">,</span>
                total_size<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                final_size
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;下载完成，文件已安全保存为: {}&quot;</span><span class="token punctuation">,</span> <span class="token constant">FINAL_FILE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;总耗时:{:.2}s&quot;</span><span class="token punctuation">,</span> timer<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs_f64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方案-3-多线程分块流式下载" tabindex="-1"><a class="header-anchor" href="#方案-3-多线程分块流式下载" aria-hidden="true">#</a> 方案 3:多线程分块流式下载</h2><p>方案 3 的实现强依赖于目标下载链接的服务器响应头是否支持分块下载，也就是 <code>Response.Header</code> 需要开启 <code>Accept-Ranges: Bytes</code> 支持</p><h3 id="方案流程-1" tabindex="-1"><a class="header-anchor" href="#方案流程-1" aria-hidden="true">#</a> 方案流程</h3><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>┌───────────────────┐        ┌───────────────────┐        ┌───────────────────┐
│  分块下载任务       │        │  缓冲排序任务      │        │  文件写入任务      │
│ (download_task)  │        │  (buffer_task)   │        │  (write_task)    │
└───────┬───────────┘        └───────┬───────────┘        └───────┬───────────┘
        │ 发送 (offset, Bytes)       │ 发送排序后的 (offset, Bytes) │
        │ 通过 dl_tx 通道 (容量32)    │ 通过 writer_tx 通道 (容量32) │
        ▼                            ▼                            ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                               通道数据流示意图                                │
├─────────────────────────────────────────────────────────────────────────────┤
│ 下载任务1 → (0-16MB, data1) → dl_tx → buffer_task → 排序 → writer_tx → 写入   │
│ 下载任务2 → (16-32MB, data2) → │       │ BTreeMap 维护顺序      │ 按offset写入 │
│ ...                          │       │ next_expected 控制     │             │
│ 下载任务8 → (112-128MB, data8) → │       └───────────────────────┘             │
└─────────────────────────────────────────────────────────────────────────────┘

┌───────────────────┐
│  进度监控任务      │
│ (progress_task)  │
└───────┬───────────┘
        │ 读取原子变量
        ▼
┌───────────────────┐
│  原子变量共享区    │
│  downloaded       │
└───────────────────┘

文件处理流程：
1. 预分配文件空间 (set_len)
2. 多线程分块下载 (8个并行任务)
3. 缓冲层排序重组数据块
4. 按offset顺序写入磁盘
5. 最终原子重命名文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现代码-2" tabindex="-1"><a class="header-anchor" href="#实现代码-2" aria-hidden="true">#</a> 实现代码</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">bytes<span class="token punctuation">::</span></span><span class="token class-name">Bytes</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">futures_util<span class="token punctuation">::</span></span><span class="token class-name">StreamExt</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Client</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">collections<span class="token punctuation">::</span></span><span class="token class-name">BTreeMap</span><span class="token punctuation">,</span>
    <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">SeekFrom</span><span class="token punctuation">,</span>
    <span class="token namespace">sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
        <span class="token namespace">atomic<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">AtomicU64</span><span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">Arc</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Duration</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token punctuation">{</span>
    <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">,</span>
    <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">AsyncSeekExt</span><span class="token punctuation">,</span> <span class="token class-name">AsyncWriteExt</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token namespace">sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">,</span>
    time<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 定义统一错误类型</span>
<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token class-name">Io</span><span class="token punctuation">(</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Reqwest</span><span class="token punctuation">(</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Channel</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">SendError</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 统一使用元组类型</span>
    <span class="token class-name">Join</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token class-name">JoinError</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现From trait</span>
<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token namespace">reqwest<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Reqwest</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">SendError</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> <span class="token namespace">tokio<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>mpsc<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">SendError</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Channel</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token class-name">JoinError</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>err<span class="token punctuation">:</span> <span class="token namespace">tokio<span class="token punctuation">::</span>task<span class="token punctuation">::</span></span><span class="token class-name">JoinError</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Join</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span>
        <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>
            <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;IO错误: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Reqwest</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;网络错误: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Channel</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;通道错误: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">AppError</span><span class="token punctuation">::</span><span class="token class-name">Join</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;任务错误: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span> <span class="token keyword">for</span> <span class="token class-name">AppError</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 进度监控结构</span>
<span class="token attribute attr-name">#[derive(Clone)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">ProgressMonitor</span> <span class="token punctuation">{</span>
    total<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
    downloaded<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">AtomicU64</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">ProgressMonitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>total<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token keyword">Self</span> <span class="token punctuation">{</span>
            total<span class="token punctuation">,</span>
            downloaded<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">AtomicU64</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">get_progress</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>downloaded<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">;</span>
        d <span class="token operator">/</span> <span class="token keyword">self</span><span class="token punctuation">.</span>total <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">*</span> <span class="token number">100.0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 分块下载核心逻辑</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">download_task</span><span class="token punctuation">(</span>
    url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    range<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    sender<span class="token punctuation">:</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    progress<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">AtomicU64</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> response <span class="token operator">=</span> client
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>url<span class="token punctuation">)</span>
        <span class="token comment">// 指定分块下载的起点和终点字节位</span>
        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Range&quot;</span><span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;bytes={}-{}&quot;</span><span class="token punctuation">,</span> range<span class="token number">.0</span><span class="token punctuation">,</span> range<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> current <span class="token operator">=</span> range<span class="token number">.0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> stream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bytes_stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> chunk <span class="token operator">=</span> chunk<span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> len <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>

        <span class="token comment">// 发送 起点位置 和 数据块 到缓冲通道</span>
        sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> chunk<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

        <span class="token comment">// 更新 全局进度 和 起点位置</span>
        progress<span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Relaxed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        current <span class="token operator">+=</span> len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Download task completed normally&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">drop</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 缓冲排序处理器</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">buffer_task</span><span class="token punctuation">(</span>
    <span class="token keyword">mut</span> receiver<span class="token punctuation">:</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token class-name">Receiver</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    writer_tx<span class="token punctuation">:</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 构建基于 写入位置 和 写入数据块 的 BTreeMap</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> buffer <span class="token operator">=</span> <span class="token class-name">BTreeMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从0开始声明写入offset</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> next_expected <span class="token operator">=</span> <span class="token number">0u64</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> receiver<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
        buffer<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">loop</span> <span class="token punctuation">{</span>
            <span class="token comment">// 迭代获取 BufferMap 的key值</span>
            <span class="token keyword">let</span> first_key <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cloned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 持续循环迭代直到key值与当前写入offset相同，方才发送可写入数据块。为的是确保文件写入的连贯性</span>
            <span class="token keyword">match</span> first_key <span class="token punctuation">{</span>
                <span class="token class-name">Some</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">if</span> key <span class="token operator">==</span> next_expected <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> data_len <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>
                    <span class="token keyword">let</span> data <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// 错误处理改进点</span>
                    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> writer_tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
                        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">&quot;Writer channel closed unexpectedly: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 通道关闭时直接返回</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// 写入offset增加相应数据块的长度</span>
                    next_expected <span class="token operator">+=</span> data_len<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">break</span><span class="token punctuation">,</span>
                <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token keyword">break</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 正常关闭通道</span>
    <span class="token function">drop</span><span class="token punctuation">(</span>writer_tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Buffer task completed normally&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 文件写入任务</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">write_task</span><span class="token punctuation">(</span>
    <span class="token keyword">mut</span> receiver<span class="token punctuation">:</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token class-name">Receiver</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">,</span> <span class="token class-name">Bytes</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">mut</span> file<span class="token punctuation">:</span> <span class="token class-name">File</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> receiver<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用带偏移量的写入</span>
        file<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token class-name">SeekFrom</span><span class="token punctuation">::</span><span class="token class-name">Start</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
        <span class="token comment">// 写入最新数据块</span>
        file<span class="token punctuation">.</span><span class="token function">write_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 确保所有数据落盘</span>
    file<span class="token punctuation">.</span><span class="token function">sync_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Write task completed normally&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 进度显示任务</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">progress_task</span><span class="token punctuation">(</span>monitor<span class="token punctuation">:</span> <span class="token class-name">ProgressMonitor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> interval <span class="token operator">=</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        interval<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> progress <span class="token operator">=</span> monitor<span class="token punctuation">.</span><span class="token function">get_progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span>
            <span class="token string">&quot;\\rDownload Progress: {:.2}% [{}]&quot;</span><span class="token punctuation">,</span>
            progress<span class="token punctuation">,</span>
            <span class="token string">&quot;#&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">(</span>progress <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">CHUNK_CORE</span><span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">URL</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;https://autopatchcn.yuanshen.com/client_app/update/hk4e_cn/audio_zh-cn_5.3.0_5.4.0_hdiff_KVKBwMMBdSYZfIUS.zip&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">TEMP_FILE</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;audio_zh-cn_5.3.0_5.4.0_hdiff_KVKBwMMBdSYZfIUS.zip.tmp&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">FINAL_FILE</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;audio_zh-cn_5.3.0_5.4.0_hdiff_KVKBwMMBdSYZfIUS.zip&quot;</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[tokio::main]</span>
<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> time_count <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> save_path <span class="token operator">=</span> <span class="token constant">TEMP_FILE</span><span class="token punctuation">;</span>

    <span class="token comment">// 1. 获取文件元数据</span>
    <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">Client</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> head_resp <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> content_length <span class="token operator">=</span> head_resp
        <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;content-length&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>v<span class="token closure-punctuation punctuation">|</span></span> v<span class="token punctuation">.</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>v<span class="token closure-punctuation punctuation">|</span></span> v<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 创建文件并预分配空间</span>
    <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span>save_path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    file<span class="token punctuation">.</span><span class="token function">set_len</span><span class="token punctuation">(</span>content_length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 初始化通道</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>dl_tx<span class="token punctuation">,</span> dl_rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>writer_tx<span class="token punctuation">,</span> writer_rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 启动核心任务</span>
    <span class="token keyword">let</span> monitor <span class="token operator">=</span> <span class="token class-name">ProgressMonitor</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>content_length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 进度显示线程</span>
    <span class="token keyword">let</span> progress_handle <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token function">progress_task</span><span class="token punctuation">(</span>monitor<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 缓冲处理线程</span>
    <span class="token keyword">let</span> buffer_handle <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token function">buffer_task</span><span class="token punctuation">(</span>dl_rx<span class="token punctuation">,</span> writer_tx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 文件写入线程</span>
    <span class="token keyword">let</span> writer_handle <span class="token operator">=</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token function">write_task</span><span class="token punctuation">(</span>writer_rx<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 分块下载线程</span>
    <span class="token keyword">let</span> num_workers <span class="token operator">=</span> <span class="token constant">CHUNK_CORE</span><span class="token punctuation">;</span> <span class="token comment">// 可根据CPU核心数调整</span>
    <span class="token keyword">let</span> chunk_size <span class="token operator">=</span> content_length <span class="token operator">/</span> num_workers <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> handles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 根据线程数和文件体积进行下载任务拆分</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>num_workers <span class="token punctuation">{</span>
        <span class="token keyword">let</span> start <span class="token operator">=</span> i <span class="token keyword">as</span> <span class="token keyword">u64</span> <span class="token operator">*</span> chunk_size<span class="token punctuation">;</span>
        <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">if</span> i <span class="token operator">==</span> num_workers <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">{</span>
            content_length <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            start <span class="token operator">+</span> chunk_size <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token function">download_task</span><span class="token punctuation">(</span>
            url<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">,</span>
            dl_tx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            monitor<span class="token punctuation">.</span>downloaded<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        handles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token namespace">tokio<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 6. 等待所有下载完成</span>
    <span class="token keyword">for</span> handle <span class="token keyword">in</span> handles <span class="token punctuation">{</span>
        handle<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 7. 清理关闭通道</span>
    <span class="token function">drop</span><span class="token punctuation">(</span>dl_tx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buffer_handle<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>
    writer_handle<span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// 8. 停止进度显示</span>
    progress_handle<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 9. 完整文件重命名</span>
    <span class="token namespace">tokio<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>save_path<span class="token punctuation">,</span> <span class="token constant">FINAL_FILE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span>
        <span class="token string">&quot;\\nDownload completed successfully!, timeCount:{:.2}&quot;</span><span class="token punctuation">,</span>
        time_count<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_secs_f64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="潜在问题" tabindex="-1"><a class="header-anchor" href="#潜在问题" aria-hidden="true">#</a> 潜在问题</h3><p>多线程分块下载功能仅提供实现方案，实际上虽然拆分了大文件的下载任务，但下载速度仍然受限于网络带宽，甚至因为开启了多个 TCP 连接，反而会加大下载任务传输不稳定的可能性，使用时需优先考虑网络因素</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>普通流式下载：</p><p>优点</p><ol><li>实现简单：无复杂逻辑，代码量最少</li><li>内存友好：单次处理一个数据块（默认 64KB）</li><li>顺序可靠：无需处理乱序问题</li><li>低资源消耗：单线程运行，无额外通道/任务开销</li></ol><p>缺点</p><ol><li>速度瓶颈：无法利用多核 CPU 和并行网络请求</li><li>无断点续传：中断后需重新下载</li><li>大文件性能差：单线程下载耗时线性增长</li><li>进度不精确：依赖服务器返回的 content-length</li></ol><p>适用场景</p><ul><li>小文件下载（&lt;100MB）</li><li>网络带宽受限环境</li><li>快速原型开发</li><li>对可靠性要求高于速度的场景</li></ul><p>流式分块写入：</p><p>优点</p><ol><li>生产-消费解耦：下载与写入分离</li><li>背压控制：通过通道容量限制内存使用</li><li>适度并行：可利用 tokio 的 work-stealing 调度</li><li>内存可控：固定大小的通道缓冲区</li></ol><p>缺点</p><ol><li>仍为单线程下载：网络层未实现真正并行</li><li>无乱序处理：需严格保持数据顺序</li><li>中断恢复困难：无分块位置记录</li><li>进度计算局限：只能基于已接收字节数</li></ol><p>适用场景</p><ul><li>中等文件下载（100MB-1GB）</li><li>需要控制内存使用的移动端应用</li><li>服务器端中等并发下载需求</li><li>需要基础流量控制的场景</li></ul><p>多线程分块下载：</p><p>优点</p><ol><li>极致速度：充分利用多核 CPU 和网络带宽</li><li>断点续传支持：通过记录分块状态可实现</li><li>精确进度控制：基于原子计数器的全局进度</li><li>大文件优化：分块下载减少单点故障影响</li></ol><p>缺点</p><ol><li>实现复杂度高：需处理分块、排序、同步等问题</li><li>内存消耗大：BTreeMap 缓冲可能积累大量数据</li><li>错误处理复杂：单个分块失败影响整体</li><li>服务器兼容性：需支持 Range 请求</li></ol><p>适用场景</p><ul><li>大文件下载（&gt;1GB）</li><li>高带宽服务器环境</li><li>CDN 分发等支持 Range 请求的场景</li><li>需要实现秒传/续传功能的专业下载工具</li></ul>`,47),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","17-download.html.vue"]]);export{k as default};
