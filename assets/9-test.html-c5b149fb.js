import{_ as e,C as t,Y as p,Z as c,$ as n,a0 as s,a2 as o,a1 as i}from"./framework-bb209140.js";const l={},u=i(`<h2 id="编写和运行测试" tabindex="-1"><a class="header-anchor" href="#编写和运行测试" aria-hidden="true">#</a> 编写和运行测试</h2><h3 id="测试函数" tabindex="-1"><a class="header-anchor" href="#测试函数" aria-hidden="true">#</a> 测试函数</h3><p>验证非测试代码的功能是否和预期一致</p><p>测试函数体（通常）执行的 3 个操作：</p><ol><li>准备数据/状态</li><li>运行被测试的代码</li><li>断言（Assert）结果</li></ol><p>测试函数需要使用 test 属性（attribute）进行标注</p><ul><li>Attribute 就是一段 Rust 代码元数据</li><li>在函数上加<code>#[test]</code>，可以把函数变成测试函数</li></ul><h3 id="运行测试" tabindex="-1"><a class="header-anchor" href="#运行测试" aria-hidden="true">#</a> 运行测试</h3><p>使用<code>cargo test</code>命令运行所有测试函数，Rust 会构建一个 Test Runner 可执行文件。它会运行标注了 test 的函数，并报告其运行是否成功</p><p>当使用 cargo 创建 library 项目的时候，会生成一个 test module，里面有一个 test 函数</p><ul><li>你可以添加任意数量的 test module 或函数</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// src/lib.rs</span>
<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">it_works</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试失败" tabindex="-1"><a class="header-anchor" href="#测试失败" aria-hidden="true">#</a> 测试失败</h3><ul><li>测试函数 panic 就表示失败</li><li>每个测试运行在一个新线程</li><li>当主线程看见某个测试线程挂掉了，那个测试标记为失败</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// src/lib.rs</span>
<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">it_works</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">another</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Make this test fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="断言" tabindex="-1"><a class="header-anchor" href="#断言" aria-hidden="true">#</a> 断言</h2><h3 id="assert" tabindex="-1"><a class="header-anchor" href="#assert" aria-hidden="true">#</a> <code>assert!</code></h3><p><code>assert!</code>宏来自标准库，用来确定某个状态是否为 true</p><ul><li>true：测试通过</li><li>false：调用<code>panic!</code>，测试失败</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">{</span>
  length<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
  width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Rectangle</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>width
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token comment">// 表示使用外部模块的所有内容</span>
  <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">larger_can_hold_smaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> larger <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
      length； <span class="token number">8</span>，
      width<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> smaller <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
      length<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
      width<span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据方法返回的结果状态值来判断程序成功or失败</span>
    <span class="token macro property">assert!</span><span class="token punctuation">(</span>larger<span class="token punctuation">.</span><span class="token function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>smaller<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断言相等性" tabindex="-1"><a class="header-anchor" href="#断言相等性" aria-hidden="true">#</a> 断言相等性</h3><p>使用<code>assert_eq!</code>和<code>assert_ne!</code>测试相等性</p><ul><li>它们都来自标准库</li><li>判断两个参数是否相等或不等</li><li>实际上，它们使用的就是<code>==</code>和<code>!=</code>运算符</li><li>断言失败：自动打印出两个参数的值</li><li>使用条件：因为使用 debug 格式打印参数，因此要求参数实现了 PartialEq 和 Debug Traits（所有的基本类型和标准库里大部分类型都实现了）</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_two</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
  a <span class="token operator">+</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">it_adds_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// assert_ne!(!5, add_two(2));</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义错误信息" tabindex="-1"><a class="header-anchor" href="#自定义错误信息" aria-hidden="true">#</a> 自定义错误信息</h3><p>可以向<code>assert!</code>、<code>assert_eq!</code>、<code>assert_ne!</code>添加可选的自定义消息</p><p>这些自定义消息和失败消息都会打印出来</p><ul><li><code>assert!</code>：第一参数必填，自定义消息作为第二个参数</li><li><code>assert_eq!</code>、<code>assert_ne!</code>：前两个参数必填，自定义消息作为第三个参数</li><li>自定义消息会被传递给<code>format!</code>宏，可以使用<code>{}</code>占位符</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
  <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

  <span class="token keyword">fn</span> <span class="token function-definition function">greeting_contain_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">&quot;Carol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert!</span><span class="token punctuation">(</span>
      result<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Carol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Greeting didn&#39;t contain name, value was &#39;{}&#39;&quot;</span><span class="token punctuation">,</span>
      result
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="恐慌测试" tabindex="-1"><a class="header-anchor" href="#恐慌测试" aria-hidden="true">#</a> 恐慌测试</h2><h3 id="验证错误处理的情况" tabindex="-1"><a class="header-anchor" href="#验证错误处理的情况" aria-hidden="true">#</a> 验证错误处理的情况</h3><p>测试除了验证代码的返回值是否正确，还需要验证代码是否如预期的处理了发生错误的情况</p><p>可验证代码在特定情况下是否发生了 panic</p><p>should_panic 属性（attribute）：</p><ul><li>函数 panic：测试通过</li><li>函数没有 panic：测试失败</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Guess</span> <span class="token punctuation">{</span>
  value<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span>
  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> value <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token punctuation">{</span>
      <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess value must be between 1 and 100, got {}.&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Guess</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token attribute attr-name">#[should_panic]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">greater_than_100</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Guess</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="让should-panic更精确" tabindex="-1"><a class="header-anchor" href="#让should-panic更精确" aria-hidden="true">#</a> 让<code>should_panic</code>更精确</h3><p>为 should_panic 属性添加一个可选的 expected 参数：将检查失败消息中是否包含所指定的文字</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Guess</span> <span class="token punctuation">{</span>
  value<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span>
  <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Guess</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>
      <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess value must be greater than or equal to 1, got {}.&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token punctuation">{</span>
      <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess value must be less than or equal to 100, got {}.&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Guess</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token attribute attr-name">#[should_panic(expected = <span class="token string">&quot;Guess value must be less than or equal to 100&quot;</span>)]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">greater_than_100</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Guess</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="result异常判断" tabindex="-1"><a class="header-anchor" href="#result异常判断" aria-hidden="true">#</a> <code>Result</code>异常判断</h3><p>无需 panic，可使用<code>Result&lt;T,E&gt;</code>作为返回类型编写测试：</p><ul><li>返回 Ok：测试通过</li><li>返回 Err：测试失败</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">it_works</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">{</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;two plus two does not equal four&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：不要在使用<code>Result&lt;T,E&gt;</code>编写的测试上标注<code>#[should_panic]</code></p><h2 id="控制测试运行" tabindex="-1"><a class="header-anchor" href="#控制测试运行" aria-hidden="true">#</a> 控制测试运行</h2><p>改变 cargo test 的行为：添加命令行参数</p><p>默认行为是：</p><ul><li>并行运行</li><li>所有测试</li><li>捕获（不显示）所有输出，使读取与测试结果相关的输出更加容易</li></ul><h3 id="命令行参数" tabindex="-1"><a class="header-anchor" href="#命令行参数" aria-hidden="true">#</a> 命令行参数</h3><ul><li>针对 cargo test 的参数，紧跟在 cargo test 后面</li><li>针对 测试可执行程序：放在<code>--</code>之后</li></ul><p>cargo test --help</p><p>显示 cargo test 后面可写参数</p><p>cargo test -- --help</p><p>显示 cargo test -- 后面可写参数</p><h3 id="并行运行测试" tabindex="-1"><a class="header-anchor" href="#并行运行测试" aria-hidden="true">#</a> 并行运行测试</h3><p>运行多个测试：默认使用多个县城并行运行</p><p>必须确保测试之间：不会互相依赖；不依赖于某个共享状态（环境、工作目录、环境变量等）</p><p><code>--test-threads</code></p><p>不想以并行方式运行测试，或想对线程数进行细粒度控制，可以使用<code>--test-threads</code>，后面跟着线程数量</p><h3 id="显式函数输出" tabindex="-1"><a class="header-anchor" href="#显式函数输出" aria-hidden="true">#</a> 显式函数输出</h3><p>默认情况下，如果测试通过，Rust 的 test 库会捕获所有打印到标准输出的内容</p><p>如果被测试代码中用到了<code>println!</code></p><ul><li>测试通过：不会在终端看到<code>println!</code>打印的内容</li><li>测试失败：会看到<code>println!</code>打印的内容和失败信息</li></ul><p>如果想在成功的测试中看到打印的内容：加上<code>--show-output</code></p><h3 id="按名称运行测试" tabindex="-1"><a class="header-anchor" href="#按名称运行测试" aria-hidden="true">#</a> 按名称运行测试</h3><p>选择运行的测试：将测试的名称（一个 or 多个）作为 cargo test 的参数</p><p>运行单个测试：指定测试名</p><p>运行多个测试：指定测试名的一部分（模块名也可以）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 运行单个测试</span>
<span class="token function">cargo</span> <span class="token builtin class-name">test</span> add_two_and_two
<span class="token comment"># 运行多个测试（名称包含add的fn）</span>
<span class="token function">cargo</span> <span class="token builtin class-name">test</span> <span class="token function">add</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_two</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
  a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">add_two_and_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">add_three_and_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="忽略测试" tabindex="-1"><a class="header-anchor" href="#忽略测试" aria-hidden="true">#</a> 忽略测试</h3><p>属性：ignore</p><p>添加该属性后，测试运行会忽略这个 fn</p><p>如果要指定运行被忽略的测试，需要使用<code>cargo test -- --ignored</code>命令</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_two</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
  a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">add_two_and_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token attribute attr-name">#[ignore]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">add_three_and_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试组织" tabindex="-1"><a class="header-anchor" href="#测试组织" aria-hidden="true">#</a> 测试组织</h2><p>Rust 对测试分类：1. 单元测试；2. 集成测试</p><p>单元测试：</p><ul><li>小而专注</li><li>一次对一个模块进行隔离测试</li><li>可测试 private 接口</li></ul><p>集成测试：</p><ul><li>在库外部。和其它外部代码一样使用你的代码</li><li>只能使用 public 接口</li><li>可能在每个测试中使用到多个模块</li></ul><h3 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h3><p>tests 模块上的<code>#[cfg(test)]</code>标注：</p><ul><li>只有运行 cargo test 才编译和运行代码</li><li>运行 cargo build 会忽略这个标注</li></ul><p>集成测试在不同的目录，它不需要<code>#[cfg(test)]</code>标注</p><p>cfg（configuration）配置：</p><ul><li>告诉 Rust 下面的条目只有在指定的配置选项下才被包含</li><li>配置选项 test：由 Rust 提供，用来编译和运行测试</li><li>只有 cargo test 才会编译代码，包括模块中的 helper 函数和<code>#[test]</code>标注的函数</li></ul><p>Rust 允许测试私有函数</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_two</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
  a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这是私有函数</span>
<span class="token keyword">fn</span> <span class="token function-definition function">internal_adder</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
  a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[cfg(test)]</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">{</span>
  <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>

  <span class="token attribute attr-name">#[test]</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">it_works</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 运行不会报错</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token function">internal_adder</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集成测试" tabindex="-1"><a class="header-anchor" href="#集成测试" aria-hidden="true">#</a> 集成测试</h3><p>Rust 的集成测试完全位于被测试库的外部，目的是：测试被测试库的多个部分是否能正确地一起工作</p><p>集成测试的覆盖率很重要</p><p>运行集成测试，需要创建集成目录：tests</p><p>tests 目录下的每个测试文件都是单独的一个 crate</p><p>再次提醒：</p><ul><li>tests 目录下无需添加<code>#[cfg(test)]</code>标注</li><li>只有 cargo test，才会编译 tests 目录下的文件</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// tests/integration_test.rs</span>
<span class="token comment">// 这是cargo的项目名称</span>
<span class="token keyword">use</span> adder<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[test]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">it_adds_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token namespace">adder<span class="token punctuation">::</span></span><span class="token function">add_two</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行指定的集成测试</p><ul><li>运行一个特定的集成测试：cargo test 函数名</li><li>运行某个测试文件内的所有测试：cargo test --test 文件名</li></ul><p>集成测试中的子模块</p><p>tests 目录下每个文件都被编译成单独的 crate，这些文件不共享行为（与 src 下的文件规则不同）</p><p>如果要在 tests 目录中使用 mod，需要创建一个文件夹来提供文件</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>|--- tests
|--- common
| |-- mod.rs
|---integration_test.rs
|---another_integration_test.rs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对 binary crate 的集成测试</p><p>如果项目是 binary crate，即只含有 src/main.rs 没有 src/lib.rs</p>`,105),d=n("li",null,"不能再 tests 目录下创建集成测试",-1),r={href:"http://main.rs",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,[n("strong",null,"只有 library crate 才能暴露函数给其它 crate 用，binary crate 意味着独立运行")],-1);function v(m,b){const a=t("ExternalLinkIcon");return p(),c("div",null,[u,n("ul",null,[d,n("li",null,[s("无法把 "),n("a",r,[s("main.rs"),o(a)]),s(" 的函数导入作用域")])]),k])}const f=e(l,[["render",v],["__file","9-test.html.vue"]]);export{f as default};
