import{_ as n,Y as s,Z as a,a1 as p}from"./framework-bb209140.js";const t={},e=p(`<h2 id="并发与线程" tabindex="-1"><a class="header-anchor" href="#并发与线程" aria-hidden="true">#</a> 并发与线程</h2><p>Concurrent：程序的不同部分之间独立的执行</p><p>Parallel：程序的不同部分同时运行</p><p>Rust 无畏并发：允许你编写没有细微 BUG 的代码，并在不引入新 BUG 的情况下易于重构</p><h3 id="多线程问题" tabindex="-1"><a class="header-anchor" href="#多线程问题" aria-hidden="true">#</a> 多线程问题</h3><p>竞争状态：线程以不一致的顺序访问数据或资源</p><p>死锁：两个线程彼此等待对方使用完所持有的资源，线程无法继续</p><p>只在某些情况下发生的 BUG，很难可靠地复制现象和修复</p><h3 id="实现线程方式" tabindex="-1"><a class="header-anchor" href="#实现线程方式" aria-hidden="true">#</a> 实现线程方式</h3><p>通过调用 OS 的 API 来创建线程：属于 1：1 模型，需要较小的运行时</p><p>语言自己实现的线程（绿色线程）：属于 M：N 模型，需要更大的运行时</p><p>Rust：需要权衡运行时的支持</p><p>Rust 标准库仅提供 1：1 模型线程</p><h2 id="spawn" tabindex="-1"><a class="header-anchor" href="#spawn" aria-hidden="true">#</a> spawn</h2><p>通过 thread::spawn 函数可以创建新线程，所需参数：一个闭包（在新线程里运行的代码）</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">{</span>
      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hi number {} from the spawned thread!&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hi number {} from the main thread!&quot;</span><span class="token punctuation">,</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中当主线程的 for 循环结束之后，将退出运行，spawn 线程无法完整执行</p><h3 id="线程等待" tabindex="-1"><a class="header-anchor" href="#线程等待" aria-hidden="true">#</a> 线程等待</h3><p>thread::spawn 函数的返回值类型的 JoinHandle</p><p>调用其 join 方法，可以等待对应的其它线程的完成</p><p>join 方法详细描述：调用 handle 的 join 方法会阻止当前运行线程的执行，直到 handle 所表示的这些线程终结</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">{</span>
      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hi number {} from the spawned thread!&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hi number {} from the main thread!&quot;</span><span class="token punctuation">,</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="move" tabindex="-1"><a class="header-anchor" href="#move" aria-hidden="true">#</a> move</h3><p>move 闭包通常和 thread::spawn 函数一起使用，它允许你使用其它线程的数据</p><p>创建线程时，把值的所有权从一个线程转移到另一个线程</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Here&#39;s a vector: {:?}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息传递" tabindex="-1"><a class="header-anchor" href="#消息传递" aria-hidden="true">#</a> 消息传递</h2><p>一种很流行且能保证安全并发的技术就是：消息传递</p><p>线程（Actor）通过彼此发送消息（数据）来进行通信</p><p>Go 语言的名言：<em>不要用共享内存来通信，要用通信来共享内存</em></p><p>Rust 中，通过标准库提供的 Channel 实现通信</p><h3 id="channel定义" tabindex="-1"><a class="header-anchor" href="#channel定义" aria-hidden="true">#</a> <code>Channel</code>定义</h3><p>Channel 包含发送端和接收端</p><p>调用发送端的方法：发送数据</p><p>接收端会检查和接收到达的数据</p><p>如果发送端、接收端中任意一端被丢弃了，那么 Channel 会直接关闭</p><h3 id="channel创建" tabindex="-1"><a class="header-anchor" href="#channel创建" aria-hidden="true">#</a> <code>Channel</code>创建</h3><p>使用 mpsc::channel 函数来创建 Channel</p><p>mpsc：表示 multiple producer，single consumer（多个生产者、一个消费者）</p><p>返回值：一个 tuple，里面元素分别是发送端、接收端</p><h3 id="channel方法" tabindex="-1"><a class="header-anchor" href="#channel方法" aria-hidden="true">#</a> <code>Channel</code>方法</h3><p><strong>发送端</strong></p><p><code>send()</code>方法</p><p>参数：想要发送的数据</p><p>返回：<code>Result&lt;T, E&gt;</code></p><ul><li>如果有问题（例如接收端已被丢弃），就返回一个错误</li></ul><p><strong>接收端</strong></p><p><code>recv()</code>方法：阻止当前线程执行，直到 channel 有值发送过来</p><ul><li>一旦有值收到，就返回<code>Result&lt;T, E&gt;</code></li><li>当发送端关闭，就会收到一个错误</li></ul><p><code>try_recv()</code>方法：不会阻塞当前线程</p><ul><li>立即返回<code>Result&lt;T, E&gt;</code></li><li>如果有数据到达，返回 Ok，里面包含数据</li><li>否则返回一个错误</li><li>通常使用循环调用来检查 try_recv 的结果</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 主线程将持续同步阻塞直到接收到channel消息</span>
  <span class="token keyword">let</span> received <span class="token operator">=</span> rx<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got: {}&quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="channel多值发送" tabindex="-1"><a class="header-anchor" href="#channel多值发送" aria-hidden="true">#</a> <code>Channel</code>多值发送</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;from&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;the&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;thread&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals <span class="token punctuation">{</span>
            tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> received <span class="token keyword">in</span> rx <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got: {}&quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="channel克隆" tabindex="-1"><a class="header-anchor" href="#channel克隆" aria-hidden="true">#</a> <code>Channel</code>克隆</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> tx1 <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;1 hi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1 from&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1 the&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1 thread&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals <span class="token punctuation">{</span>
            tx1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;from&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;the&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;thread&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals <span class="token punctuation">{</span>
            tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> received <span class="token keyword">in</span> rx <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Got: {}&quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="共享状态" tabindex="-1"><a class="header-anchor" href="#共享状态" aria-hidden="true">#</a> 共享状态</h2><p>Rust 支持通过共享状态来实现并发</p><p>Channel 类似单所有权：一旦将值的所有权转移至 Channel，就无法使用它了</p><p>共享内存并发类似多所有权：多个线程可以同时访问同一块内存</p><h3 id="mutex定义" tabindex="-1"><a class="header-anchor" href="#mutex定义" aria-hidden="true">#</a> <code>Mutex</code>定义</h3><p>Mutex 是 mutual exclusion（互斥锁）的简写</p><p>在同一时刻，Mutex 只允许一个线程来访问某些数据</p><p>想要访问数据，线程必须首先获取互斥锁（lock）</p><p>Mutex 通常被描述为：通过锁定系统来保护它所持有的数据</p><p>使用规则有二：</p><ol><li>在使用数据之前，必须尝试获取 lock</li><li>使用完 Mutex 所保护的数据，必须对数据进行解锁，以便其它线程可以获取 lock</li></ol><h3 id="mutex创建" tabindex="-1"><a class="header-anchor" href="#mutex创建" aria-hidden="true">#</a> <code>Mutex</code>创建</h3><p>通过<code>Mutex::new(数据)</code>来创建<code>Mutex&lt;T&gt;</code>（这是一个智能指针）</p><p>访问数据前，通过 lock 方法来获取锁</p><ul><li>该操作会阻塞当前线程</li><li>lock 可能会失败</li><li>返回的是 MutexGuard（智能指针，实现了 Deref 和 Drop）</li></ul><h3 id="mutex多线程共享" tabindex="-1"><a class="header-anchor" href="#mutex多线程共享" aria-hidden="true">#</a> <code>Mutex</code>多线程共享</h3><p>Mutex 在多线程之间共享所有权不能使用<code>Rc&lt;T&gt;</code>，而是<code>Arc&lt;T&gt;</code>原子引用计数</p><p><code>Arc&lt;T&gt;</code>和<code>Rc&lt;T&gt;</code>的 API 是相同的，但是牺牲了一部分性能作为代价</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Arc</span><span class="token punctuation">,</span> <span class="token class-name">Mutex</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> handles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">*</span>num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        handles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> handle <span class="token keyword">in</span> handles <span class="token punctuation">{</span>
        handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Result: {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>counter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="refcellvsmutex" tabindex="-1"><a class="header-anchor" href="#refcellvsmutex" aria-hidden="true">#</a> RefCellVsMutex</h3><p><code>Mutex&lt;T&gt;</code>提供了内部可变性，和 Cell 家族一样</p><p>我们使用<code>RefCell&lt;T&gt;</code>来改变<code>Rc&lt;T&gt;</code>里面的内容</p><p>我们使用<code>Mutex&lt;T&gt;</code>来改变<code>Arc&lt;T&gt;</code>里面的内容</p><p>注意：<code>Mutex&lt;T&gt;</code>有死锁风险</p><h2 id="扩展并发" tabindex="-1"><a class="header-anchor" href="#扩展并发" aria-hidden="true">#</a> 扩展并发</h2><p>Rust 语言的并发特性较少，目前讲的并发特性都来自标准库（而不是语言本身）</p><p>Rust 语言中有两个并发概念：</p><ul><li><code>std::marker::Sync</code></li><li><code>std::marker::Send</code></li></ul><h3 id="send" tabindex="-1"><a class="header-anchor" href="#send" aria-hidden="true">#</a> Send</h3><p>Send 允线程之间转移所有权</p><p>实现了 Send trait 的类型可在线程间转移所有权</p><p>Rust 中几乎所有的类型都实现了 Send。但是<code>Rc&lt;T&gt;</code>没有实现 Send，它只用于单线程情景</p><p>任何完全由 Send 类型组成的类型也被标记为 Send</p><p>除了原始指针之外，几乎所有的基础类型都是 Send</p><h3 id="sync" tabindex="-1"><a class="header-anchor" href="#sync" aria-hidden="true">#</a> Sync</h3><p>Sync 允许从多线程访问</p><p>实现了 Sync trait 的类型可以安全地被多个线程引用</p><p>如果 T 是 Sync，那么<code>&amp;T</code>就是 Send</p><p>基础类型都是 Sync</p><p>完全由 Sync 类型组成的类型也是 Sync。</p><p>但是<code>Rc&lt;T&gt;</code>不是 Sync，<code>RefCell&lt;T&gt;</code>和<code>Cell&lt;T&gt;</code>也不是 Sync</p><p><code>Mutex&lt;T&gt;</code>是 Sync</p><p><strong>注意：手动实现 Send 和 Sync 是不安全的</strong></p>`,99),c=[e];function o(u,l){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","14-concurrent.html.vue"]]);export{k as default};
