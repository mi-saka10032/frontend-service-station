import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as t,a as n,b as s,e as o,d as c,r as i}from"./app.c7c3ca14.js";const l={},u=c('<p>该章节仅对 SQL 和 Mysql 做简单介绍</p><h2 id="常见数据库" tabindex="-1"><a class="header-anchor" href="#常见数据库" aria-hidden="true">#</a> 常见数据库</h2><p>通常我们将数据划分成两类：关系型数据库和非关系型数据库</p><ol><li>关系型数据库：MySQL、Oracle、DB2、SQL Server、Postgre SQL 等</li></ol><ul><li><p>关系型数据库通常我们会创建很多个二维数据表</p></li><li><p>数据表之间相互关联起来，形成一对一、一对多、多对多等关系</p></li><li><p>之后可以利用 SQL 语句在多张表中查询我们所需的数据</p></li><li><p>支持事务，对数据的访问更加的安全</p></li></ul><ol start="2"><li>非关系型数据库：MongoDB、Redis、Memcached、HBse 等</li></ol><ul><li><p>非关系型数据库的英文其实是 Not only SQL，也简称为 NoSQL</p></li><li><p>非关系型数据库比较简单一些，存储数据也会更加自由（甚至我们可以直接将一个复杂的 json 对象直接塞入到数据库中）</p></li><li><p>NoSQL 是基于 Key-Value 的对应关系，并且查询的过程中不需要经过 SQL 解析，所以性能更高</p></li><li><p>NoSQL 通常不支持事物，需要在自己的程序中来保证一些原子性的操作</p></li></ul><p>如何在开发中选择他们呢？具体的选择会根据不同的项目进行综合的分析</p><ul><li><p>目前在公司进行后端开发（Node、Java、Go 等），还是以关系型数据库为主</p></li><li><p>比较常用的用到非关系型数据库的，在爬取大量的数据进行存储时，会比较常见</p></li></ul><h2 id="mysql-介绍" tabindex="-1"><a class="header-anchor" href="#mysql-介绍" aria-hidden="true">#</a> MySQL 介绍</h2><p>MySQL 是一个关系型数据库，其实本质上就是一款软件、一个程序</p><ul><li><p>这个程序中管理着多个数据库</p></li><li><p>每个数据库中可以有多张表</p></li><li><p>每个表中可以有多条数据</p></li></ul><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211015161353155.png" alt="MySQL介绍" loading="lazy"></p><h3 id="终端链接" tabindex="-1"><a class="header-anchor" href="#终端链接" aria-hidden="true">#</a> 终端链接</h3><p>两种方式的区别在于输入密码是直接输入，还是另起一行以密文形式输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> why888\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-u</span> root\nEnter password: your password\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显示数据库" tabindex="-1"><a class="header-anchor" href="#显示数据库" aria-hidden="true">#</a> 显示数据库</h3><p>MylSQL 默认的数据库：</p><p>infomation_schema：信息数据库，其中包括 MySQL 在维护的其他数据库、表、列、访问权限等信息；</p><p>performance_schema：性能数据库，记录着 MySQL Server 数据库引擎在运行过程中的一些资源消耗相关的信息；</p><p>mysql：用于存储数据库管理者的用户信息、权限信息以及一些日志信息等；</p><p>sys：相当于是一个简易版的 performance_schema，将性能数据库中的数据汇总成更容易理解的形式。</p><h3 id="创建数据库-表" tabindex="-1"><a class="header-anchor" href="#创建数据库-表" aria-hidden="true">#</a> 创建数据库-表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> test<span class="token punctuation">;</span>\n\n<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>\n  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  age <span class="token keyword">int</span><span class="token punctuation">,</span>\n  height <span class="token keyword">double</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1.88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;kobe&#39;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">1.98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sql-语句" tabindex="-1"><a class="header-anchor" href="#sql-语句" aria-hidden="true">#</a> SQL 语句</h2><p>SQL 是 Structured Query Language，称之为结构化查询语言，简称 SQL。</p><p>规范：</p><p>通常关键字是大写的，比如 CREATE、TABLE、SHOW 等等；</p><p>一条语句结束后，需要以 ; 结尾；</p><p>如果遇到关键字作为表明或者字段名称，可以使用``包裹。</p><h3 id="ddl" tabindex="-1"><a class="header-anchor" href="#ddl" aria-hidden="true">#</a> DDL</h3><p>DDL：（Data Definition Language）：数据定义语言</p><p>通过 DDL 语句对数据库或者表进行：创建、删除、修改等操作</p><h4 id="创建新的数据库" tabindex="-1"><a class="header-anchor" href="#创建新的数据库" aria-hidden="true">#</a> 创建新的数据库</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> bilibili<span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> bilibili<span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> bilibili\n<span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除数据库" tabindex="-1"><a class="header-anchor" href="#删除数据库" aria-hidden="true">#</a> 删除数据库</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> bilibili<span class="token punctuation">;</span>\n<span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXIT</span> bilibili<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改数据库" tabindex="-1"><a class="header-anchor" href="#修改数据库" aria-hidden="true">#</a> 修改数据库</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 修改数据库的字符集和排序规则</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> bilibili <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_unicode_ci<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dml" tabindex="-1"><a class="header-anchor" href="#dml" aria-hidden="true">#</a> DML</h3><p>DML：（Data Manipulation Language）：数据操作语言</p><p>通过 DML 语句对表进行：添加、删除、修改等操作</p><h4 id="创建数据表" tabindex="-1"><a class="header-anchor" href="#创建数据表" aria-hidden="true">#</a> 创建数据表</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span><span class="token punctuation">(</span>\n	name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	age <span class="token keyword">INT</span><span class="token punctuation">,</span>\n	height <span class="token keyword">DOUBLE</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dql" tabindex="-1"><a class="header-anchor" href="#dql" aria-hidden="true">#</a> DQL</h3><p>DQL：（Data Query Language）：数据查询语言</p><p>通过 DQL 从数据库中查询记录（重点）</p><h4 id="查看当前数据库" tabindex="-1"><a class="header-anchor" href="#查看当前数据库" aria-hidden="true">#</a> 查看当前数据库</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用某一个数据库" tabindex="-1"><a class="header-anchor" href="#使用某一个数据库" aria-hidden="true">#</a> 使用某一个数据库</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> coderhub<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查看当前正在使用的数据库" tabindex="-1"><a class="header-anchor" href="#查看当前正在使用的数据库" aria-hidden="true">#</a> 查看当前正在使用的数据库</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查看数据表" tabindex="-1"><a class="header-anchor" href="#查看数据表" aria-hidden="true">#</a> 查看数据表</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看所有的数据表</span>\n<span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>\n<span class="token comment"># 查看某一个表结构</span>\n<span class="token keyword">DESC</span> <span class="token keyword">user</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dcl" tabindex="-1"><a class="header-anchor" href="#dcl" aria-hidden="true">#</a> DCL</h3><p>DCL：（Data Control Language）：数据控制语言</p><p>对数据库、表格的权限进行相关访问控制操作</p><h2 id="sql-数据类型" tabindex="-1"><a class="header-anchor" href="#sql-数据类型" aria-hidden="true">#</a> SQL 数据类型</h2><p>MySQL 支持的数据类型有：数字类型，日期和时间类型，字符串（字符和字节）类型，空间类型和 JSON 数据类型。</p><h3 id="数字类型" tabindex="-1"><a class="header-anchor" href="#数字类型" aria-hidden="true">#</a> 数字类型</h3><p>整数数字类型：INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT；</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211016172050663.png" alt="MySQL数字类型" loading="lazy"></p><p>浮点数字类型：FLOAT，DOUBLE（FLOAT 是 4 个字节，DOUBLE 是 8 个字节）；</p><p>精确数字类型：DECIMAL，NUMERIC（DECIMAL 是 NUMERIC 的实现形式）</p><h3 id="日期类型" tabindex="-1"><a class="header-anchor" href="#日期类型" aria-hidden="true">#</a> 日期类型</h3><p>YEAR 以 YYYY 格式显示值，范围 1901 到 2155，和 0000</p><p>DATE 类型用于具有日期部分但没有时间部分的值，DATE 以格式 YYYY-MM-DD 显示值，支持的范围是 &#39;1000-01-01&#39; 到 &#39;9999-12-31&#39;</p><p>DATETIME 类型用于包含日期和时间部分的值，DATETIME 以格式&#39;YYYY-MM-DD hh:mm:ss&#39;显示值，支持的范围是 1000-01-01 00:00:00 到 9999-12-31 23:59:59</p><p>TIMESTAMP 数据类型被用于同时包含日期和时间部分的值，TIMESTAMP 以格式&#39;YYYY-MM-DD hh:mm:ss&#39;显示值，但是它的范围是 UTC 的时间范围：&#39;1970-01-01 00:00:01&#39;到&#39;2038-01-19 03:14:07&#39;</p><p>DATETIME 或 TIMESTAMP 值可以包括在高达微秒（6 位）精度的后小数秒一部分，DATETIME 表示的范围可以是&#39;1000-01-01 00:00:00.000000&#39;到&#39;9999-12-31 23:59:59.999999&#39;。</p><h3 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h3><p>CHAR 是定长的，长度不可变，申请的内存大小就是我们指定的大小。在被查询时，会删除后面的空格</p><p>VARCHAR 类型的值是可变长度的字符串，长度可以指定为 0 到 65535 之间的值。在被查询时，不会删除后面的空格</p><p>BINARY 和 VARBINARY 类型用于存储二进制字符串，存储的是字节字符串。</p><p>BLOB 存储大的二进制类型</p><p>TEXT 存储大的字符串类型。</p><h2 id="表约束-重要" tabindex="-1"><a class="header-anchor" href="#表约束-重要" aria-hidden="true">#</a> 表约束（重要）</h2><h3 id="主键" tabindex="-1"><a class="header-anchor" href="#主键" aria-hidden="true">#</a> 主键</h3><p>一张表中，我们为了区分每一条记录的唯一性，必须有一个字段是永远不会重复，并且不会为空的，这个字段我们通常会将它设置为主键(primary key)</p><ul><li><p>主键是表中唯一的索引</p></li><li><p>并且必须是 NOT NULL 的，如果没有设置 NOT NULL，那么 MySQL 也会隐式的设置为 NOT NULL</p></li><li><p>主键也可以是多列索引，PRIMARY KEY(key_part, ...)，我们一般称之为联合主键</p></li><li><p>建议：开发中主键字段应该是和业务无关的，尽量不要使用业务字段来作为主键</p></li></ul><p>某些字段在开发中我们希望是唯一的，不会重复的，比如手机号码、身份证号码等，这个字段我们可以使 UNIQUE 来约束</p><p>使用 UNIQUE 约束的字段在表中必须是不同的</p><p>对于所有引擎，UNIQUE 索引允许 NULL 包含的列具有多个值 NUL</p><p>NOT NULL：某些字段我们要求用户必须插入值，不可以为空，这个时候我们可以使用 NOT NULL 来约束</p><p>DEFAULT：某些字段我们希望在没有设置值时给予一个默认值，这个时候我们可以使用 DEFAULT 来完成</p><p>AUTO_INCREMENT：某些字段我们希望不设置值时可以进行递增，比如用户的 id，这个时候可以使用 AUTO_INCREMENT 来完成</p><h3 id="ddl-1" tabindex="-1"><a class="header-anchor" href="#ddl-1" aria-hidden="true">#</a> DDL</h3><h4 id="根据一个表结构创建另一张表" tabindex="-1"><a class="header-anchor" href="#根据一个表结构创建另一张表" aria-hidden="true">#</a> 根据一个表结构创建另一张表</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user1<span class="token punctuation">`</span></span> <span class="token operator">LIKE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="根据另一个表中的所有内容-创建一个新的表" tabindex="-1"><a class="header-anchor" href="#根据另一个表中的所有内容-创建一个新的表" aria-hidden="true">#</a> 根据另一个表中的所有内容，创建一个新的表</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user3<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dml-1" tabindex="-1"><a class="header-anchor" href="#dml-1" aria-hidden="true">#</a> DML</h3><h4 id="修改表的名字" tabindex="-1"><a class="header-anchor" href="#修改表的名字" aria-hidden="true">#</a> 修改表的名字</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>USERS<span class="token punctuation">`</span></span> <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> <span class="token identifier"><span class="token punctuation">`</span>USER<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="添加一个新的列" tabindex="-1"><a class="header-anchor" href="#添加一个新的列" aria-hidden="true">#</a> 添加一个新的列</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>moment<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token identifier"><span class="token punctuation">`</span>publishTime<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span><span class="token punctuation">;</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>moment<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token identifier"><span class="token punctuation">`</span>updateTime<span class="token punctuation">`</span></span> <span class="token keyword">DATETIME</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除一列数据" tabindex="-1"><a class="header-anchor" href="#删除一列数据" aria-hidden="true">#</a> 删除一列数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>moment<span class="token punctuation">`</span></span> <span class="token keyword">DROP</span> <span class="token identifier"><span class="token punctuation">`</span>updateTime<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="修改列的名称" tabindex="-1"><a class="header-anchor" href="#修改列的名称" aria-hidden="true">#</a> 修改列的名称</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>moment<span class="token punctuation">`</span></span> CHANGE <span class="token identifier"><span class="token punctuation">`</span>publishTime<span class="token punctuation">`</span></span> <span class="token identifier"><span class="token punctuation">`</span>publishDate<span class="token punctuation">`</span></span> <span class="token keyword">DATE</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="修改列的数据类型" tabindex="-1"><a class="header-anchor" href="#修改列的数据类型" aria-hidden="true">#</a> 修改列的数据类型</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>moment<span class="token punctuation">`</span></span> <span class="token keyword">MODIFY</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="插入新数据" tabindex="-1"><a class="header-anchor" href="#插入新数据" aria-hidden="true">#</a> 插入新数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>publishTime<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;iPhone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;iPhone12只要998&#39;</span><span class="token punctuation">,</span> <span class="token number">998.88</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-10-10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 会删除表中所有的数据</span>\n<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n<span class="token comment"># 会删除符合条件的数据</span>\n<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;iPhone&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改完数据显示最新更新时间" tabindex="-1"><a class="header-anchor" href="#修改完数据显示最新更新时间" aria-hidden="true">#</a> 修改完数据显示最新更新时间</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token identifier"><span class="token punctuation">`</span>updateTime<span class="token punctuation">`</span></span> <span class="token keyword">TIMESTAMP</span>\n					<span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改表中所有的数据" tabindex="-1"><a class="header-anchor" href="#修改表中所有的数据" aria-hidden="true">#</a> 修改表中所有的数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span>  <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;iPhone12&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1299.88</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="修改符合条件的数据" tabindex="-1"><a class="header-anchor" href="#修改符合条件的数据" aria-hidden="true">#</a> 修改符合条件的数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span>  <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;iPhone12&#39;</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1299.88</span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;iPhone&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dql-1" tabindex="-1"><a class="header-anchor" href="#dql-1" aria-hidden="true">#</a> DQL</h3><p>SELECT 用于从一个或者多个表中检索选中的行（Record）</p><p>查询的格式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> select_expr <span class="token punctuation">[</span><span class="token punctuation">,</span> select_expr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n		<span class="token punctuation">[</span><span class="token keyword">FROM</span> table_references<span class="token punctuation">]</span>\n		<span class="token punctuation">[</span><span class="token keyword">WHERE</span> where_condition<span class="token punctuation">]</span>\n		<span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> expr <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n		<span class="token punctuation">[</span><span class="token keyword">LIMIT</span> {<span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">,</span><span class="token punctuation">]</span> row_count <span class="token operator">|</span> row_count <span class="token keyword">OFFSET</span> <span class="token keyword">offset</span>}<span class="token punctuation">]</span>\n		<span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> expr<span class="token punctuation">]</span>\n		<span class="token punctuation">[</span><span class="token keyword">HAVING</span> where_condition<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基本查询" tabindex="-1"><a class="header-anchor" href="#基本查询" aria-hidden="true">#</a> 基本查询</h4><p>查询所有的数据并且显示所有的字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询 title、brand、price</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> brand<span class="token punctuation">,</span> price <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>给字段起别名，别名一般在多张表或者给客户端返回对应的 key 时会使用到</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> title <span class="token keyword">as</span> t<span class="token punctuation">,</span> brand <span class="token keyword">as</span> b<span class="token punctuation">,</span> price <span class="token keyword">as</span> p <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="比较运算符、逻辑运算符、between、in" tabindex="-1"><a class="header-anchor" href="#比较运算符、逻辑运算符、between、in" aria-hidden="true">#</a> 比较运算符、逻辑运算符、between、in</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询品牌是华为，并且小于2000元的手机</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;华为&#39;</span> <span class="token operator">and</span> <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span> <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39; 华为&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span> <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 查询1000到2000的手机（不含1000和2000）</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> price <span class="token operator">&gt;</span> <span class="token number">1000</span> <span class="token operator">and</span> price <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span>\n\n<span class="token comment"># OR：符合一个条件即可</span>\n<span class="token comment"># 查询所有的华为手机或者价格小于1000的手机</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> brand <span class="token operator">=</span> <span class="token string">&#39;华为&#39;</span> <span class="token operator">or</span> price <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 查询1000到2000的手机（包含1000和2000）</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> price <span class="token operator">BETWEEN</span> <span class="token number">1000</span> <span class="token operator">and</span> <span class="token number">2000</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 查看多个结果中的一个</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> brand <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;华为&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小米&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="like-关键字实现模糊查询-结合两个特殊符号" tabindex="-1"><a class="header-anchor" href="#like-关键字实现模糊查询-结合两个特殊符号" aria-hidden="true">#</a> like 关键字实现模糊查询，结合两个特殊符号</h4><p>%表示匹配任意个的任意字符</p><p>_表示匹配一个的任意字符</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询所有以v开头的title</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> title <span class="token operator">LIKE</span> <span class="token string">&#39;v%&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 查询带M的title</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span>  title <span class="token operator">LIKE</span> <span class="token string">&#39;%M%&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment"># 查询带M的title必须是第三个字符</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> title <span class="token operator">LIKE</span> <span class="token string">&#39;__M%&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结果排序" tabindex="-1"><a class="header-anchor" href="#结果排序" aria-hidden="true">#</a> 结果排序</h4><p>ORDER BY 有两个常用的值：ASC：升序排列；DESC：降序排列。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> brand <span class="token operator">=</span> <span class="token string">&#39;华为&#39;</span> <span class="token operator">or</span> price <span class="token operator">&lt;</span> <span class="token number">1000</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> 分页查询</h4><p>它的用法有[LIMIT {[offset,] row_count | row_count OFFSET offset}]</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">LIMIT</span> <span class="token number">30</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">LIMIT</span> <span class="token number">30</span> <span class="token keyword">OFFSET</span> <span class="token number">30</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">LIMIT</span> <span class="token number">30</span> <span class="token keyword">OFFSET</span> <span class="token number">60</span><span class="token punctuation">;</span>\n<span class="token comment"># 另外一种写法：offset, row_count</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">LIMIT</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h4><p>聚合函数表示对值集合进行操作的组（集合）函数</p><p>常用函数：SUM MAX MIN AVG COUNT COUNT(DISTINCT)</p><h4 id="group-by" tabindex="-1"><a class="header-anchor" href="#group-by" aria-hidden="true">#</a> Group By</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> brand<span class="token punctuation">,</span>\n		<span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count<span class="token punctuation">,</span>\n		<span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avgPrice<span class="token punctuation">,</span>\n		<span class="token function">MAX</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> maxPrice<span class="token punctuation">,</span>\n		<span class="token function">MIN</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> minPrice<span class="token punctuation">,</span>\n		<span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> avgScore\n<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> brand<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>约束</strong></p><p>希望给 Group By 查询到的结果添加一些约束，那么我们可以使用：<strong>HAVING</strong></p><p>效果：筛选出平均价格在 4000 以下，并且平均分在 7 以上的品牌</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> brand<span class="token punctuation">,</span>\n	<span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count<span class="token punctuation">,</span>\n	<span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avgPrice<span class="token punctuation">,</span>\n	<span class="token function">MAX</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> maxPrice<span class="token punctuation">,</span>\n	<span class="token function">MIN</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">as</span> minPrice<span class="token punctuation">,</span>\n	<span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> avgScore\n	<span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> brand\n<span class="token keyword">HAVING</span> avgPrice <span class="token operator">&lt;</span> <span class="token number">4000</span> <span class="token operator">and</span> avgScore <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="外键约束" tabindex="-1"><a class="header-anchor" href="#外键约束" aria-hidden="true">#</a> 外键约束</h2><p>将 products 的 brand_id 和 brand 的 id 进行绑定</p><p>如果是创建表添加外键约束，我们需要在创建表的()最后添加如下语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>brand_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> brand<span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是表已经创建好，额外添加外键</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>brand_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> brand<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 products 中引用的外键被更新了或者删除了，执行代码会报错。</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211016214918127.png" alt="外键报错" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> products_ibfk_1<span class="token punctuation">;</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">add</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>brand_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> brand<span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n											<span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span>\n											<span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RESTRICT（默认属性）：当更新或删除某个记录时，会检查该记录是否有关联的外键记录，有的话会报错的，不允许更新或删除；</p><p>NO ACTION：和 RESTRICT 是一致的，是在 SQL 标准中定义的；</p><p>CASCADE：当更新或删除某个记录时，会检查该记录是否有关联的外键记录，有的话： 更新：那么会更新对应的记录； 删除：那么关联的记录会被一起删除掉；</p><p>SET NULL：当更新或删除某个记录时，会检查该记录是否有关联的外键记录，有的话，将对应的值设置为 NULL；</p><h2 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询" aria-hidden="true">#</a> 多表查询</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认查询结果为 笛卡尔乘积，也称为 直积，表示为 X*Y。</p><p>大多数情况下，需要使用 table.column 进行 where 筛选。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="多表连接" tabindex="-1"><a class="header-anchor" href="#多表连接" aria-hidden="true">#</a> 多表连接</h2><h3 id="左连接" tabindex="-1"><a class="header-anchor" href="#左连接" aria-hidden="true">#</a> 左连接</h3><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211016232002717.png" alt="MySQL左连接1" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211016232018118.png" alt="MySQL左连接2" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id <span class="token keyword">WHERE</span> brand<span class="token punctuation">.</span>id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="右连接" tabindex="-1"><a class="header-anchor" href="#右连接" aria-hidden="true">#</a> 右连接</h3><p>没有左连接常用。</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211016232153428.png" alt="MySQLy右连接1" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211016232208452.png" alt="MySQL右连接2" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id\n<span class="token keyword">WHERE</span> products<span class="token punctuation">.</span>id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内连接" tabindex="-1"><a class="header-anchor" href="#内连接" aria-hidden="true">#</a> 内连接</h3><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211016232936276.png" alt="MySQL内连接1" loading="lazy"></p><p>内连接在开发中偶尔也会常见使用，看自己的场景</p><p>内连接有其他的写法：CROSS JOIN 或者 JOIN 都可以</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这两个效果一样，但是代表含义不同：</p><ul><li><p>SQL 语句一：内连接，代表的是在两张表连接时就会约束数据之间的关系，来决定之后查询的结果</p></li><li><p>SQL 语句二：where 条件，代表的是先计算出笛卡尔乘积，在笛卡尔乘积的数据基础之上进行 where 条件筛选。</p></li></ul><h3 id="全连接" tabindex="-1"><a class="header-anchor" href="#全连接" aria-hidden="true">#</a> 全连接</h3><p>SQL 规范中全连接是使用 FULL JOIN，但是 MySQL 中并没有对它的支持，我们需要使用 UNION 来实现</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211016232748724.png" alt="MySQL全连接1" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n<span class="token keyword">UNION</span>\n<span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211016232801262.png" alt="MySQL全连接2" loading="lazy"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span>\n<span class="token keyword">UNION</span>\n<span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span> <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>brand_id <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>brand<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>products<span class="token punctuation">`</span></span><span class="token punctuation">.</span>id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见的多对多查询为创建关系表，将 A 表-关系表-B 表左连接，进行查询</p><h2 id="查询数据转对象" tabindex="-1"><a class="header-anchor" href="#查询数据转对象" aria-hidden="true">#</a> 查询数据转对象</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> products<span class="token punctuation">.</span>id <span class="token keyword">as</span> id<span class="token punctuation">,</span> products<span class="token punctuation">.</span>title <span class="token keyword">as</span> title<span class="token punctuation">,</span> products<span class="token punctuation">.</span>price <span class="token keyword">as</span> price<span class="token punctuation">,</span> products<span class="token punctuation">.</span>score <span class="token keyword">as</span> score<span class="token punctuation">,</span>\n	JSON_OBJECT<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> brand<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> brand<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&#39;rank&#39;</span><span class="token punctuation">,</span> brand<span class="token punctuation">.</span>phoneRank<span class="token punctuation">,</span> <span class="token string">&#39;website&#39;</span><span class="token punctuation">,</span> brand<span class="token punctuation">.</span>website<span class="token punctuation">)</span> <span class="token keyword">as</span> brand\n<span class="token keyword">FROM</span> products <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> brand <span class="token keyword">ON</span> products<span class="token punctuation">.</span>brand_id <span class="token operator">=</span> brand<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Node/12-mysql/image-20211017112126810.png" alt="查询数据转对象" loading="lazy"></p><p>在多对多关系中，我们希望查询到的是一个数组</p><p>比如一个学生的多门课程信息，应该是放到一个数组中的；数组中存放的是课程信息的一个个对象；这个时候我们要 JSON_ARRAYAGG 和 JSON_OBJECT 结合来使用。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> stu<span class="token punctuation">.</span>id<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>age<span class="token punctuation">,</span>\n				JSON_ARRAYAGG<span class="token punctuation">(</span>JSON_OBJECT<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> cs<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> cs<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> courses\n<span class="token keyword">FROM</span> students stu\n<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> students_select_courses ssc <span class="token keyword">ON</span> stu<span class="token punctuation">.</span>id <span class="token operator">=</span> ssc<span class="token punctuation">.</span>student_id\n<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> courses cs <span class="token keyword">ON</span> ssc<span class="token punctuation">.</span>course_id <span class="token operator">=</span> cs<span class="token punctuation">.</span>id\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stu<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node-mysql2" tabindex="-1"><a class="header-anchor" href="#node-mysql2" aria-hidden="true">#</a> Node-mysql2</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><ul><li><p>更快/更好的性能</p></li><li><p>预编译语句（Prepared Statement）：.</p><p>提高性能：将创建的语句模块发送给 MySQL，然后 MySQL 编译（解析、优化、转换）语句模块，并且存储它但是不执行，之后我们在真正执行时会给?提供实际的参数才会执行；就算多次执行，也只会编译一次，所以性能是更高的</p><p>防止 SQL 注入：之后传入的值不会像模块引擎那样就编译，那么一些 SQL 注入的内容不会被执行；or 1 = 1 不会被执行</p></li><li><p>支持 Promise，所以我们可以使用 async 和 await 语法</p></li></ul><h3 id="创建步骤" tabindex="-1"><a class="header-anchor" href="#创建步骤" aria-hidden="true">#</a> 创建步骤</h3><p>第一步：创建连接（通过 createConnection），并且获取连接对象；</p><p>第二步：执行 SQL 语句即可（通过 query）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建连接</span>\n<span class="token keyword">const</span> conn <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;coderhub&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;why888.&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 执行SQL语句</span>\nconn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM products;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  conn<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预编译语句" tabindex="-1"><a class="header-anchor" href="#预编译语句" aria-hidden="true">#</a> 预编译语句</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> statement <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM products WHERE price &gt; ? and brand = ?;&quot;</span><span class="token punctuation">;</span>\nconn<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果再次执行该语句，它将会从 LRU（Least Recently Used） Cache 中获取获取，省略了编译 statement 的时间来提高性能</p><h3 id="连接池" tabindex="-1"><a class="header-anchor" href="#连接池" aria-hidden="true">#</a> 连接池</h3><p>前面我们是创建了一个连接（connection），但是如果我们有多个请求的话，该连接很有可能正在被占用，那么我们是否需要每次一个请求都去创建一个新的连接呢？</p><ul><li><p>事实上，mysql2 给我们提供了连接池（connection pools）</p></li><li><p>连接池可以在需要的时候自动创建连接，并且创建的连接不会被销毁，会放到连接池中，后续可以继续使用</p></li><li><p>我们可以在创建连接池的时候设置 LIMIT，也就是最大创建个数。</p></li></ul><h3 id="promise-写法" tabindex="-1"><a class="header-anchor" href="#promise-写法" aria-hidden="true">#</a> Promise 写法</h3><p>在 JavaScript 开发中我们更习惯 Promise 和 await、async 的方式，mysql2 同样是支持的</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>const mysql <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconst pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span>createPool<span class="token punctuation">(</span>{\n    host: <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>\n    port: <span class="token number">3306</span><span class="token punctuation">,</span>\n    <span class="token keyword">database</span>: <span class="token string">&#39;yzh&#39;</span><span class="token punctuation">,</span>\n    <span class="token keyword">user</span>: <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>\n    password: <span class="token string">&#39;Yzh123456.&#39;</span>\n}<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconst statement <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>SELECT * FROM products WHERE price &gt; ?;<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\npool<span class="token punctuation">.</span>promise<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">execute</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;6000&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>results<span class="token punctuation">,</span> <span class="token keyword">fields</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> {\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>const field <span class="token keyword">of</span> <span class="token keyword">fields</span><span class="token punctuation">)</span> {\n        console<span class="token punctuation">.</span>log<span class="token punctuation">(</span>field<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    }\n    pool<span class="token punctuation">.</span><span class="token keyword">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n}<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="orm" tabindex="-1"><a class="header-anchor" href="#orm" aria-hidden="true">#</a> ORM</h3><p>对象关系映射（英语：Object Relational Mapping，简称 ORM，或 O/RM，或 O/R mapping），是一种程序设计的方案：</p><p>从效果上来讲，它提供了一个可在编程语言中，使用<strong>虚拟对象数据库</strong>的效果</p><p>比如在 Java 开发中经常使用的 ORM 包括：Hibernate、MyBatis</p><p>Node 当中的 ORM 我们通常使用的是 sequelize。</p>',218),d={href:"https://www.sequelize.cn/",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"如果我们希望将 Sequelize 和 MySQL 一起使用，那么我们需要先安装两个东西",-1),k=n("ol",null,[n("li",null,[n("p",null,"mysql2：sequelize 在操作 mysql 时使用的是 mysql2；")]),n("li",null,[n("p",null,"sequelize：使用它来让对象映射到表中。")])],-1);function v(m,h){const a=i("ExternalLinkIcon");return p(),t("div",null,[u,n("p",null,[n("a",d,[s("Sequelize"),o(a)]),s(" 是用于 Postgres，MySQL，MariaDB，SQLite 和 Microsoft SQL Server 的基于 Node.js 的 ORM，它支持非常多的功能。")]),r,k])}const g=e(l,[["render",v],["__file","mysql.html.vue"]]);export{g as default};
