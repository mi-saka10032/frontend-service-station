import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as k,c as v,a as n,b as s,e as a,w as e,d as p,r as t}from"./app.e3b96c4f.js";const m={},b=n("p",null,"Vite 是一个由 ESBuild 搭建的快速开发服务器与一套 Rollup 打包器构成的前端构建工具",-1),h=n("p",null,"它基于原生 ES 模块提供了极快的冷启动与模块热更新",-1),g=n("p",null,"基于 Rollup 的预配置，可输出用于生产环境的高度优化过的静态资源",-1),y=n("h2",{id:"安装与创建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装与创建","aria-hidden":"true"},"#"),s(" 安装与创建")],-1),f=n("h3",{id:"安装包",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装包","aria-hidden":"true"},"#"),s(" 安装包")],-1),w=n("p",null,"注意：Vite 需要 Node 版本 14.18+，16+；并且不支持 IE 和其他不支持原生 ESM 的浏览器版本",-1),x=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"npm"),s(" i "),n("span",{class:"token parameter variable"},"-g"),s(` vite
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"yarn"),s(" i "),n("span",{class:"token parameter variable"},"-g"),s(` vite
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"pnpm"),s(" i "),n("span",{class:"token parameter variable"},"-g"),s(` vite
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),q=p(`<h3 id="创建新项目" tabindex="-1"><a class="header-anchor" href="#创建新项目" aria-hidden="true">#</a> 创建新项目</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据自己的情况选用技术栈</p><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Webpack/vue-cli.png" alt="ViteCli" loading="lazy"></p><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><p><img src="https://misaka10032.oss-cn-chengdu.aliyuncs.com/Webpack/vite-structure.jpg" alt="ViteStructure" loading="lazy"></p><p>除了项目根目录新增的一些 ts 配置文件和其他插件配置文件之外，Vite 的项目结构大体与 VueCli 相同</p><p>有一处例外，index.html 的存放路径变更为根目录</p>`,8),E=p(`<h2 id="静态资源" tabindex="-1"><a class="header-anchor" href="#静态资源" aria-hidden="true">#</a> 静态资源</h2><p>注意：index.html 位置现在在项目根路径上</p><h3 id="静态资源路径" tabindex="-1"><a class="header-anchor" href="#静态资源路径" aria-hidden="true">#</a> 静态资源路径</h3><ul><li>如果 URL 是一个绝对路径，那么编译时会从项目根目录开始寻找</li><li>如果 URL 以 <code>.</code> 开头，选择相对路径从当前模块的路径开始，基于文件系统中的目录进行解析</li></ul><p>以一个 demo 为例，假设当前项目有一个位于<code>src/component/Demo.vue</code>的文件，一个<code>src/assets/vue.svg</code>的图片</p><p>::: code-tabs:js</p><template><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">&quot;../assets/vue.svg&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></template>`,7),S=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> img <span class="token keyword">from</span> <span class="token string">&quot;/assets/vue.svg&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>:::</p><p>以上两种写法均能正确编译</p><p>下面是一些其他路径的导入方式</p><h4 id="显式-url-引入" tabindex="-1"><a class="header-anchor" href="#显式-url-引入" aria-hidden="true">#</a> 显式 URL 引入</h4><p>未包含在引入资源内的其他资源，可以使用<code>?url</code>后缀显式导入为一个 url，表示是从外部链接导入的内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> workletURL <span class="token keyword">from</span> <span class="token string">&quot;extra-scalloped-border/worklet.js?url&quot;</span><span class="token punctuation">;</span>
<span class="token constant">CSS</span><span class="token punctuation">.</span>paintWorklet<span class="token punctuation">.</span><span class="token function">addModule</span><span class="token punctuation">(</span>workletURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将资源引入为字符串" tabindex="-1"><a class="header-anchor" href="#将资源引入为字符串" aria-hidden="true">#</a> 将资源引入为字符串</h4><p>资源可以使用 ?raw 后缀声明作为字符串引入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> shaderString <span class="token keyword">from</span> <span class="token string">&quot;./shader.glsl?raw&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="导入脚本作为-worker" tabindex="-1"><a class="header-anchor" href="#导入脚本作为-worker" aria-hidden="true">#</a> 导入脚本作为 Worker</h4><p>脚本可以通过<code>?worker</code>或<code>?sharedworker</code>后缀导入为 web worker</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在生产构建中将会分离出 chunk</span>
<span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">&quot;./shader.js?worker&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// sharedworker</span>
<span class="token keyword">import</span> SharedWorker <span class="token keyword">from</span> <span class="token string">&quot;./shader.js?sharedworker&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sharedWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 内联为 base64 字符串</span>
<span class="token keyword">import</span> InlineWorker <span class="token keyword">from</span> <span class="token string">&quot;./shader.js?worker&amp;inline&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="public" tabindex="-1"><a class="header-anchor" href="#public" aria-hidden="true">#</a> public</h3><p>该 public 的功能跟 VueCli 中的 public 别无二致，大多都是用来存储</p><ul><li>不会被源码引用</li><li>必须保持原有文件名（没有 hash）</li><li>不想引入该资源，只想得到 URL</li></ul><p>这些情况下的资源可以考虑放在 public 中，并且在开发时直接通过 <code>/</code> 根路径访问到，打包时能完整复制到目标目录的根目录下</p><p>注意：</p><ol><li>开发时在代码中使用的 <code>/</code> 根路径为编译时根目录，指向项目根目录</li><li>在项目运行时，代码执行 <code>/</code> 根路径查找时是运行时根目录，与 public 目录同一指向，刚才提到的资源可以调取</li></ol><h3 id="new-url" tabindex="-1"><a class="header-anchor" href="#new-url" aria-hidden="true">#</a> <code>new URL</code></h3><p>i<wbr>mport.meta.url 是一个 ESM 的原生功能，会暴露当前模块的 URL。将它与原生的 URL 构造器 组合使用，在一个 JavaScript 模块中，通过相对路径我们就能得到一个被完整解析的静态资源 URL：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> imgUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;./img.png&quot;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;hero-img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgUrl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在生产构建时，Vite 才会进行必要的转换保证 URL 在打包和资源哈希后仍指向正确的地址。然而，这个 URL 字符串必须是静态的，这样才好分析。否则代码将被原样保留、因而在 build.target 不支持 i<wbr>mport.meta.url 时会导致运行时错误。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Vite 不会转换这个</span>
<span class="token keyword">const</span> imgUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>imagePath<span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="css-相关" tabindex="-1"><a class="header-anchor" href="#css-相关" aria-hidden="true">#</a> css 相关</h2><p>Vite 的 css，包括与编译器在内，也都支持自动导入与 HMR</p><h3 id="postcss" tabindex="-1"><a class="header-anchor" href="#postcss" aria-hidden="true">#</a> PostCSS</h3><p>如果项目包含有效的 PostCSS 配置 (任何受 postcss-load-config 支持的格式，例如 postcss.config.js)，它将会自动应用于所有已导入的 CSS。</p><p>请注意，CSS 最小化压缩将在 PostCSS 之后运行，并会使用 build.cssTarget 选项。</p><h3 id="modules" tabindex="-1"><a class="header-anchor" href="#modules" aria-hidden="true">#</a> Modules</h3><p>任何以 .module.css 为后缀名的 CSS 文件都被认为是一个 CSS modules 文件。导入这样的文件会返回一个相应的模块对象：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* example.module.css */</span>
<span class="token selector">.red</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> classes <span class="token keyword">from</span> <span class="token string">&quot;./example.module.css&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className <span class="token operator">=</span> classes<span class="token punctuation">.</span>red<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h3><p>指定传递给 CSS 预处理器的选项。文件扩展名用作选项的键，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 全局引入变量// 给导入的路径最后加上 ;</span>
        <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@import &#39;@/assets/css/variable.scss&#39;;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模式和环境变量" tabindex="-1"><a class="header-anchor" href="#模式和环境变量" aria-hidden="true">#</a> 模式和环境变量</h2><h3 id="模式" tabindex="-1"><a class="header-anchor" href="#模式" aria-hidden="true">#</a> 模式</h3><p>默认情况下，开发服务器运行在 development 模式，而 build 运行在 production 模式，这一点沿用 webpack 设定</p><p>这意味着当执行 vite build 时，它会自动加载 .env.production 中可能存在的环境变量：</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code># .env.production
VITE_APP_TITLE=My App
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的应用中，你可以使用 i<wbr>mport.meta.env.VITE_APP_TITLE 渲染标题。</p><p>在某些情况下，若想在 vite build 时运行不同的模式来渲染不同的标题，你可以通过传递 --mode 选项标志来覆盖命令使用的默认模式。例如，如果你想在 staging （预发布）模式下构建应用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vite build <span class="token parameter variable">--mode</span> staging
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还需要新建一个 .env.staging 文件：</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code># .env.staging
VITE_APP_TITLE=My App (staging)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 vite build 默认运行生产模式构建，你也可以通过使用不同的模式和对应的 .env 文件配置来改变它，用以运行开发模式的构建：</p><div class="language-env line-numbers-mode" data-ext="env"><pre class="language-env"><code># .env.testing
NODE_ENV=development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>模式切换逻辑 Vite 整体和 Webpack 一样</p><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><p>Vite 在一个特殊的 i<wbr>mport.meta.env 对象上暴露环境变量。这里有一些在所有情况下都可以使用的内建变量：</p><ul><li><p>i<wbr>mport.meta.env.MODE: {string} 应用运行的模式。</p></li><li><p>i<wbr>mport.meta.env.BASE_URL: {string} 部署应用时的基本 URL。他由 base 配置项决定。</p></li><li><p>i<wbr>mport.meta.env.PROD: {boolean} 应用是否运行在生产环境。</p></li><li><p>i<wbr>mport.meta.env.DEV: {boolean} 应用是否运行在开发环境 (永远与 i<wbr>mport.meta.env.PROD 相反)。</p></li><li><p>i<wbr>mport.meta.env.SSR: {boolean} 应用是否运行在 server 上。</p></li></ul><p>在生产环境中，这些环境变量会在构建时被静态替换，因此，在引用它们时请使用完全静态的字符串。动态的 key 将无法生效。例如，动态 key 取值 <code>i<wbr>mport.meta.env[key]</code> 是无效的。</p><h3 id="env文件" tabindex="-1"><a class="header-anchor" href="#env文件" aria-hidden="true">#</a> <code>.env</code>文件</h3>`,56),C={href:"https://github.com/motdotla/dotenv",target:"_blank",rel:"noopener noreferrer"},V=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>.env                <span class="token comment"># 所有情况下都会加载</span>
.env.local          <span class="token comment"># 所有情况下都会加载，但会被 git 忽略</span>
.env.<span class="token punctuation">[</span>mode<span class="token punctuation">]</span>         <span class="token comment"># 只在指定模式下加载</span>
.env.<span class="token punctuation">[</span>mode<span class="token punctuation">]</span>.local   <span class="token comment"># 只在指定模式下加载，但会被 git 忽略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载的环境变量也会通过 i<wbr>mport.meta.env 以字符串形式暴露给客户端源码。</p><p>为了防止意外地将一些环境变量泄漏到客户端，只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码</p><h2 id="构建优化" tabindex="-1"><a class="header-anchor" href="#构建优化" aria-hidden="true">#</a> 构建优化</h2><h3 id="按需导入" tabindex="-1"><a class="header-anchor" href="#按需导入" aria-hidden="true">#</a> 按需导入</h3><p>首先需要明确一点，Vite 基于 rollup 的 tree-shaking 打包，天生支持 ESM 的按需加载，所以使用依赖时要注意第三方依赖是不是支持 ESM</p><p>比如<code>lodash</code>就是默认 CJS 的依赖，即使引入到 Vite 项目中打包后还是很大，这时候就需要使用它的 ESM 版本了<code>lodash-es</code>，使用这个版本的 lodash 库就能正确按需导入了</p><h3 id="分包策略" tabindex="-1"><a class="header-anchor" href="#分包策略" aria-hidden="true">#</a> 分包策略</h3><p>注意 1：Vite2.9 开始需要先引入 splitVendorChunkPlugin 再使用分包配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> splitVendorChunkPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">splitVendorChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 2：Vite 中同样也有代码分割配置，但有点不同的是，如果用户配置了手动分包，就会默认覆盖 Vite 原来提供的 vendor 分包逻辑，会导致打包出现大量的代码碎片</p>`,11),I={href:"https://www.jianshu.com/p/a0845aa1ff07",target:"_blank",rel:"noopener noreferrer"},L=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.ts</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">manualChunks</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token punctuation">{</span> getModuleInfo <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> cssLangs <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\\\.(css|less|sass|scss|styl|stylus|pcss|postcss)($|\\\\?)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> cssLangRE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>cssLangs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplitVendorChunkCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> isCSSRequest <span class="token operator">=</span> <span class="token punctuation">(</span>request<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">boolean</span> <span class="token operator">=&gt;</span>
          cssLangRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 分vendor包</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          <span class="token operator">!</span><span class="token function">isCSSRequest</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          <span class="token function">staticImportedByEntry</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> getModuleInfo<span class="token punctuation">,</span> cache<span class="token punctuation">.</span>cache<span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token string">&quot;vendor&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
          <span class="token comment">// 分manifest包，解决chunk碎片问题</span>
          <span class="token function">getModuleInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>importers<span class="token punctuation">.</span>length <span class="token operator">+</span>
            <span class="token function">getModuleInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>dynamicImporters<span class="token punctuation">.</span>length <span class="token operator">&gt;</span>
            <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
          id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token string">&quot;manifest&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SplitVendorChunkCache</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">staticImportedByEntry</span><span class="token punctuation">(</span>
  <span class="token parameter">id<span class="token punctuation">,</span>
  getModuleInfo<span class="token punctuation">,</span>
  cache<span class="token punctuation">,</span>
  importStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>importStack<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token function">getModuleInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mod<span class="token punctuation">.</span>isEntry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> someImporterIs <span class="token operator">=</span> mod<span class="token punctuation">.</span>importers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">importer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">staticImportedByEntry</span><span class="token punctuation">(</span>
      importer<span class="token punctuation">,</span>
      getModuleInfo<span class="token punctuation">,</span>
      cache<span class="token punctuation">,</span>
      importStack<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> someImporterIs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> someImporterIs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态资源-1" tabindex="-1"><a class="header-anchor" href="#静态资源-1" aria-hidden="true">#</a> 静态资源</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">chunkFileNames</span><span class="token operator">:</span> <span class="token string">&quot;js/[name]-[hash].js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 引入文件名的名称</span>
        <span class="token literal-property property">entryFileNames</span><span class="token operator">:</span> <span class="token string">&quot;js/[name]-[hash].js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 包的入口文件名称</span>
        <span class="token literal-property property">assetFileNames</span><span class="token operator">:</span> <span class="token string">&quot;[ext]/[name]-[hash].[ext]&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 资源文件像 字体，图片等</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭配置项" tabindex="-1"><a class="header-anchor" href="#关闭配置项" aria-hidden="true">#</a> 关闭配置项</h3><p>这里包含了删除调试和控制台代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">terserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//生产环境时移除console</span>
        <span class="token literal-property property">drop_console</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">drop_debugger</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//   关闭文件计算</span>
    <span class="token literal-property property">reportCompressedSize</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">//   关闭生成map文件 可以达到缩小打包体积</span>
    <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 这个生产环境一定要关闭，不然打包的产物会很大</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="低版本浏览器兼容" tabindex="-1"><a class="header-anchor" href="#低版本浏览器兼容" aria-hidden="true">#</a> 低版本浏览器兼容</h3><p>首先需要安装插件<code>npm i @vitejs/plugin-legacy -D</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> legacyPlugin <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-legacy&#39;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">legacyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;chrome 52&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Android &amp;gt; 39&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;iOS &amp;gt;= 10.3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;iOS &amp;gt;= 10.3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 需要兼容的目标列表，可以设置多个</span>
      <span class="token literal-property property">additionalLegacyPolyfills</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;regenerator-runtime/runtime&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 面向IE11时需要此插件</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启用-gzip-压缩" tabindex="-1"><a class="header-anchor" href="#启用-gzip-压缩" aria-hidden="true">#</a> 启用 gzip 压缩</h3><p>安装插件 <code>npm install vite-plugin-compression -D</code></p><p>参数：</p><ul><li>filter：过滤器，对哪些类型的文件进行压缩，默认为/.(js|mjs|json|css|html)$/i</li><li>verbose: true：是否在控制台输出压缩结果，默认为 true</li><li>threshold ：启用压缩的文件大小限制，单位是字节，默认为 0</li><li>disable : false：是否禁用压缩，默认为 false</li><li>deleteOriginFile ：压缩后是否删除原文件，默认为 false</li><li>algorithm ：采用的压缩算法，默认是 gzip</li><li>ext ：生成的压缩包后缀</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">viteCompression</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">verbose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">disable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>
  <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">&quot;gzip&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">ext</span><span class="token operator">:</span> <span class="token string">&quot;.gz&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是 nginx.conf 的配置参考</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>server{
    #gzip
    #开启gzip功能
    gzip on;
    #开启gzip静态压缩功能
    gzip_static on;
    #gzip缓存大小
    gzip_buffers 4 16k;
    #gzip http版本
    gzip_http_version 1.1;
    #gzip 压缩级别 1-10
    gzip_comp_level 5;
    #gzip 压缩类型
    gzip_types text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    gzip_vary on;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> compressPlugin <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-compression&#39;</span>

<span class="token comment">// compress: &#39;gzip&#39; | &#39;brotli&#39; | &#39;none&#39;</span>
<span class="token keyword">function</span> <span class="token function">configCompressPlugin</span><span class="token punctuation">(</span><span class="token parameter">isBuild<span class="token punctuation">,</span> compress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isBuild<span class="token punctuation">)</span> <span class="token keyword">return</span> plugins<span class="token punctuation">;</span>
  <span class="token keyword">const</span> compressList <span class="token operator">=</span> compress<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>compressList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;gzip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token function">compressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">verbose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">disable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>
        <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">&quot;gzip&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ext</span><span class="token operator">:</span> <span class="token string">&quot;.gz&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>compressList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;brotli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token function">compressPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">verbose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">disable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>
        <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">&quot;brotliCompress&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ext</span><span class="token operator">:</span> <span class="token string">&quot;.br&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> plugins<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isBuild <span class="token operator">=</span> mode <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token comment">// mode == production</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span><span class="token function">configCompressPlugin</span><span class="token punctuation">(</span>isBuild<span class="token punctuation">,</span> <span class="token string">&#39;gzip&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-cdn" tabindex="-1"><a class="header-anchor" href="#配置-cdn" aria-hidden="true">#</a> 配置 CDN</h3><p>一般这个功能，仅适用于公司有自己的 cdn 库，否则使用第三方的 cdn 稳定性很难保证</p><p><code>npm install vite-plugin-cdn-import --save-dev</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ViteCDNPlugin <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-cdn-import&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">ViteCDNPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lodash&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 包名</span>
          <span class="token keyword">var</span><span class="token operator">:</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 对应cdn包导出的变量，如jQuery导出的是$</span>
          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function R(z,B){const o=t("RouterLink"),r=t("CodeTabs"),i=t("ExternalLinkIcon");return k(),v("div",null,[b,h,g,n("p",null,[s("Vite 与 VueCli 和 Webpack 的对比详见"),a(o,{to:"/vue3/2-%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B.html#%E4%BC%98%E7%A7%80%E7%9A%84%E5%86%B7%E5%90%AF%E5%8A%A8"},{default:e(()=>[s("Vite 冷启动")]),_:1})]),y,f,w,a(r,{id:"21",data:[{title:"npm"},{title:"yarn"},{title:"pnpm"}],"tab-id":"shell"},{tab0:e(({title:c,value:l,isActive:u})=>[x]),tab1:e(({title:c,value:l,isActive:u})=>[j]),tab2:e(({title:c,value:l,isActive:u})=>[_]),_:1}),q,n("p",null,[s("其他文件夹的作用详见"),a(o,{to:"/webpack/vuecli.html#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84"},{default:e(()=>[s("VueCli 目录结构")]),_:1})]),E,n("template",null,[S,n("p",null,[s("同样的，Vite 使用"),n("a",C,[s("dotenv"),a(i)]),s("从环境目录中的下列文件加载额外的环境变量")]),V,n("p",null,[s("借用源码中原有的 vendor 逻辑，再结合实际情况，以下分包策略代码仅供参考。参考链接："),n("a",I,[s("https://www.jianshu.com/p/a0845aa1ff07"),a(i)])]),L])])}const A=d(m,[["render",R],["__file","6-vite.html.vue"]]);export{A as default};
